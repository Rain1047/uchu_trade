2025-05-22 21:16:27 - __main__ - INFO - 启动FastAPI服务器 - 主机: 127.0.0.1, 端口: 8000
2025-05-22 21:19:40 - __main__ - INFO - 启动FastAPI服务器 - 主机: 127.0.0.1, 端口: 8000
2025-05-22 21:20:12 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-22 21:20:13 - backend.service_center.okx_service.okx_balance_service - ERROR - list_account_balance error, response: 50110, None
2025-05-22 21:20:14 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-22 21:20:14 - backend.service_center.okx_service.okx_balance_service - ERROR - list_account_balance error, response: 50110, None
2025-05-22 21:24:25 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-22 21:24:47 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-22 21:24:47 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-22 21:24:47 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-22 21:24:47 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-22 21:24:47 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-22 21:24:47 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-22 21:25:10 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-22 21:25:10 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-22 21:25:10 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-22 21:25:10 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-22 21:25:10 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-22 21:25:10 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-22 21:25:23 - backend.controller_center.record.record_controller - ERROR - Error processing request: This session is provisioning a new connection; concurrent operations are not permitted (Background on this error at: https://sqlalche.me/e/20/isce)
2025-05-22 21:25:41 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-22 21:25:41 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-22 21:25:41 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-22 21:25:41 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-22 21:25:41 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-22 21:25:41 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-22 21:25:41 - __main__ - INFO - 启动FastAPI服务器 - 主机: 127.0.0.1, 端口: 8000
2025-05-22 21:25:44 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-22 21:25:44 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-22 21:25:44 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-22 21:25:44 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-22 21:25:45 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-22 21:25:45 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-22 21:26:25 - backend.service_center.okx_service.okx_balance_service - INFO - 初始化OKXBalanceService
2025-05-22 21:26:25 - backend.service_center.okx_service.okx_balance_service - INFO - OKXBalanceService初始化完成
2025-05-22 21:26:25 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 21:26:25 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 21:26:26 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-22 21:26:26 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 64.181.249.61 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-22 21:26:26 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 64.181.249.61 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-22 21:26:26 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 64.181.249.61 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-22 21:26:26 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 64.181.249.61 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-22 21:26:26 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 21:26:26 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 21:26:27 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-22 21:26:27 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 64.181.249.61 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-22 21:26:27 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 64.181.249.61 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-22 21:26:27 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 64.181.249.61 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-22 21:26:27 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 64.181.249.61 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-22 21:26:33 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 21:26:33 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 21:26:34 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-22 21:26:34 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 64.181.249.61 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-22 21:26:34 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 64.181.249.61 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-22 21:26:34 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 64.181.249.61 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-22 21:26:34 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 64.181.249.61 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-22 21:26:36 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 21:26:36 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 21:45:03 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 21:45:03 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 21:45:04 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-22 21:45:04 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 52.68.181.50 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-22 21:45:04 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 52.68.181.50 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-22 21:45:04 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 52.68.181.50 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-22 21:45:04 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 52.68.181.50 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-22 21:45:04 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 21:45:04 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 21:45:04 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-22 21:45:04 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 52.68.181.50 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-22 21:45:04 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 52.68.181.50 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-22 21:45:04 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 52.68.181.50 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-22 21:45:04 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 52.68.181.50 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-22 21:47:27 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 21:47:27 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 21:47:27 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 21:47:27 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 21:47:28 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 21:47:28 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22181.769734215908', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1201.8309180089743', 'spotUplRatio': '0.0885096335575055', 'stgyEq': '0', 'totalPnl': '1188.4766262194953', 'totalPnlRatio': '0.0874401517629524', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '8003.008602596479', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1461.6877656573727', 'spotUplRatio': '0.2234545288473181', 'stgyEq': '0', 'totalPnl': '1572.0942463739839', 'totalPnlRatio': '0.2444588995113641', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4727.063313235981', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2281.700197960311', 'spotUplRatio': '-0.3255496057636076', 'stgyEq': '0', 'totalPnl': '-4214.791669143782', 'totalPnlRatio': '-0.4713554041582174', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.25145173115', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '818.8597244067064', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '19.324232456350472', 'spotUplRatio': '0.0241693241332061', 'stgyEq': '0', 'totalPnl': '18.523896628762827', 'totalPnlRatio': '0.0231451548090728', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011083226', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038831432144865', 'spotUplRatio': '-0.7779564878951264', 'stgyEq': '0', 'totalPnl': '-1774.5934540504522', 'totalPnlRatio': '-0.9999993754502445', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001029094', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061767', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004364976', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009372284532', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '39885.954048897125', 'uTime': '1747921648214', 'upl': ''}], 'msg': ''}
2025-05-22 21:47:28 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22181.769734215908', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1201.8309180089743', 'spotUplRatio': '0.0885096335575055', 'stgyEq': '0', 'totalPnl': '1188.4766262194953', 'totalPnlRatio': '0.0874401517629524', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '8003.008602596479', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1461.6877656573727', 'spotUplRatio': '0.2234545288473181', 'stgyEq': '0', 'totalPnl': '1572.0942463739839', 'totalPnlRatio': '0.2444588995113641', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4727.063313235981', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2281.700197960311', 'spotUplRatio': '-0.3255496057636076', 'stgyEq': '0', 'totalPnl': '-4214.791669143782', 'totalPnlRatio': '-0.4713554041582174', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.25145173115', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '818.8597244067064', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '19.324232456350472', 'spotUplRatio': '0.0241693241332061', 'stgyEq': '0', 'totalPnl': '18.523896628762827', 'totalPnlRatio': '0.0231451548090728', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011083226', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038831432144865', 'spotUplRatio': '-0.7779564878951264', 'stgyEq': '0', 'totalPnl': '-1774.5934540504522', 'totalPnlRatio': '-0.9999993754502445', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001029094', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061767', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004364976', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009372284532', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '39885.954048897125', 'uTime': '1747921648214', 'upl': ''}], 'msg': ''}
2025-05-22 21:47:28 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 21:47:28 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 21:47:28 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 21:47:28 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22182.27434893534', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1202.1671575844045', 'spotUplRatio': '0.0885343961436255', 'stgyEq': '0', 'totalPnl': '1188.8128657949255', 'totalPnlRatio': '0.087464890019352', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '8003.015808618992', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1461.6949716798856', 'spotUplRatio': '0.2234556304631374', 'stgyEq': '0', 'totalPnl': '1572.1014523964968', 'totalPnlRatio': '0.2444600200398168', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4727.063313235981', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2281.700197960311', 'spotUplRatio': '-0.3255496057636076', 'stgyEq': '0', 'totalPnl': '-4214.791669143782', 'totalPnlRatio': '-0.4713554041582174', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.25145173115', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '818.8597244067064', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '19.324232456350472', 'spotUplRatio': '0.0241693241332061', 'stgyEq': '0', 'totalPnl': '18.523896628762827', 'totalPnlRatio': '0.0231451548090728', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011083226', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038831432144865', 'spotUplRatio': '-0.7779564878951264', 'stgyEq': '0', 'totalPnl': '-1774.5934540504522', 'totalPnlRatio': '-0.9999993754502445', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001029094', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061767', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004364976', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009372284532', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '39886.465869639076', 'uTime': '1747921648365', 'upl': ''}], 'msg': ''}
2025-05-22 21:47:28 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22182.27434893534', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1202.1671575844045', 'spotUplRatio': '0.0885343961436255', 'stgyEq': '0', 'totalPnl': '1188.8128657949255', 'totalPnlRatio': '0.087464890019352', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '8003.015808618992', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1461.6949716798856', 'spotUplRatio': '0.2234556304631374', 'stgyEq': '0', 'totalPnl': '1572.1014523964968', 'totalPnlRatio': '0.2444600200398168', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4727.063313235981', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2281.700197960311', 'spotUplRatio': '-0.3255496057636076', 'stgyEq': '0', 'totalPnl': '-4214.791669143782', 'totalPnlRatio': '-0.4713554041582174', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.25145173115', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '818.8597244067064', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '19.324232456350472', 'spotUplRatio': '0.0241693241332061', 'stgyEq': '0', 'totalPnl': '18.523896628762827', 'totalPnlRatio': '0.0231451548090728', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011083226', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038831432144865', 'spotUplRatio': '-0.7779564878951264', 'stgyEq': '0', 'totalPnl': '-1774.5934540504522', 'totalPnlRatio': '-0.9999993754502445', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001029094', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061767', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004364976', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009372284532', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '39886.465869639076', 'uTime': '1747921648365', 'upl': ''}], 'msg': ''}
2025-05-22 21:47:32 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 21:47:32 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 21:47:32 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 21:47:32 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22184.629217626007', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1203.7362756030673', 'spotUplRatio': '0.0886499548788512', 'stgyEq': '0', 'totalPnl': '1190.3819838135878', 'totalPnlRatio': '0.0875803352158825', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '8003.916561433079', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1462.5957244939723', 'spotUplRatio': '0.2235933324405423', 'stgyEq': '0', 'totalPnl': '1573.0022052105833', 'totalPnlRatio': '0.2446000860963978', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4730.01711243192', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2278.746398764371', 'spotUplRatio': '-0.3251281620679798', 'stgyEq': '0', 'totalPnl': '-4211.837869947842', 'totalPnlRatio': '-0.4710250701054105', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.25145173115', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '819.3673869760843', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '19.831895025610404', 'spotUplRatio': '0.0248042710173555', 'stgyEq': '0', 'totalPnl': '19.03155919802282', 'totalPnlRatio': '0.0237794667463382', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011091916', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038822742144865', 'spotUplRatio': '-0.7777823907396421', 'stgyEq': '0', 'totalPnl': '-1774.5934531814523', 'totalPnlRatio': '-0.9999993749605552', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001029732', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061776', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004364976', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009372284532', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '39893.18295384286', 'uTime': '1747921652672', 'upl': ''}], 'msg': ''}
2025-05-22 21:47:32 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22184.629217626007', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1203.7362756030673', 'spotUplRatio': '0.0886499548788512', 'stgyEq': '0', 'totalPnl': '1190.3819838135878', 'totalPnlRatio': '0.0875803352158825', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '8003.916561433079', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1462.5957244939723', 'spotUplRatio': '0.2235933324405423', 'stgyEq': '0', 'totalPnl': '1573.0022052105833', 'totalPnlRatio': '0.2446000860963978', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4730.01711243192', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2278.746398764371', 'spotUplRatio': '-0.3251281620679798', 'stgyEq': '0', 'totalPnl': '-4211.837869947842', 'totalPnlRatio': '-0.4710250701054105', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.25145173115', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '819.3673869760843', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '19.831895025610404', 'spotUplRatio': '0.0248042710173555', 'stgyEq': '0', 'totalPnl': '19.03155919802282', 'totalPnlRatio': '0.0237794667463382', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011091916', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038822742144865', 'spotUplRatio': '-0.7777823907396421', 'stgyEq': '0', 'totalPnl': '-1774.5934531814523', 'totalPnlRatio': '-0.9999993749605552', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001029732', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061776', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004364976', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009372284532', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '39893.18295384286', 'uTime': '1747921652672', 'upl': ''}], 'msg': ''}
2025-05-22 21:47:33 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 21:47:33 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 21:47:33 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 21:47:33 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22184.629217626007', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1203.7362756030673', 'spotUplRatio': '0.0886499548788512', 'stgyEq': '0', 'totalPnl': '1190.3819838135878', 'totalPnlRatio': '0.0875803352158825', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '8003.830089162925', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1462.5092522238192', 'spotUplRatio': '0.2235801130507113', 'stgyEq': '0', 'totalPnl': '1572.9157329404297', 'totalPnlRatio': '0.2445866397549659', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4730.01711243192', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2278.746398764371', 'spotUplRatio': '-0.3251281620679798', 'stgyEq': '0', 'totalPnl': '-4211.837869947842', 'totalPnlRatio': '-0.4710250701054105', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.168349195192', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '819.3673869760843', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '19.831895025610404', 'spotUplRatio': '0.0248042710173555', 'stgyEq': '0', 'totalPnl': '19.03155919802282', 'totalPnlRatio': '0.0237794667463382', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011091916', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038822742144865', 'spotUplRatio': '-0.7777823907396421', 'stgyEq': '0', 'totalPnl': '-1774.5934531814523', 'totalPnlRatio': '-0.9999993749605552', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001029732', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061785', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004365504', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009372284532', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '39893.013379038166', 'uTime': '1747921653284', 'upl': ''}], 'msg': ''}
2025-05-22 21:47:33 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22184.629217626007', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1203.7362756030673', 'spotUplRatio': '0.0886499548788512', 'stgyEq': '0', 'totalPnl': '1190.3819838135878', 'totalPnlRatio': '0.0875803352158825', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '8003.830089162925', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1462.5092522238192', 'spotUplRatio': '0.2235801130507113', 'stgyEq': '0', 'totalPnl': '1572.9157329404297', 'totalPnlRatio': '0.2445866397549659', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4730.01711243192', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2278.746398764371', 'spotUplRatio': '-0.3251281620679798', 'stgyEq': '0', 'totalPnl': '-4211.837869947842', 'totalPnlRatio': '-0.4710250701054105', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.168349195192', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '819.3673869760843', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '19.831895025610404', 'spotUplRatio': '0.0248042710173555', 'stgyEq': '0', 'totalPnl': '19.03155919802282', 'totalPnlRatio': '0.0237794667463382', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011091916', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038822742144865', 'spotUplRatio': '-0.7777823907396421', 'stgyEq': '0', 'totalPnl': '-1774.5934531814523', 'totalPnlRatio': '-0.9999993749605552', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001029732', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061785', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004365504', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009372284532', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '39893.013379038166', 'uTime': '1747921653284', 'upl': ''}], 'msg': ''}
2025-05-22 21:47:43 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 21:47:43 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 21:47:44 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 21:47:44 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 22:04:42 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 22:04:42 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 22:04:43 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 22:04:43 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 22:04:44 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 22:04:44 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22385.21356859912', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1337.3915068356966', 'spotUplRatio': '0.0984930828614809', 'stgyEq': '0', 'totalPnl': '1324.0372150462172', 'totalPnlRatio': '0.0974137921346517', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7992.444573592871', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1451.1237366537646', 'spotUplRatio': '0.221839560056313', 'stgyEq': '0', 'totalPnl': '1561.5302173703758', 'totalPnlRatio': '0.2428162047997814', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4743.013828894056', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2265.749682302235', 'spotUplRatio': '-0.3232738098072174', 'stgyEq': '0', 'totalPnl': '-4198.841153485706', 'totalPnlRatio': '-0.4695716002730607', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.085246659233', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '821.62879296695', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '22.093301015950445', 'spotUplRatio': '0.0276326707740217', 'stgyEq': '0', 'totalPnl': '21.292965188362814', 'totalPnlRatio': '0.0266050381032477', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011402149', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038512509144865', 'spotUplRatio': '-0.7715671222888469', 'stgyEq': '0', 'totalPnl': '-1774.5934221581524', 'totalPnlRatio': '-0.9999993574786467', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001032574', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061794', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.0000044044', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.000000939066877', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40097.387265707395', 'uTime': '1747922684152', 'upl': ''}], 'msg': ''}
2025-05-22 22:04:44 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22385.21356859912', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1337.3915068356966', 'spotUplRatio': '0.0984930828614809', 'stgyEq': '0', 'totalPnl': '1324.0372150462172', 'totalPnlRatio': '0.0974137921346517', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7992.444573592871', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1451.1237366537646', 'spotUplRatio': '0.221839560056313', 'stgyEq': '0', 'totalPnl': '1561.5302173703758', 'totalPnlRatio': '0.2428162047997814', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4743.013828894056', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2265.749682302235', 'spotUplRatio': '-0.3232738098072174', 'stgyEq': '0', 'totalPnl': '-4198.841153485706', 'totalPnlRatio': '-0.4695716002730607', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.085246659233', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '821.62879296695', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '22.093301015950445', 'spotUplRatio': '0.0276326707740217', 'stgyEq': '0', 'totalPnl': '21.292965188362814', 'totalPnlRatio': '0.0266050381032477', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011402149', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038512509144865', 'spotUplRatio': '-0.7715671222888469', 'stgyEq': '0', 'totalPnl': '-1774.5934221581524', 'totalPnlRatio': '-0.9999993574786467', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001032574', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061794', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.0000044044', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.000000939066877', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40097.387265707395', 'uTime': '1747922684152', 'upl': ''}], 'msg': ''}
2025-05-22 22:04:44 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 22:04:44 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 22:04:44 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 22:04:44 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22385.465875958835', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1337.5596266234118', 'spotUplRatio': '0.0985054641545409', 'stgyEq': '0', 'totalPnl': '1324.2053348339323', 'totalPnlRatio': '0.0974261612628515', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7992.617518133176', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1451.2966811940698', 'spotUplRatio': '0.2218659988359749', 'stgyEq': '0', 'totalPnl': '1561.703161910681', 'totalPnlRatio': '0.2428430974826451', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4743.013828894056', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2265.749682302235', 'spotUplRatio': '-0.3232738098072174', 'stgyEq': '0', 'totalPnl': '-4198.841153485706', 'totalPnlRatio': '-0.4695716002730607', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.085246659233', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '821.62879296695', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '22.093301015950445', 'spotUplRatio': '0.0276326707740217', 'stgyEq': '0', 'totalPnl': '21.292965188362814', 'totalPnlRatio': '0.0266050381032477', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011402149', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038512509144865', 'spotUplRatio': '-0.7715671222888469', 'stgyEq': '0', 'totalPnl': '-1774.5934221581524', 'totalPnlRatio': '-0.9999993574786467', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001032574', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061794', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.0000044044', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.000000939066877', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40097.81251760742', 'uTime': '1747922684331', 'upl': ''}], 'msg': ''}
2025-05-22 22:04:44 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22385.465875958835', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1337.5596266234118', 'spotUplRatio': '0.0985054641545409', 'stgyEq': '0', 'totalPnl': '1324.2053348339323', 'totalPnlRatio': '0.0974261612628515', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7992.617518133176', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1451.2966811940698', 'spotUplRatio': '0.2218659988359749', 'stgyEq': '0', 'totalPnl': '1561.703161910681', 'totalPnlRatio': '0.2428430974826451', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4743.013828894056', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2265.749682302235', 'spotUplRatio': '-0.3232738098072174', 'stgyEq': '0', 'totalPnl': '-4198.841153485706', 'totalPnlRatio': '-0.4695716002730607', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.085246659233', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '821.62879296695', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '22.093301015950445', 'spotUplRatio': '0.0276326707740217', 'stgyEq': '0', 'totalPnl': '21.292965188362814', 'totalPnlRatio': '0.0266050381032477', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011402149', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038512509144865', 'spotUplRatio': '-0.7715671222888469', 'stgyEq': '0', 'totalPnl': '-1774.5934221581524', 'totalPnlRatio': '-0.9999993574786467', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001032574', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061794', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.0000044044', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.000000939066877', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40097.81251760742', 'uTime': '1747922684331', 'upl': ''}], 'msg': ''}
2025-05-22 22:05:15 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 22:05:15 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 22:05:16 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 22:05:16 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 22:05:17 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 22:05:17 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22374.86896685082', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1330.4985955394227', 'spotUplRatio': '0.0979854498460246', 'stgyEq': '0', 'totalPnl': '1317.144303749943', 'totalPnlRatio': '0.0969066578784636', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7992.617518133176', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1451.2966811940698', 'spotUplRatio': '0.2218659988359749', 'stgyEq': '0', 'totalPnl': '1561.703161910681', 'totalPnlRatio': '0.2428430974826451', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4745.5737881972045', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2263.189722999087', 'spotUplRatio': '-0.3229085586043399', 'stgyEq': '0', 'totalPnl': '-4196.281194182557', 'totalPnlRatio': '-0.469285310760628', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.168349195192', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '821.6749441096207', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '22.139452158610403', 'spotUplRatio': '0.0276903932180353', 'stgyEq': '0', 'totalPnl': '21.33911633102275', 'totalPnlRatio': '0.0266627028248172', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011376948', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038537710144865', 'spotUplRatio': '-0.772072004039752', 'stgyEq': '0', 'totalPnl': '-1774.5934246782522', 'totalPnlRatio': '-0.9999993588987456', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001032632', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061776', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004406688', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009401699313', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40089.90481896847', 'uTime': '1747922717483', 'upl': ''}], 'msg': ''}
2025-05-22 22:05:17 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22374.86896685082', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1330.4985955394227', 'spotUplRatio': '0.0979854498460246', 'stgyEq': '0', 'totalPnl': '1317.144303749943', 'totalPnlRatio': '0.0969066578784636', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7992.617518133176', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1451.2966811940698', 'spotUplRatio': '0.2218659988359749', 'stgyEq': '0', 'totalPnl': '1561.703161910681', 'totalPnlRatio': '0.2428430974826451', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4745.5737881972045', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2263.189722999087', 'spotUplRatio': '-0.3229085586043399', 'stgyEq': '0', 'totalPnl': '-4196.281194182557', 'totalPnlRatio': '-0.469285310760628', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.168349195192', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '821.6749441096207', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '22.139452158610403', 'spotUplRatio': '0.0276903932180353', 'stgyEq': '0', 'totalPnl': '21.33911633102275', 'totalPnlRatio': '0.0266627028248172', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011376948', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038537710144865', 'spotUplRatio': '-0.772072004039752', 'stgyEq': '0', 'totalPnl': '-1774.5934246782522', 'totalPnlRatio': '-0.9999993588987456', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001032632', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061776', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004406688', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009401699313', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40089.90481896847', 'uTime': '1747922717483', 'upl': ''}], 'msg': ''}
2025-05-22 22:05:17 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 22:05:17 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 22:05:17 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 22:05:17 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22375.79409383644', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1331.1150347610412', 'spotUplRatio': '0.0980308479205776', 'stgyEq': '0', 'totalPnl': '1317.7607429715608', 'totalPnlRatio': '0.0969520113485292', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7993.532682992288', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1452.2118460531817', 'spotUplRatio': '0.2220059040450182', 'stgyEq': '0', 'totalPnl': '1562.6183267697925', 'totalPnlRatio': '0.2429854045961313', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4744.983028358017', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2263.780482838275', 'spotUplRatio': '-0.3229928473434655', 'stgyEq': '0', 'totalPnl': '-4196.871954021746', 'totalPnlRatio': '-0.4693513775711896', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.209900463171', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '821.6749441096207', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '22.139452158610403', 'spotUplRatio': '0.0276903932180353', 'stgyEq': '0', 'totalPnl': '21.33911633102275', 'totalPnlRatio': '0.0266627028248172', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011376948', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038537710144865', 'spotUplRatio': '-0.772072004039752', 'stgyEq': '0', 'totalPnl': '-1774.5934246782522', 'totalPnlRatio': '-0.9999993588987456', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001032632', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061776', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004406688', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009401699313', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40091.195902242', 'uTime': '1747922717640', 'upl': ''}], 'msg': ''}
2025-05-22 22:05:17 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22375.79409383644', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1331.1150347610412', 'spotUplRatio': '0.0980308479205776', 'stgyEq': '0', 'totalPnl': '1317.7607429715608', 'totalPnlRatio': '0.0969520113485292', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7993.532682992288', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1452.2118460531817', 'spotUplRatio': '0.2220059040450182', 'stgyEq': '0', 'totalPnl': '1562.6183267697925', 'totalPnlRatio': '0.2429854045961313', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4744.983028358017', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2263.780482838275', 'spotUplRatio': '-0.3229928473434655', 'stgyEq': '0', 'totalPnl': '-4196.871954021746', 'totalPnlRatio': '-0.4693513775711896', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.209900463171', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '821.6749441096207', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '22.139452158610403', 'spotUplRatio': '0.0276903932180353', 'stgyEq': '0', 'totalPnl': '21.33911633102275', 'totalPnlRatio': '0.0266627028248172', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011376948', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038537710144865', 'spotUplRatio': '-0.772072004039752', 'stgyEq': '0', 'totalPnl': '-1774.5934246782522', 'totalPnlRatio': '-0.9999993588987456', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001032632', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061776', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004406688', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009401699313', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40091.195902242', 'uTime': '1747922717640', 'upl': ''}], 'msg': ''}
2025-05-22 22:05:19 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 22:05:19 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 22:05:21 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 22:05:21 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 22:09:26 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/fills-history?instType=SPOT "HTTP/2 200 OK"
2025-05-22 22:09:26 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/fills-history?instType=SPOT "HTTP/2 200 OK"
2025-05-22 22:09:30 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/fills-history?instType=SPOT "HTTP/2 200 OK"
2025-05-22 22:09:31 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/fills-history?instType=SPOT "HTTP/2 200 OK"
2025-05-22 22:09:32 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/fills-history?instType=SPOT "HTTP/2 200 OK"
2025-05-22 22:09:33 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/fills-history?instType=SPOT "HTTP/2 200 OK"
2025-05-22 22:09:33 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/fills-history?instType=SPOT "HTTP/2 200 OK"
2025-05-22 22:09:35 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/fills-history?instType=SPOT "HTTP/2 200 OK"
2025-05-22 22:09:36 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/fills-history?instType=SPOT "HTTP/2 200 OK"
2025-05-22 22:09:37 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/fills-history?instType=SPOT "HTTP/2 200 OK"
2025-05-22 22:09:37 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/fills-history?instType=SPOT "HTTP/2 200 OK"
2025-05-22 22:09:41 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/fills-history?instType=SPOT "HTTP/2 200 OK"
2025-05-22 22:09:43 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/fills-history?instType=SPOT "HTTP/2 200 OK"
2025-05-22 22:09:44 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/fills-history?instType=SPOT "HTTP/2 200 OK"
2025-05-22 22:09:45 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/fills-history?instType=SPOT "HTTP/2 200 OK"
2025-05-22 22:10:58 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 22:10:58 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 22:10:58 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 22:10:58 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22357.712066390228', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1319.0664499748707', 'spotUplRatio': '0.0971435219179506', 'stgyEq': '0', 'totalPnl': '1305.7121581853917', 'totalPnlRatio': '0.0960655571608834', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7990.585419784597', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1449.2645828454908', 'spotUplRatio': '0.2215553431749494', 'stgyEq': '0', 'totalPnl': '1559.671063562102', 'totalPnlRatio': '0.2425271084589982', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4738.87851001974', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2269.885001176551', 'spotUplRatio': '-0.3238638309810963', 'stgyEq': '0', 'totalPnl': '-4202.976472360022', 'totalPnlRatio': '-0.4700340679469902', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.459208071047', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '820.5673166855233', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '21.031824734770492', 'spotUplRatio': '0.0263050545617091', 'stgyEq': '0', 'totalPnl': '20.231488907182893', 'totalPnlRatio': '0.0252787495071474', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011436909', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038477749144865', 'spotUplRatio': '-0.7708707336669091', 'stgyEq': '0', 'totalPnl': '-1774.5934186821523', 'totalPnlRatio': '-0.9999993555198894', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.000103124', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061704', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004438016', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009412729856', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40063.20377931573', 'uTime': '1747923059051', 'upl': ''}], 'msg': ''}
2025-05-22 22:10:58 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22357.712066390228', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1319.0664499748707', 'spotUplRatio': '0.0971435219179506', 'stgyEq': '0', 'totalPnl': '1305.7121581853917', 'totalPnlRatio': '0.0960655571608834', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7990.585419784597', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1449.2645828454908', 'spotUplRatio': '0.2215553431749494', 'stgyEq': '0', 'totalPnl': '1559.671063562102', 'totalPnlRatio': '0.2425271084589982', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4738.87851001974', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2269.885001176551', 'spotUplRatio': '-0.3238638309810963', 'stgyEq': '0', 'totalPnl': '-4202.976472360022', 'totalPnlRatio': '-0.4700340679469902', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.459208071047', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '820.5673166855233', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '21.031824734770492', 'spotUplRatio': '0.0263050545617091', 'stgyEq': '0', 'totalPnl': '20.231488907182893', 'totalPnlRatio': '0.0252787495071474', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011436909', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038477749144865', 'spotUplRatio': '-0.7708707336669091', 'stgyEq': '0', 'totalPnl': '-1774.5934186821523', 'totalPnlRatio': '-0.9999993555198894', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.000103124', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061704', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004438016', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009412729856', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40063.20377931573', 'uTime': '1747923059051', 'upl': ''}], 'msg': ''}
2025-05-22 22:10:58 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 22:10:58 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 22:10:59 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 22:10:59 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22357.712066390228', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1319.0664499748707', 'spotUplRatio': '0.0971435219179506', 'stgyEq': '0', 'totalPnl': '1305.7121581853917', 'totalPnlRatio': '0.0960655571608834', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7990.585419784597', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1449.2645828454908', 'spotUplRatio': '0.2215553431749494', 'stgyEq': '0', 'totalPnl': '1559.671063562102', 'totalPnlRatio': '0.2425271084589982', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4738.87851001974', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2269.885001176551', 'spotUplRatio': '-0.3238638309810963', 'stgyEq': '0', 'totalPnl': '-4202.976472360022', 'totalPnlRatio': '-0.4700340679469902', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.459208071047', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '820.5673166855233', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '21.031824734770492', 'spotUplRatio': '0.0263050545617091', 'stgyEq': '0', 'totalPnl': '20.231488907182893', 'totalPnlRatio': '0.0252787495071474', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011436909', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038477749144865', 'spotUplRatio': '-0.7708707336669091', 'stgyEq': '0', 'totalPnl': '-1774.5934186821523', 'totalPnlRatio': '-0.9999993555198894', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.000103124', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061704', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004438016', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009412729856', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40063.20377931573', 'uTime': '1747923059209', 'upl': ''}], 'msg': ''}
2025-05-22 22:10:59 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22357.712066390228', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1319.0664499748707', 'spotUplRatio': '0.0971435219179506', 'stgyEq': '0', 'totalPnl': '1305.7121581853917', 'totalPnlRatio': '0.0960655571608834', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7990.585419784597', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1449.2645828454908', 'spotUplRatio': '0.2215553431749494', 'stgyEq': '0', 'totalPnl': '1559.671063562102', 'totalPnlRatio': '0.2425271084589982', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4738.87851001974', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2269.885001176551', 'spotUplRatio': '-0.3238638309810963', 'stgyEq': '0', 'totalPnl': '-4202.976472360022', 'totalPnlRatio': '-0.4700340679469902', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.459208071047', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '820.5673166855233', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '21.031824734770492', 'spotUplRatio': '0.0263050545617091', 'stgyEq': '0', 'totalPnl': '20.231488907182893', 'totalPnlRatio': '0.0252787495071474', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011436909', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038477749144865', 'spotUplRatio': '-0.7708707336669091', 'stgyEq': '0', 'totalPnl': '-1774.5934186821523', 'totalPnlRatio': '-0.9999993555198894', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.000103124', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061704', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004438016', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009412729856', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40063.20377931573', 'uTime': '1747923059209', 'upl': ''}], 'msg': ''}
2025-05-22 22:10:59 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 22:10:59 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 22:11:01 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 22:11:01 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 22:11:01 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 22:11:01 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22356.70283695137', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1318.3939708240155', 'spotUplRatio': '0.097093996745711', 'stgyEq': '0', 'totalPnl': '1305.0396790345349', 'totalPnlRatio': '0.0960160806480845', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7991.414112373557', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1450.0932754344506', 'spotUplRatio': '0.2216820289941619', 'stgyEq': '0', 'totalPnl': '1560.4997561510618', 'totalPnlRatio': '0.2426559692310528', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4740.0600296981165', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2268.703481498175', 'spotUplRatio': '-0.3236952535028452', 'stgyEq': '0', 'totalPnl': '-4201.794952681645', 'totalPnlRatio': '-0.4699019343258674', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.459208071047', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '820.8903746842184', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '21.35488273339046', 'spotUplRatio': '0.0267091116698042', 'stgyEq': '0', 'totalPnl': '20.554546905802795', 'totalPnlRatio': '0.0256824025581344', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011434302', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038480356144865', 'spotUplRatio': '-0.7709229628135544', 'stgyEq': '0', 'totalPnl': '-1774.5934189428522', 'totalPnlRatio': '-0.9999993556667961', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001031646', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061704', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004438192', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009412729856', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40064.52781992297', 'uTime': '1747923061580', 'upl': ''}], 'msg': ''}
2025-05-22 22:11:01 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22356.70283695137', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1318.3939708240155', 'spotUplRatio': '0.097093996745711', 'stgyEq': '0', 'totalPnl': '1305.0396790345349', 'totalPnlRatio': '0.0960160806480845', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7991.414112373557', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1450.0932754344506', 'spotUplRatio': '0.2216820289941619', 'stgyEq': '0', 'totalPnl': '1560.4997561510618', 'totalPnlRatio': '0.2426559692310528', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4740.0600296981165', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2268.703481498175', 'spotUplRatio': '-0.3236952535028452', 'stgyEq': '0', 'totalPnl': '-4201.794952681645', 'totalPnlRatio': '-0.4699019343258674', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.459208071047', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '820.8903746842184', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '21.35488273339046', 'spotUplRatio': '0.0267091116698042', 'stgyEq': '0', 'totalPnl': '20.554546905802795', 'totalPnlRatio': '0.0256824025581344', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011434302', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038480356144865', 'spotUplRatio': '-0.7709229628135544', 'stgyEq': '0', 'totalPnl': '-1774.5934189428522', 'totalPnlRatio': '-0.9999993556667961', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001031646', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061704', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004438192', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009412729856', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40064.52781992297', 'uTime': '1747923061580', 'upl': ''}], 'msg': ''}
2025-05-22 22:11:01 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 22:11:01 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 22:11:01 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 22:11:01 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22356.70283695137', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1318.3939708240155', 'spotUplRatio': '0.097093996745711', 'stgyEq': '0', 'totalPnl': '1305.0396790345349', 'totalPnlRatio': '0.0960160806480845', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7991.414112373557', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1450.0932754344506', 'spotUplRatio': '0.2216820289941619', 'stgyEq': '0', 'totalPnl': '1560.4997561510618', 'totalPnlRatio': '0.2426559692310528', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4740.0600296981165', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2268.703481498175', 'spotUplRatio': '-0.3236952535028452', 'stgyEq': '0', 'totalPnl': '-4201.794952681645', 'totalPnlRatio': '-0.4699019343258674', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.459208071047', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '820.8903746842184', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '21.35488273339046', 'spotUplRatio': '0.0267091116698042', 'stgyEq': '0', 'totalPnl': '20.554546905802795', 'totalPnlRatio': '0.0256824025581344', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011434302', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038480356144865', 'spotUplRatio': '-0.7709229628135544', 'stgyEq': '0', 'totalPnl': '-1774.5934189428522', 'totalPnlRatio': '-0.9999993556667961', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001031646', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061704', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004438192', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009412729856', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40064.52781992297', 'uTime': '1747923061722', 'upl': ''}], 'msg': ''}
2025-05-22 22:11:01 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22356.70283695137', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1318.3939708240155', 'spotUplRatio': '0.097093996745711', 'stgyEq': '0', 'totalPnl': '1305.0396790345349', 'totalPnlRatio': '0.0960160806480845', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7991.414112373557', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1450.0932754344506', 'spotUplRatio': '0.2216820289941619', 'stgyEq': '0', 'totalPnl': '1560.4997561510618', 'totalPnlRatio': '0.2426559692310528', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4740.0600296981165', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2268.703481498175', 'spotUplRatio': '-0.3236952535028452', 'stgyEq': '0', 'totalPnl': '-4201.794952681645', 'totalPnlRatio': '-0.4699019343258674', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.459208071047', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '820.8903746842184', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '21.35488273339046', 'spotUplRatio': '0.0267091116698042', 'stgyEq': '0', 'totalPnl': '20.554546905802795', 'totalPnlRatio': '0.0256824025581344', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011434302', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038480356144865', 'spotUplRatio': '-0.7709229628135544', 'stgyEq': '0', 'totalPnl': '-1774.5934189428522', 'totalPnlRatio': '-0.9999993556667961', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001031646', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061704', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004438192', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009412729856', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40064.52781992297', 'uTime': '1747923061722', 'upl': ''}], 'msg': ''}
2025-05-22 22:11:06 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/fills-history?instType=SPOT "HTTP/2 200 OK"
2025-05-22 22:11:07 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/fills-history?instType=SPOT "HTTP/2 200 OK"
2025-05-22 22:13:19 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-22 22:13:19 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-22 22:13:19 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-22 22:13:19 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-22 22:13:19 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-22 22:13:19 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-22 22:13:37 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:13:37 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:13:37 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:37 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:13:38 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:13:38 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:13:38 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:38 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:13:39 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:13:39 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:13:39 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:39 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:13:40 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:13:40 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:13:40 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:40 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:13:47 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:13:47 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:13:48 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:48 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:13:49 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=7 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:13:49 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:13:49 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:49 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:13:51 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=2 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:13:51 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:13:51 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:51 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:13:54 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:13:54 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:13:54 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:54 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:15:23 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-22 22:15:23 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-22 22:15:23 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-22 22:15:23 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-22 22:15:24 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-22 22:15:24 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-22 22:15:41 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-22 22:15:41 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-22 22:15:41 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-22 22:15:41 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-22 22:15:42 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-22 22:15:42 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-22 22:16:24 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-22 22:16:24 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-22 22:16:24 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-22 22:16:24 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-22 22:16:25 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-22 22:16:25 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-22 22:16:35 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:16:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:16:35 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:16:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:16:36 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:36 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:16:37 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:16:37 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:16:37 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:16:37 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:16:37 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:16:37 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:16:39 - backend.service_center.okx_service.okx_balance_service - INFO - 初始化OKXBalanceService
2025-05-22 22:16:39 - backend.service_center.okx_service.okx_balance_service - INFO - OKXBalanceService初始化完成
2025-05-22 22:16:39 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 22:16:39 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 22:16:39 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 22:16:39 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22293.12138230329', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1276.0277843200877', 'spotUplRatio': '0.0939739108946133', 'stgyEq': '0', 'totalPnl': '1262.6734925306082', 'totalPnlRatio': '0.0928990603417578', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7986.65813751518', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1445.3373005760734', 'spotUplRatio': '0.2209549625534639', 'stgyEq': '0', 'totalPnl': '1555.7437812926846', 'totalPnlRatio': '0.2419164204523049', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4739.469269858929', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2269.294241337363', 'spotUplRatio': '-0.3237795422419708', 'stgyEq': '0', 'totalPnl': '-4202.385712520834', 'totalPnlRatio': '-0.4699680011364289', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.043695391254', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '821.951850965645', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '22.416359014570414', 'spotUplRatio': '0.0280367278821168', 'stgyEq': '0', 'totalPnl': '21.61602318698283', 'totalPnlRatio': '0.0270086911542348', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011607233', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038307425144865', 'spotUplRatio': '-0.7674584294194139', 'stgyEq': '0', 'totalPnl': '-1774.5934016497522', 'totalPnlRatio': '-0.9999993459219787', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.000103298', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061659', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.00000442904', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009398022466', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '39996.24561159034', 'uTime': '1747923399833', 'upl': ''}], 'msg': ''}
2025-05-22 22:16:39 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22293.12138230329', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1276.0277843200877', 'spotUplRatio': '0.0939739108946133', 'stgyEq': '0', 'totalPnl': '1262.6734925306082', 'totalPnlRatio': '0.0928990603417578', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7986.65813751518', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1445.3373005760734', 'spotUplRatio': '0.2209549625534639', 'stgyEq': '0', 'totalPnl': '1555.7437812926846', 'totalPnlRatio': '0.2419164204523049', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4739.469269858929', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2269.294241337363', 'spotUplRatio': '-0.3237795422419708', 'stgyEq': '0', 'totalPnl': '-4202.385712520834', 'totalPnlRatio': '-0.4699680011364289', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.043695391254', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '821.951850965645', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '22.416359014570414', 'spotUplRatio': '0.0280367278821168', 'stgyEq': '0', 'totalPnl': '21.61602318698283', 'totalPnlRatio': '0.0270086911542348', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011607233', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038307425144865', 'spotUplRatio': '-0.7674584294194139', 'stgyEq': '0', 'totalPnl': '-1774.5934016497522', 'totalPnlRatio': '-0.9999993459219787', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.000103298', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061659', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.00000442904', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009398022466', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '39996.24561159034', 'uTime': '1747923399833', 'upl': ''}], 'msg': ''}
2025-05-22 22:16:39 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 22:16:39 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 22:16:39 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 22:16:39 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22293.12138230329', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1276.0277843200877', 'spotUplRatio': '0.0939739108946133', 'stgyEq': '0', 'totalPnl': '1262.6734925306082', 'totalPnlRatio': '0.0928990603417578', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7986.65813751518', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1445.3373005760734', 'spotUplRatio': '0.2209549625534639', 'stgyEq': '0', 'totalPnl': '1555.7437812926846', 'totalPnlRatio': '0.2419164204523049', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4739.469269858929', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2269.294241337363', 'spotUplRatio': '-0.3237795422419708', 'stgyEq': '0', 'totalPnl': '-4202.385712520834', 'totalPnlRatio': '-0.4699680011364289', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.043695391254', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '821.951850965645', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '22.416359014570414', 'spotUplRatio': '0.0280367278821168', 'stgyEq': '0', 'totalPnl': '21.61602318698283', 'totalPnlRatio': '0.0270086911542348', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011607233', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038307425144865', 'spotUplRatio': '-0.7674584294194139', 'stgyEq': '0', 'totalPnl': '-1774.5934016497522', 'totalPnlRatio': '-0.9999993459219787', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.000103298', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061659', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.00000442904', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009398022466', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '39996.24561159034', 'uTime': '1747923399976', 'upl': ''}], 'msg': ''}
2025-05-22 22:16:39 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22293.12138230329', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1276.0277843200877', 'spotUplRatio': '0.0939739108946133', 'stgyEq': '0', 'totalPnl': '1262.6734925306082', 'totalPnlRatio': '0.0928990603417578', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7986.65813751518', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1445.3373005760734', 'spotUplRatio': '0.2209549625534639', 'stgyEq': '0', 'totalPnl': '1555.7437812926846', 'totalPnlRatio': '0.2419164204523049', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4739.469269858929', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2269.294241337363', 'spotUplRatio': '-0.3237795422419708', 'stgyEq': '0', 'totalPnl': '-4202.385712520834', 'totalPnlRatio': '-0.4699680011364289', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.043695391254', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '821.951850965645', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '22.416359014570414', 'spotUplRatio': '0.0280367278821168', 'stgyEq': '0', 'totalPnl': '21.61602318698283', 'totalPnlRatio': '0.0270086911542348', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011607233', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038307425144865', 'spotUplRatio': '-0.7674584294194139', 'stgyEq': '0', 'totalPnl': '-1774.5934016497522', 'totalPnlRatio': '-0.9999993459219787', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.000103298', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061659', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.00000442904', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009398022466', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '39996.24561159034', 'uTime': '1747923399976', 'upl': ''}], 'msg': ''}
2025-05-22 22:16:40 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:16:40 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:16:40 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:16:40 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:16:40 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:16:40 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:16:41 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 22:16:41 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 22:16:42 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 22:16:42 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 22:16:42 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 22:16:42 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22297.3265049652', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1278.8297807819877', 'spotUplRatio': '0.0941802657789451', 'stgyEq': '0', 'totalPnl': '1265.475488992508', 'totalPnlRatio': '0.0931052124784196', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7989.879229578353', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1448.5583926392467', 'spotUplRatio': '0.2214473848246639', 'stgyEq': '0', 'totalPnl': '1558.964873355858', 'totalPnlRatio': '0.2424172966706387', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4741.635389269284', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2267.128121927007', 'spotUplRatio': '-0.3234704835318437', 'stgyEq': '0', 'totalPnl': '-4200.219593110478', 'totalPnlRatio': '-0.4697257561643705', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.168349195192', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '822.1826066789987', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '22.647114727870466', 'spotUplRatio': '0.0283253401021849', 'stgyEq': '0', 'totalPnl': '21.846778900282857', 'totalPnlRatio': '0.0272970147620827', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011622006', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038292652144865', 'spotUplRatio': '-0.7671624642550904', 'stgyEq': '0', 'totalPnl': '-1774.5934001724522', 'totalPnlRatio': '-0.9999993450895068', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001033328', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061659', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004429216', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009399860889', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40006.19335675554', 'uTime': '1747923402994', 'upl': ''}], 'msg': ''}
2025-05-22 22:16:42 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22297.3265049652', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1278.8297807819877', 'spotUplRatio': '0.0941802657789451', 'stgyEq': '0', 'totalPnl': '1265.475488992508', 'totalPnlRatio': '0.0931052124784196', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7989.879229578353', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1448.5583926392467', 'spotUplRatio': '0.2214473848246639', 'stgyEq': '0', 'totalPnl': '1558.964873355858', 'totalPnlRatio': '0.2424172966706387', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4741.635389269284', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2267.128121927007', 'spotUplRatio': '-0.3234704835318437', 'stgyEq': '0', 'totalPnl': '-4200.219593110478', 'totalPnlRatio': '-0.4697257561643705', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.168349195192', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '822.1826066789987', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '22.647114727870466', 'spotUplRatio': '0.0283253401021849', 'stgyEq': '0', 'totalPnl': '21.846778900282857', 'totalPnlRatio': '0.0272970147620827', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011622006', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038292652144865', 'spotUplRatio': '-0.7671624642550904', 'stgyEq': '0', 'totalPnl': '-1774.5934001724522', 'totalPnlRatio': '-0.9999993450895068', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001033328', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061659', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004429216', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009399860889', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40006.19335675554', 'uTime': '1747923402994', 'upl': ''}], 'msg': ''}
2025-05-22 22:16:42 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 22:16:42 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 22:16:43 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 22:16:43 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22297.3265049652', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1278.8297807819877', 'spotUplRatio': '0.0941802657789451', 'stgyEq': '0', 'totalPnl': '1265.475488992508', 'totalPnlRatio': '0.0931052124784196', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7989.799963330713', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1448.4791263916068', 'spotUplRatio': '0.2214352670506522', 'stgyEq': '0', 'totalPnl': '1558.8856071082173', 'totalPnlRatio': '0.2424049708576594', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4741.635389269284', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2267.128121927007', 'spotUplRatio': '-0.3234704835318437', 'stgyEq': '0', 'totalPnl': '-4200.219593110478', 'totalPnlRatio': '-0.4697257561643705', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.1267979272125', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '822.2287578216694', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '22.69326587053042', 'spotUplRatio': '0.0283830625461984', 'stgyEq': '0', 'totalPnl': '21.892930042942794', 'totalPnlRatio': '0.0273546794836522', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011622006', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038292652144865', 'spotUplRatio': '-0.7671624642550904', 'stgyEq': '0', 'totalPnl': '-1774.5934001724522', 'totalPnlRatio': '-0.9999993450895068', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001033328', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061659', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004429216', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009399860889', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40006.11869038259', 'uTime': '1747923403134', 'upl': ''}], 'msg': ''}
2025-05-22 22:16:43 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22297.3265049652', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1278.8297807819877', 'spotUplRatio': '0.0941802657789451', 'stgyEq': '0', 'totalPnl': '1265.475488992508', 'totalPnlRatio': '0.0931052124784196', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7989.799963330713', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1448.4791263916068', 'spotUplRatio': '0.2214352670506522', 'stgyEq': '0', 'totalPnl': '1558.8856071082173', 'totalPnlRatio': '0.2424049708576594', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4741.635389269284', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2267.128121927007', 'spotUplRatio': '-0.3234704835318437', 'stgyEq': '0', 'totalPnl': '-4200.219593110478', 'totalPnlRatio': '-0.4697257561643705', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.1267979272125', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '822.2287578216694', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '22.69326587053042', 'spotUplRatio': '0.0283830625461984', 'stgyEq': '0', 'totalPnl': '21.892930042942794', 'totalPnlRatio': '0.0273546794836522', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011622006', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038292652144865', 'spotUplRatio': '-0.7671624642550904', 'stgyEq': '0', 'totalPnl': '-1774.5934001724522', 'totalPnlRatio': '-0.9999993450895068', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001033328', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061659', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004429216', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009399860889', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40006.11869038259', 'uTime': '1747923403134', 'upl': ''}], 'msg': ''}
2025-05-22 22:16:43 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 22:16:43 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 22:16:45 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 22:16:45 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 22:16:45 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22294.887533821293', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1277.204622834086', 'spotUplRatio': '0.0940605799460327', 'stgyEq': '0', 'totalPnl': '1263.8503310446067', 'totalPnlRatio': '0.0929856442391558', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7989.994525938556', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1448.6736889994493', 'spotUplRatio': '0.2214650106777716', 'stgyEq': '0', 'totalPnl': '1559.0801697160605', 'totalPnlRatio': '0.2424352251258809', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4740.8477094837', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2267.9158017125915', 'spotUplRatio': '-0.3235828685173445', 'stgyEq': '0', 'totalPnl': '-4201.007272896062', 'totalPnlRatio': '-0.469813845245119', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.1267979272125', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '822.1826066789987', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '22.647114727870466', 'spotUplRatio': '0.0283253401021849', 'stgyEq': '0', 'totalPnl': '21.846778900282857', 'totalPnlRatio': '0.0272970147620827', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011607233', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038307425144865', 'spotUplRatio': '-0.7674584294194139', 'stgyEq': '0', 'totalPnl': '-1774.5934016497522', 'totalPnlRatio': '-0.9999993459219787', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.000103327', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061659', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004428864', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009399860889', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40003.04044943482', 'uTime': '1747923405215', 'upl': ''}], 'msg': ''}
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22294.887533821293', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1277.204622834086', 'spotUplRatio': '0.0940605799460327', 'stgyEq': '0', 'totalPnl': '1263.8503310446067', 'totalPnlRatio': '0.0929856442391558', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7989.994525938556', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1448.6736889994493', 'spotUplRatio': '0.2214650106777716', 'stgyEq': '0', 'totalPnl': '1559.0801697160605', 'totalPnlRatio': '0.2424352251258809', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4740.8477094837', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2267.9158017125915', 'spotUplRatio': '-0.3235828685173445', 'stgyEq': '0', 'totalPnl': '-4201.007272896062', 'totalPnlRatio': '-0.469813845245119', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.1267979272125', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '822.1826066789987', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '22.647114727870466', 'spotUplRatio': '0.0283253401021849', 'stgyEq': '0', 'totalPnl': '21.846778900282857', 'totalPnlRatio': '0.0272970147620827', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011607233', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038307425144865', 'spotUplRatio': '-0.7674584294194139', 'stgyEq': '0', 'totalPnl': '-1774.5934016497522', 'totalPnlRatio': '-0.9999993459219787', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.000103327', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061659', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004428864', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009399860889', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40003.04044943482', 'uTime': '1747923405215', 'upl': ''}], 'msg': ''}
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 22:16:45 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 22:16:45 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 22:16:45 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22294.635226461574', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1277.0365030463709', 'spotUplRatio': '0.0940481986529727', 'stgyEq': '0', 'totalPnl': '1263.6822112568916', 'totalPnlRatio': '0.092973275110956', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7989.994525938556', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1448.6736889994493', 'spotUplRatio': '0.2214650106777716', 'stgyEq': '0', 'totalPnl': '1559.0801697160605', 'totalPnlRatio': '0.2424352251258809', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4740.8477094837', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2267.9158017125915', 'spotUplRatio': '-0.3235828685173445', 'stgyEq': '0', 'totalPnl': '-4201.007272896062', 'totalPnlRatio': '-0.469813845245119', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.1267979272125', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '822.1826066789987', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '22.647114727870466', 'spotUplRatio': '0.0283253401021849', 'stgyEq': '0', 'totalPnl': '21.846778900282857', 'totalPnlRatio': '0.0272970147620827', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011606364', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038308294144865', 'spotUplRatio': '-0.7674758391349624', 'stgyEq': '0', 'totalPnl': '-1774.5934017366521', 'totalPnlRatio': '-0.9999993459709475', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.000103327', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061659', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004428864', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009399860889', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40002.788141988196', 'uTime': '1747923405352', 'upl': ''}], 'msg': ''}
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22294.635226461574', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1277.0365030463709', 'spotUplRatio': '0.0940481986529727', 'stgyEq': '0', 'totalPnl': '1263.6822112568916', 'totalPnlRatio': '0.092973275110956', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7989.994525938556', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1448.6736889994493', 'spotUplRatio': '0.2214650106777716', 'stgyEq': '0', 'totalPnl': '1559.0801697160605', 'totalPnlRatio': '0.2424352251258809', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4740.8477094837', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2267.9158017125915', 'spotUplRatio': '-0.3235828685173445', 'stgyEq': '0', 'totalPnl': '-4201.007272896062', 'totalPnlRatio': '-0.469813845245119', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.1267979272125', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '822.1826066789987', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '22.647114727870466', 'spotUplRatio': '0.0283253401021849', 'stgyEq': '0', 'totalPnl': '21.846778900282857', 'totalPnlRatio': '0.0272970147620827', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011606364', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038308294144865', 'spotUplRatio': '-0.7674758391349624', 'stgyEq': '0', 'totalPnl': '-1774.5934017366521', 'totalPnlRatio': '-0.9999993459709475', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.000103327', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061659', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004428864', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009399860889', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40002.788141988196', 'uTime': '1747923405352', 'upl': ''}], 'msg': ''}
2025-05-22 22:16:45 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:16:45 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:16:45 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:16:45 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:16:45 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:16:45 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:17:20 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-22 22:17:20 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-22 22:17:20 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-22 22:17:20 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-22 22:17:21 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-22 22:17:21 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-22 22:17:29 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:17:29 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:17:29 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2529305058655854592
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2529305058655854592
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2529007158247809024
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2529007158247809024
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2528337200090177536
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2528337200090177536
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2528335930558242816
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2528335930558242816
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2527913174175834112
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2527913174175834112
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2527912878729060352
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2527912878729060352
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2527911763748839424
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2527911763748839424
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2498995097967255553
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2498995097967255553
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2498993585501233152
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2498993585501233152
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2498993236199596032
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2498993236199596032
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2498992505249849344
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2498992505249849344
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2490237530801692672
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2490237530801692672
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2484603668386013185
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2484603668386013185
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2484602891869347840
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2484602891869347840
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2478760405745786880
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2478760405745786880
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2454494340484423680
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2454494340484423680
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2452298944899178496
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2452298944899178496
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2431973840864665600
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2431973840864665600
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2431924785358823424
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2431924785358823424
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2411658205454655488
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2411658205454655488
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2411655065766453248
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2411655065766453248
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2359271973143961600
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2359271973143961600
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2256980159729491968
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2256980159729491968
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2246674599176036352
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2246674599176036352
2025-05-22 22:17:29 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:17:36 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:17:36 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:17:36 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529305058655854592
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529007158247809024
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528337200090177536
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528335930558242816
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527913174175834112
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527912878729060352
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527911763748839424
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498995097967255553
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993585501233152
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993236199596032
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498992505249849344
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2490237530801692672
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484603668386013185
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484602891869347840
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2478760405745786880
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2454494340484423680
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2452298944899178496
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431973840864665600
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431924785358823424
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411658205454655488
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411655065766453248
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2359271973143961600
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2256980159729491968
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2246674599176036352
2025-05-22 22:17:36 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:17:37 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=2 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:17:37 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:17:37 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529305058655854592
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529007158247809024
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528337200090177536
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528335930558242816
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527913174175834112
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527912878729060352
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527911763748839424
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498995097967255553
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993585501233152
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993236199596032
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498992505249849344
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2490237530801692672
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484603668386013185
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484602891869347840
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2478760405745786880
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2454494340484423680
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2452298944899178496
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431973840864665600
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431924785358823424
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411658205454655488
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411655065766453248
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2359271973143961600
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2256980159729491968
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2246674599176036352
2025-05-22 22:17:37 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:17:38 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=3 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:17:38 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:17:38 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529305058655854592
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529007158247809024
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528337200090177536
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528335930558242816
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527913174175834112
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527912878729060352
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527911763748839424
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498995097967255553
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993585501233152
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993236199596032
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498992505249849344
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2490237530801692672
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484603668386013185
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484602891869347840
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2478760405745786880
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2454494340484423680
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2452298944899178496
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431973840864665600
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431924785358823424
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411658205454655488
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411655065766453248
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2359271973143961600
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2256980159729491968
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2246674599176036352
2025-05-22 22:17:38 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:18:50 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-22 22:18:50 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-22 22:18:50 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-22 22:18:50 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-22 22:18:51 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-22 22:18:51 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-22 22:19:03 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-22 22:19:03 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-22 22:19:03 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-22 22:19:03 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-22 22:19:04 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-22 22:19:04 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-22 22:24:58 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=3 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:24:58 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:24:58 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:24:58 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:24:59 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.183372, px=2599.6, amount=476.6938512
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529305058655854592
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.312584, px=2559.31, amount=799.99935704
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529007158247809024
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.311, px=2479.38, amount=771.08718
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528337200090177536
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00054016, px=106915.2, amount=57.751314432
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528335930558242816
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.049088, px=173.18, amount=8.50105984
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527913174175834112
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.310917, px=2573.03, amount=799.9987685100001
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527912878729060352
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00594488, px=109336.5, amount=649.9923721199999
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527911763748839424
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00397331, px=104270.6, amount=414.299417686
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498995097967255553
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.166845, px=2483.5, amount=414.3595575
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993585501233152
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2484.11, amount=414.6228001
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993236199596032
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2483.3, amount=414.48760300000004
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498992505249849344
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=44.144234, px=0.9999, amount=44.1398195766
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2490237530801692672
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=2.844106, px=143.56, amount=408.29985736000003
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484603668386013185
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.23276, px=1771.91, amount=412.42977160000004
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484602891869347840
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0041897, px=95472.1, amount=399.99945737
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2478760405745786880
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.457076, px=1808.4, amount=826.5762384
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2454494340484423680
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0043575, px=94320.1, amount=410.99983575000005
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2452298944899178496
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.257895, px=1593.67, amount=410.99952465
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431973840864665600
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00485349, px=84681.2, amount=410.999357388
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431924785358823424
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.019312, px=1563.68, amount=30.19778816
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411658205454655488
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00227894, px=82237.3, amount=187.41387246200003
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411655065766453248
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.04975941, px=87704, amount=4364.09929464
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2359271973143961600
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=16.155958, px=185.69, amount=2999.9998410199996
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2256980159729491968
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.55068, px=190.81, amount=105.07525079999999
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2246674599176036352
2025-05-22 22:24:59 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:25:01 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=3 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:25:01 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:25:01 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.183372, px=2599.6, amount=476.6938512
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529305058655854592
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.312584, px=2559.31, amount=799.99935704
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529007158247809024
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.311, px=2479.38, amount=771.08718
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528337200090177536
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00054016, px=106915.2, amount=57.751314432
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528335930558242816
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.049088, px=173.18, amount=8.50105984
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527913174175834112
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.310917, px=2573.03, amount=799.9987685100001
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527912878729060352
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00594488, px=109336.5, amount=649.9923721199999
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527911763748839424
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00397331, px=104270.6, amount=414.299417686
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498995097967255553
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.166845, px=2483.5, amount=414.3595575
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993585501233152
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2484.11, amount=414.6228001
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993236199596032
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2483.3, amount=414.48760300000004
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498992505249849344
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=44.144234, px=0.9999, amount=44.1398195766
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2490237530801692672
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=2.844106, px=143.56, amount=408.29985736000003
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484603668386013185
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.23276, px=1771.91, amount=412.42977160000004
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484602891869347840
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0041897, px=95472.1, amount=399.99945737
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2478760405745786880
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.457076, px=1808.4, amount=826.5762384
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2454494340484423680
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0043575, px=94320.1, amount=410.99983575000005
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2452298944899178496
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.257895, px=1593.67, amount=410.99952465
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431973840864665600
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00485349, px=84681.2, amount=410.999357388
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431924785358823424
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.019312, px=1563.68, amount=30.19778816
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411658205454655488
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00227894, px=82237.3, amount=187.41387246200003
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411655065766453248
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.04975941, px=87704, amount=4364.09929464
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2359271973143961600
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=16.155958, px=185.69, amount=2999.9998410199996
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2256980159729491968
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.55068, px=190.81, amount=105.07525079999999
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2246674599176036352
2025-05-22 22:25:01 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:25:03 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:25:03 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:25:03 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:25:03 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:25:03 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:25:03 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:25:03 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:25:03 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.183372, px=2599.6, amount=476.6938512
2025-05-22 22:25:03 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:03 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529305058655854592
2025-05-22 22:25:03 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.312584, px=2559.31, amount=799.99935704
2025-05-22 22:25:03 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:03 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529007158247809024
2025-05-22 22:25:03 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.311, px=2479.38, amount=771.08718
2025-05-22 22:25:03 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:03 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528337200090177536
2025-05-22 22:25:03 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00054016, px=106915.2, amount=57.751314432
2025-05-22 22:25:03 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:03 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528335930558242816
2025-05-22 22:25:03 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.049088, px=173.18, amount=8.50105984
2025-05-22 22:25:03 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:03 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527913174175834112
2025-05-22 22:25:03 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.310917, px=2573.03, amount=799.9987685100001
2025-05-22 22:25:03 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:03 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527912878729060352
2025-05-22 22:25:03 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00594488, px=109336.5, amount=649.9923721199999
2025-05-22 22:25:03 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:03 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527911763748839424
2025-05-22 22:25:03 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00397331, px=104270.6, amount=414.299417686
2025-05-22 22:25:04 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498995097967255553
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.166845, px=2483.5, amount=414.3595575
2025-05-22 22:25:04 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993585501233152
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2484.11, amount=414.6228001
2025-05-22 22:25:04 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993236199596032
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2483.3, amount=414.48760300000004
2025-05-22 22:25:04 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498992505249849344
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=44.144234, px=0.9999, amount=44.1398195766
2025-05-22 22:25:04 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2490237530801692672
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=2.844106, px=143.56, amount=408.29985736000003
2025-05-22 22:25:04 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484603668386013185
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.23276, px=1771.91, amount=412.42977160000004
2025-05-22 22:25:04 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484602891869347840
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0041897, px=95472.1, amount=399.99945737
2025-05-22 22:25:04 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2478760405745786880
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.457076, px=1808.4, amount=826.5762384
2025-05-22 22:25:04 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2454494340484423680
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0043575, px=94320.1, amount=410.99983575000005
2025-05-22 22:25:04 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2452298944899178496
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.257895, px=1593.67, amount=410.99952465
2025-05-22 22:25:04 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431973840864665600
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00485349, px=84681.2, amount=410.999357388
2025-05-22 22:25:04 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431924785358823424
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.019312, px=1563.68, amount=30.19778816
2025-05-22 22:25:04 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411658205454655488
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00227894, px=82237.3, amount=187.41387246200003
2025-05-22 22:25:04 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411655065766453248
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.04975941, px=87704, amount=4364.09929464
2025-05-22 22:25:04 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2359271973143961600
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=16.155958, px=185.69, amount=2999.9998410199996
2025-05-22 22:25:04 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2256980159729491968
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.55068, px=190.81, amount=105.07525079999999
2025-05-22 22:25:04 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2246674599176036352
2025-05-22 22:25:04 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:25:06 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=5 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:25:06 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:25:06 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:25:06 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:25:07 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.183372, px=2599.6, amount=476.6938512
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529305058655854592
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.312584, px=2559.31, amount=799.99935704
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529007158247809024
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.311, px=2479.38, amount=771.08718
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528337200090177536
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00054016, px=106915.2, amount=57.751314432
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528335930558242816
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.049088, px=173.18, amount=8.50105984
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527913174175834112
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.310917, px=2573.03, amount=799.9987685100001
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527912878729060352
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00594488, px=109336.5, amount=649.9923721199999
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527911763748839424
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00397331, px=104270.6, amount=414.299417686
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498995097967255553
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.166845, px=2483.5, amount=414.3595575
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993585501233152
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2484.11, amount=414.6228001
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993236199596032
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2483.3, amount=414.48760300000004
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498992505249849344
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=44.144234, px=0.9999, amount=44.1398195766
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2490237530801692672
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=2.844106, px=143.56, amount=408.29985736000003
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484603668386013185
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.23276, px=1771.91, amount=412.42977160000004
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484602891869347840
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0041897, px=95472.1, amount=399.99945737
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2478760405745786880
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.457076, px=1808.4, amount=826.5762384
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2454494340484423680
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0043575, px=94320.1, amount=410.99983575000005
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2452298944899178496
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.257895, px=1593.67, amount=410.99952465
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431973840864665600
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00485349, px=84681.2, amount=410.999357388
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431924785358823424
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.019312, px=1563.68, amount=30.19778816
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411658205454655488
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00227894, px=82237.3, amount=187.41387246200003
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411655065766453248
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.04975941, px=87704, amount=4364.09929464
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2359271973143961600
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=16.155958, px=185.69, amount=2999.9998410199996
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2256980159729491968
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.55068, px=190.81, amount=105.07525079999999
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2246674599176036352
2025-05-22 22:25:07 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:25:11 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:25:11 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:25:11 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.183372, px=2599.6, amount=476.6938512
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529305058655854592
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.312584, px=2559.31, amount=799.99935704
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529007158247809024
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.311, px=2479.38, amount=771.08718
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528337200090177536
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00054016, px=106915.2, amount=57.751314432
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528335930558242816
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.049088, px=173.18, amount=8.50105984
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527913174175834112
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.310917, px=2573.03, amount=799.9987685100001
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527912878729060352
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00594488, px=109336.5, amount=649.9923721199999
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527911763748839424
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00397331, px=104270.6, amount=414.299417686
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498995097967255553
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.166845, px=2483.5, amount=414.3595575
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993585501233152
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2484.11, amount=414.6228001
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993236199596032
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2483.3, amount=414.48760300000004
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498992505249849344
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=44.144234, px=0.9999, amount=44.1398195766
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2490237530801692672
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=2.844106, px=143.56, amount=408.29985736000003
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484603668386013185
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.23276, px=1771.91, amount=412.42977160000004
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484602891869347840
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0041897, px=95472.1, amount=399.99945737
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2478760405745786880
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.457076, px=1808.4, amount=826.5762384
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2454494340484423680
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0043575, px=94320.1, amount=410.99983575000005
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2452298944899178496
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.257895, px=1593.67, amount=410.99952465
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431973840864665600
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00485349, px=84681.2, amount=410.999357388
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431924785358823424
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.019312, px=1563.68, amount=30.19778816
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411658205454655488
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00227894, px=82237.3, amount=187.41387246200003
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411655065766453248
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.04975941, px=87704, amount=4364.09929464
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2359271973143961600
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=16.155958, px=185.69, amount=2999.9998410199996
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2256980159729491968
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.55068, px=190.81, amount=105.07525079999999
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2246674599176036352
2025-05-22 22:25:11 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:25:23 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=3 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:25:23 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:25:23 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.183372, px=2599.6, amount=476.6938512
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529305058655854592
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.312584, px=2559.31, amount=799.99935704
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529007158247809024
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.311, px=2479.38, amount=771.08718
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528337200090177536
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00054016, px=106915.2, amount=57.751314432
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528335930558242816
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.049088, px=173.18, amount=8.50105984
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527913174175834112
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.310917, px=2573.03, amount=799.9987685100001
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527912878729060352
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00594488, px=109336.5, amount=649.9923721199999
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527911763748839424
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00397331, px=104270.6, amount=414.299417686
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498995097967255553
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.166845, px=2483.5, amount=414.3595575
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993585501233152
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2484.11, amount=414.6228001
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993236199596032
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2483.3, amount=414.48760300000004
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498992505249849344
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=44.144234, px=0.9999, amount=44.1398195766
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2490237530801692672
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=2.844106, px=143.56, amount=408.29985736000003
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484603668386013185
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.23276, px=1771.91, amount=412.42977160000004
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484602891869347840
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0041897, px=95472.1, amount=399.99945737
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2478760405745786880
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.457076, px=1808.4, amount=826.5762384
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2454494340484423680
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0043575, px=94320.1, amount=410.99983575000005
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2452298944899178496
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.257895, px=1593.67, amount=410.99952465
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431973840864665600
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00485349, px=84681.2, amount=410.999357388
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431924785358823424
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.019312, px=1563.68, amount=30.19778816
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411658205454655488
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00227894, px=82237.3, amount=187.41387246200003
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411655065766453248
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.04975941, px=87704, amount=4364.09929464
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2359271973143961600
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=16.155958, px=185.69, amount=2999.9998410199996
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2256980159729491968
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.55068, px=190.81, amount=105.07525079999999
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2246674599176036352
2025-05-22 22:25:23 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:25:26 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:25:26 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:25:26 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.183372, px=2599.6, amount=476.6938512
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529305058655854592
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.312584, px=2559.31, amount=799.99935704
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529007158247809024
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.311, px=2479.38, amount=771.08718
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528337200090177536
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00054016, px=106915.2, amount=57.751314432
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528335930558242816
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.049088, px=173.18, amount=8.50105984
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527913174175834112
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.310917, px=2573.03, amount=799.9987685100001
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527912878729060352
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00594488, px=109336.5, amount=649.9923721199999
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527911763748839424
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00397331, px=104270.6, amount=414.299417686
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498995097967255553
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.166845, px=2483.5, amount=414.3595575
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993585501233152
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2484.11, amount=414.6228001
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993236199596032
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2483.3, amount=414.48760300000004
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498992505249849344
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=44.144234, px=0.9999, amount=44.1398195766
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2490237530801692672
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=2.844106, px=143.56, amount=408.29985736000003
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484603668386013185
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.23276, px=1771.91, amount=412.42977160000004
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484602891869347840
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0041897, px=95472.1, amount=399.99945737
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2478760405745786880
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.457076, px=1808.4, amount=826.5762384
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2454494340484423680
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0043575, px=94320.1, amount=410.99983575000005
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2452298944899178496
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.257895, px=1593.67, amount=410.99952465
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431973840864665600
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00485349, px=84681.2, amount=410.999357388
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431924785358823424
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.019312, px=1563.68, amount=30.19778816
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411658205454655488
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00227894, px=82237.3, amount=187.41387246200003
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411655065766453248
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.04975941, px=87704, amount=4364.09929464
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2359271973143961600
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=16.155958, px=185.69, amount=2999.9998410199996
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2256980159729491968
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.55068, px=190.81, amount=105.07525079999999
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2246674599176036352
2025-05-22 22:25:26 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:25:33 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:25:33 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:25:33 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:25:33 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:25:35 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.183372, px=2599.6, amount=476.6938512
2025-05-22 22:25:35 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529305058655854592
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.312584, px=2559.31, amount=799.99935704
2025-05-22 22:25:35 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529007158247809024
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.311, px=2479.38, amount=771.08718
2025-05-22 22:25:35 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528337200090177536
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00054016, px=106915.2, amount=57.751314432
2025-05-22 22:25:35 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528335930558242816
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.049088, px=173.18, amount=8.50105984
2025-05-22 22:25:35 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527913174175834112
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.310917, px=2573.03, amount=799.9987685100001
2025-05-22 22:25:35 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527912878729060352
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00594488, px=109336.5, amount=649.9923721199999
2025-05-22 22:25:35 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527911763748839424
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00397331, px=104270.6, amount=414.299417686
2025-05-22 22:25:35 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498995097967255553
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.166845, px=2483.5, amount=414.3595575
2025-05-22 22:25:35 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993585501233152
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2484.11, amount=414.6228001
2025-05-22 22:25:35 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993236199596032
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2483.3, amount=414.48760300000004
2025-05-22 22:25:35 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498992505249849344
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=44.144234, px=0.9999, amount=44.1398195766
2025-05-22 22:25:35 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2490237530801692672
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=2.844106, px=143.56, amount=408.29985736000003
2025-05-22 22:25:35 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484603668386013185
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.23276, px=1771.91, amount=412.42977160000004
2025-05-22 22:25:35 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484602891869347840
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0041897, px=95472.1, amount=399.99945737
2025-05-22 22:25:35 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2478760405745786880
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.457076, px=1808.4, amount=826.5762384
2025-05-22 22:25:35 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2454494340484423680
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0043575, px=94320.1, amount=410.99983575000005
2025-05-22 22:25:35 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2452298944899178496
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.257895, px=1593.67, amount=410.99952465
2025-05-22 22:25:35 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431973840864665600
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00485349, px=84681.2, amount=410.999357388
2025-05-22 22:25:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431924785358823424
2025-05-22 22:25:36 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.019312, px=1563.68, amount=30.19778816
2025-05-22 22:25:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411658205454655488
2025-05-22 22:25:36 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00227894, px=82237.3, amount=187.41387246200003
2025-05-22 22:25:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411655065766453248
2025-05-22 22:25:36 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.04975941, px=87704, amount=4364.09929464
2025-05-22 22:25:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2359271973143961600
2025-05-22 22:25:36 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=16.155958, px=185.69, amount=2999.9998410199996
2025-05-22 22:25:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2256980159729491968
2025-05-22 22:25:36 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.55068, px=190.81, amount=105.07525079999999
2025-05-22 22:25:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2246674599176036352
2025-05-22 22:25:36 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:29:13 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-22 22:29:13 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-22 22:29:13 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-22 22:29:13 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-22 22:29:14 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-22 22:29:14 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-22 22:29:25 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-22 22:29:25 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-22 22:29:25 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-22 22:29:25 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-22 22:29:26 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-22 22:29:26 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-22 22:30:13 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-22 22:30:13 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-22 22:30:13 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-22 22:30:13 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-22 22:30:14 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-22 22:30:14 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-22 22:30:22 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:30:22 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:30:22 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.183372, px=2599.6, amount=476.6938512, target_price=2599.6, exec_price=2599.6
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2529305058655854592, amount=476.6938512, target_price=2599.6
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2529305058655854592
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.312584, px=2559.31, amount=799.99935704, target_price=2559.31, exec_price=2559.31
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2529007158247809024, amount=799.99935704, target_price=2559.31
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2529007158247809024
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.311, px=2479.38, amount=771.08718, target_price=2479.38, exec_price=2479.38
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2528337200090177536, amount=771.08718, target_price=2479.38
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2528337200090177536
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00054016, px=106915.2, amount=57.751314432, target_price=106915.2, exec_price=106915.2
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2528335930558242816, amount=57.751314432, target_price=106915.2
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2528335930558242816
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.049088, px=173.18, amount=8.50105984, target_price=173.18, exec_price=173.18
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2527913174175834112, amount=8.50105984, target_price=173.18
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2527913174175834112
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.310917, px=2573.03, amount=799.9987685100001, target_price=2573.03, exec_price=2573.03
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2527912878729060352, amount=799.9987685100001, target_price=2573.03
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2527912878729060352
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00594488, px=109336.5, amount=649.9923721199999, target_price=109336.5, exec_price=109336.5
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2527911763748839424, amount=649.9923721199999, target_price=109336.5
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2527911763748839424
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00397331, px=104270.6, amount=414.299417686, target_price=104270.6, exec_price=104270.6
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2498995097967255553, amount=414.299417686, target_price=104270.6
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2498995097967255553
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.166845, px=2483.5, amount=414.3595575, target_price=2483.5, exec_price=2483.5
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2498993585501233152, amount=414.3595575, target_price=2483.5
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2498993585501233152
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2484.11, amount=414.6228001, target_price=2484.11, exec_price=2484.11
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2498993236199596032, amount=414.6228001, target_price=2484.11
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2498993236199596032
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2483.3, amount=414.48760300000004, target_price=2483.3, exec_price=2483.3
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2498992505249849344, amount=414.48760300000004, target_price=2483.3
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2498992505249849344
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=44.144234, px=0.9999, amount=44.1398195766, target_price=0.9999, exec_price=0.9999
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2490237530801692672, amount=44.1398195766, target_price=0.9999
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2490237530801692672
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=2.844106, px=143.56, amount=408.29985736000003, target_price=143.56, exec_price=143.56
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2484603668386013185, amount=408.29985736000003, target_price=143.56
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2484603668386013185
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.23276, px=1771.91, amount=412.42977160000004, target_price=1771.91, exec_price=1771.91
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2484602891869347840, amount=412.42977160000004, target_price=1771.91
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2484602891869347840
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0041897, px=95472.1, amount=399.99945737, target_price=95472.1, exec_price=95472.1
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2478760405745786880, amount=399.99945737, target_price=95472.1
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2478760405745786880
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.457076, px=1808.4, amount=826.5762384, target_price=1808.4, exec_price=1808.4
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2454494340484423680, amount=826.5762384, target_price=1808.4
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2454494340484423680
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0043575, px=94320.1, amount=410.99983575000005, target_price=94320.1, exec_price=94320.1
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2452298944899178496, amount=410.99983575000005, target_price=94320.1
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2452298944899178496
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.257895, px=1593.67, amount=410.99952465, target_price=1593.67, exec_price=1593.67
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2431973840864665600, amount=410.99952465, target_price=1593.67
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2431973840864665600
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00485349, px=84681.2, amount=410.999357388, target_price=84681.2, exec_price=84681.2
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2431924785358823424, amount=410.999357388, target_price=84681.2
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2431924785358823424
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.019312, px=1563.68, amount=30.19778816, target_price=1563.68, exec_price=1563.68
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2411658205454655488, amount=30.19778816, target_price=1563.68
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2411658205454655488
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00227894, px=82237.3, amount=187.41387246200003, target_price=82237.3, exec_price=82237.3
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2411655065766453248, amount=187.41387246200003, target_price=82237.3
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2411655065766453248
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.04975941, px=87704, amount=4364.09929464, target_price=87704, exec_price=87704
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2359271973143961600, amount=4364.09929464, target_price=87704
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2359271973143961600
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=16.155958, px=185.69, amount=2999.9998410199996, target_price=185.69, exec_price=185.69
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2256980159729491968, amount=2999.9998410199996, target_price=185.69
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2256980159729491968
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.55068, px=190.81, amount=105.07525079999999, target_price=190.81, exec_price=190.81
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2246674599176036352, amount=105.07525079999999, target_price=190.81
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2246674599176036352
2025-05-22 22:30:22 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:30:38 - backend.service_center.okx_service.okx_balance_service - INFO - 初始化OKXBalanceService
2025-05-22 22:30:38 - backend.service_center.okx_service.okx_balance_service - INFO - OKXBalanceService初始化完成
2025-05-22 22:30:38 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 22:30:38 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 22:30:39 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 22:30:40 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22452.07501892349', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1381.9432505799082', 'spotUplRatio': '0.1017741255223576', 'stgyEq': '0', 'totalPnl': '1368.5889587904276', 'totalPnlRatio': '0.1006916111075749', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '8027.141571991487', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1485.8207350523799', 'spotUplRatio': '0.2271438402259509', 'stgyEq': '0', 'totalPnl': '1596.2272157689913', 'totalPnlRatio': '0.2482115492992837', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4774.914860210209', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2233.848650986083', 'spotUplRatio': '-0.3187222178944369', 'stgyEq': '0', 'totalPnl': '-4166.940122169553', 'totalPnlRatio': '-0.4660039925027474', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.168349195192', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '826.7054186607298', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '27.169926708550417', 'spotUplRatio': '0.0339821396155171', 'stgyEq': '0', 'totalPnl': '26.369590880962846', 'totalPnlRatio': '0.0329481574759016', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0012011318', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0037903340144865', 'spotUplRatio': '-0.7593629116893867', 'stgyEq': '0', 'totalPnl': '-1774.5933612412523', 'totalPnlRatio': '-0.9999993231514255', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001038954', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061821', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004453856', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009477074689', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40236.006535591965', 'uTime': '1747924239640', 'upl': ''}], 'msg': ''}
2025-05-22 22:30:40 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22452.07501892349', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1381.9432505799082', 'spotUplRatio': '0.1017741255223576', 'stgyEq': '0', 'totalPnl': '1368.5889587904276', 'totalPnlRatio': '0.1006916111075749', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '8027.141571991487', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1485.8207350523799', 'spotUplRatio': '0.2271438402259509', 'stgyEq': '0', 'totalPnl': '1596.2272157689913', 'totalPnlRatio': '0.2482115492992837', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4774.914860210209', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2233.848650986083', 'spotUplRatio': '-0.3187222178944369', 'stgyEq': '0', 'totalPnl': '-4166.940122169553', 'totalPnlRatio': '-0.4660039925027474', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.168349195192', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '826.7054186607298', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '27.169926708550417', 'spotUplRatio': '0.0339821396155171', 'stgyEq': '0', 'totalPnl': '26.369590880962846', 'totalPnlRatio': '0.0329481574759016', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0012011318', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0037903340144865', 'spotUplRatio': '-0.7593629116893867', 'stgyEq': '0', 'totalPnl': '-1774.5933612412523', 'totalPnlRatio': '-0.9999993231514255', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001038954', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061821', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004453856', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009477074689', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40236.006535591965', 'uTime': '1747924239640', 'upl': ''}], 'msg': ''}
2025-05-22 22:30:40 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 22:30:40 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 22:30:40 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 22:30:40 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22452.747838549396', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1382.3915700138118', 'spotUplRatio': '0.1018071423038507', 'stgyEq': '0', 'totalPnl': '1369.037278224332', 'totalPnlRatio': '0.1007245954494408', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '8026.954215406157', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1485.6333784670505', 'spotUplRatio': '0.2271151982146508', 'stgyEq': '0', 'totalPnl': '1596.039859183662', 'totalPnlRatio': '0.248182415559515', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4775.111780156604', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2233.651731039687', 'spotUplRatio': '-0.3186941216480617', 'stgyEq': '0', 'totalPnl': '-4166.743202223159', 'totalPnlRatio': '-0.4659819702325604', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.168349195192', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '826.7054186607298', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '27.169926708550417', 'spotUplRatio': '0.0339821396155171', 'stgyEq': '0', 'totalPnl': '26.369590880962846', 'totalPnlRatio': '0.0329481574759016', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0012012187', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0037902471144865', 'spotUplRatio': '-0.7593455019738383', 'stgyEq': '0', 'totalPnl': '-1774.5933611543524', 'totalPnlRatio': '-0.9999993231024565', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001038954', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061821', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004453328', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009478913113', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40236.688918665495', 'uTime': '1747924240698', 'upl': ''}], 'msg': ''}
2025-05-22 22:30:40 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22452.747838549396', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1382.3915700138118', 'spotUplRatio': '0.1018071423038507', 'stgyEq': '0', 'totalPnl': '1369.037278224332', 'totalPnlRatio': '0.1007245954494408', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '8026.954215406157', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1485.6333784670505', 'spotUplRatio': '0.2271151982146508', 'stgyEq': '0', 'totalPnl': '1596.039859183662', 'totalPnlRatio': '0.248182415559515', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4775.111780156604', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2233.651731039687', 'spotUplRatio': '-0.3186941216480617', 'stgyEq': '0', 'totalPnl': '-4166.743202223159', 'totalPnlRatio': '-0.4659819702325604', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.168349195192', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '826.7054186607298', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '27.169926708550417', 'spotUplRatio': '0.0339821396155171', 'stgyEq': '0', 'totalPnl': '26.369590880962846', 'totalPnlRatio': '0.0329481574759016', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0012012187', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0037902471144865', 'spotUplRatio': '-0.7593455019738383', 'stgyEq': '0', 'totalPnl': '-1774.5933611543524', 'totalPnlRatio': '-0.9999993231024565', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001038954', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061821', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004453328', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009478913113', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40236.688918665495', 'uTime': '1747924240698', 'upl': ''}], 'msg': ''}
2025-05-22 22:30:42 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 22:30:42 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
