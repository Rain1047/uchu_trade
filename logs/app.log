2025-05-22 21:16:27 - __main__ - INFO - 启动FastAPI服务器 - 主机: 127.0.0.1, 端口: 8000
2025-05-22 21:19:40 - __main__ - INFO - 启动FastAPI服务器 - 主机: 127.0.0.1, 端口: 8000
2025-05-22 21:20:12 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-22 21:20:13 - backend.service_center.okx_service.okx_balance_service - ERROR - list_account_balance error, response: 50110, None
2025-05-22 21:20:14 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-22 21:20:14 - backend.service_center.okx_service.okx_balance_service - ERROR - list_account_balance error, response: 50110, None
2025-05-22 21:24:25 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-22 21:24:47 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-22 21:24:47 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-22 21:24:47 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-22 21:24:47 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-22 21:24:47 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-22 21:24:47 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-22 21:25:10 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-22 21:25:10 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-22 21:25:10 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-22 21:25:10 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-22 21:25:10 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-22 21:25:10 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-22 21:25:23 - backend.controller_center.record.record_controller - ERROR - Error processing request: This session is provisioning a new connection; concurrent operations are not permitted (Background on this error at: https://sqlalche.me/e/20/isce)
2025-05-22 21:25:41 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-22 21:25:41 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-22 21:25:41 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-22 21:25:41 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-22 21:25:41 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-22 21:25:41 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-22 21:25:41 - __main__ - INFO - 启动FastAPI服务器 - 主机: 127.0.0.1, 端口: 8000
2025-05-22 21:25:44 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-22 21:25:44 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-22 21:25:44 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-22 21:25:44 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-22 21:25:45 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-22 21:25:45 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-22 21:26:25 - backend.service_center.okx_service.okx_balance_service - INFO - 初始化OKXBalanceService
2025-05-22 21:26:25 - backend.service_center.okx_service.okx_balance_service - INFO - OKXBalanceService初始化完成
2025-05-22 21:26:25 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 21:26:25 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 21:26:26 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-22 21:26:26 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 64.181.249.61 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-22 21:26:26 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 64.181.249.61 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-22 21:26:26 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 64.181.249.61 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-22 21:26:26 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 64.181.249.61 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-22 21:26:26 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 21:26:26 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 21:26:27 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-22 21:26:27 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 64.181.249.61 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-22 21:26:27 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 64.181.249.61 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-22 21:26:27 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 64.181.249.61 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-22 21:26:27 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 64.181.249.61 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-22 21:26:33 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 21:26:33 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 21:26:34 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-22 21:26:34 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 64.181.249.61 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-22 21:26:34 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 64.181.249.61 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-22 21:26:34 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 64.181.249.61 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-22 21:26:34 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 64.181.249.61 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-22 21:26:36 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 21:26:36 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 21:45:03 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 21:45:03 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 21:45:04 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-22 21:45:04 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 52.68.181.50 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-22 21:45:04 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 52.68.181.50 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-22 21:45:04 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 52.68.181.50 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-22 21:45:04 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 52.68.181.50 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-22 21:45:04 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 21:45:04 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 21:45:04 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-22 21:45:04 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 52.68.181.50 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-22 21:45:04 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 52.68.181.50 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-22 21:45:04 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 52.68.181.50 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-22 21:45:04 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 52.68.181.50 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-22 21:47:27 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 21:47:27 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 21:47:27 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 21:47:27 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 21:47:28 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 21:47:28 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22181.769734215908', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1201.8309180089743', 'spotUplRatio': '0.0885096335575055', 'stgyEq': '0', 'totalPnl': '1188.4766262194953', 'totalPnlRatio': '0.0874401517629524', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '8003.008602596479', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1461.6877656573727', 'spotUplRatio': '0.2234545288473181', 'stgyEq': '0', 'totalPnl': '1572.0942463739839', 'totalPnlRatio': '0.2444588995113641', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4727.063313235981', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2281.700197960311', 'spotUplRatio': '-0.3255496057636076', 'stgyEq': '0', 'totalPnl': '-4214.791669143782', 'totalPnlRatio': '-0.4713554041582174', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.25145173115', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '818.8597244067064', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '19.324232456350472', 'spotUplRatio': '0.0241693241332061', 'stgyEq': '0', 'totalPnl': '18.523896628762827', 'totalPnlRatio': '0.0231451548090728', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011083226', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038831432144865', 'spotUplRatio': '-0.7779564878951264', 'stgyEq': '0', 'totalPnl': '-1774.5934540504522', 'totalPnlRatio': '-0.9999993754502445', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001029094', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061767', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004364976', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009372284532', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '39885.954048897125', 'uTime': '1747921648214', 'upl': ''}], 'msg': ''}
2025-05-22 21:47:28 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22181.769734215908', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1201.8309180089743', 'spotUplRatio': '0.0885096335575055', 'stgyEq': '0', 'totalPnl': '1188.4766262194953', 'totalPnlRatio': '0.0874401517629524', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '8003.008602596479', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1461.6877656573727', 'spotUplRatio': '0.2234545288473181', 'stgyEq': '0', 'totalPnl': '1572.0942463739839', 'totalPnlRatio': '0.2444588995113641', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4727.063313235981', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2281.700197960311', 'spotUplRatio': '-0.3255496057636076', 'stgyEq': '0', 'totalPnl': '-4214.791669143782', 'totalPnlRatio': '-0.4713554041582174', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.25145173115', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '818.8597244067064', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '19.324232456350472', 'spotUplRatio': '0.0241693241332061', 'stgyEq': '0', 'totalPnl': '18.523896628762827', 'totalPnlRatio': '0.0231451548090728', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011083226', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038831432144865', 'spotUplRatio': '-0.7779564878951264', 'stgyEq': '0', 'totalPnl': '-1774.5934540504522', 'totalPnlRatio': '-0.9999993754502445', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001029094', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061767', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004364976', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009372284532', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '39885.954048897125', 'uTime': '1747921648214', 'upl': ''}], 'msg': ''}
2025-05-22 21:47:28 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 21:47:28 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 21:47:28 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 21:47:28 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22182.27434893534', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1202.1671575844045', 'spotUplRatio': '0.0885343961436255', 'stgyEq': '0', 'totalPnl': '1188.8128657949255', 'totalPnlRatio': '0.087464890019352', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '8003.015808618992', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1461.6949716798856', 'spotUplRatio': '0.2234556304631374', 'stgyEq': '0', 'totalPnl': '1572.1014523964968', 'totalPnlRatio': '0.2444600200398168', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4727.063313235981', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2281.700197960311', 'spotUplRatio': '-0.3255496057636076', 'stgyEq': '0', 'totalPnl': '-4214.791669143782', 'totalPnlRatio': '-0.4713554041582174', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.25145173115', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '818.8597244067064', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '19.324232456350472', 'spotUplRatio': '0.0241693241332061', 'stgyEq': '0', 'totalPnl': '18.523896628762827', 'totalPnlRatio': '0.0231451548090728', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011083226', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038831432144865', 'spotUplRatio': '-0.7779564878951264', 'stgyEq': '0', 'totalPnl': '-1774.5934540504522', 'totalPnlRatio': '-0.9999993754502445', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001029094', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061767', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004364976', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009372284532', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '39886.465869639076', 'uTime': '1747921648365', 'upl': ''}], 'msg': ''}
2025-05-22 21:47:28 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22182.27434893534', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1202.1671575844045', 'spotUplRatio': '0.0885343961436255', 'stgyEq': '0', 'totalPnl': '1188.8128657949255', 'totalPnlRatio': '0.087464890019352', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '8003.015808618992', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1461.6949716798856', 'spotUplRatio': '0.2234556304631374', 'stgyEq': '0', 'totalPnl': '1572.1014523964968', 'totalPnlRatio': '0.2444600200398168', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4727.063313235981', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2281.700197960311', 'spotUplRatio': '-0.3255496057636076', 'stgyEq': '0', 'totalPnl': '-4214.791669143782', 'totalPnlRatio': '-0.4713554041582174', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.25145173115', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '818.8597244067064', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '19.324232456350472', 'spotUplRatio': '0.0241693241332061', 'stgyEq': '0', 'totalPnl': '18.523896628762827', 'totalPnlRatio': '0.0231451548090728', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011083226', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038831432144865', 'spotUplRatio': '-0.7779564878951264', 'stgyEq': '0', 'totalPnl': '-1774.5934540504522', 'totalPnlRatio': '-0.9999993754502445', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001029094', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061767', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004364976', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009372284532', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '39886.465869639076', 'uTime': '1747921648365', 'upl': ''}], 'msg': ''}
2025-05-22 21:47:32 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 21:47:32 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 21:47:32 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 21:47:32 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22184.629217626007', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1203.7362756030673', 'spotUplRatio': '0.0886499548788512', 'stgyEq': '0', 'totalPnl': '1190.3819838135878', 'totalPnlRatio': '0.0875803352158825', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '8003.916561433079', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1462.5957244939723', 'spotUplRatio': '0.2235933324405423', 'stgyEq': '0', 'totalPnl': '1573.0022052105833', 'totalPnlRatio': '0.2446000860963978', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4730.01711243192', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2278.746398764371', 'spotUplRatio': '-0.3251281620679798', 'stgyEq': '0', 'totalPnl': '-4211.837869947842', 'totalPnlRatio': '-0.4710250701054105', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.25145173115', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '819.3673869760843', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '19.831895025610404', 'spotUplRatio': '0.0248042710173555', 'stgyEq': '0', 'totalPnl': '19.03155919802282', 'totalPnlRatio': '0.0237794667463382', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011091916', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038822742144865', 'spotUplRatio': '-0.7777823907396421', 'stgyEq': '0', 'totalPnl': '-1774.5934531814523', 'totalPnlRatio': '-0.9999993749605552', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001029732', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061776', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004364976', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009372284532', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '39893.18295384286', 'uTime': '1747921652672', 'upl': ''}], 'msg': ''}
2025-05-22 21:47:32 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22184.629217626007', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1203.7362756030673', 'spotUplRatio': '0.0886499548788512', 'stgyEq': '0', 'totalPnl': '1190.3819838135878', 'totalPnlRatio': '0.0875803352158825', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '8003.916561433079', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1462.5957244939723', 'spotUplRatio': '0.2235933324405423', 'stgyEq': '0', 'totalPnl': '1573.0022052105833', 'totalPnlRatio': '0.2446000860963978', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4730.01711243192', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2278.746398764371', 'spotUplRatio': '-0.3251281620679798', 'stgyEq': '0', 'totalPnl': '-4211.837869947842', 'totalPnlRatio': '-0.4710250701054105', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.25145173115', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '819.3673869760843', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '19.831895025610404', 'spotUplRatio': '0.0248042710173555', 'stgyEq': '0', 'totalPnl': '19.03155919802282', 'totalPnlRatio': '0.0237794667463382', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011091916', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038822742144865', 'spotUplRatio': '-0.7777823907396421', 'stgyEq': '0', 'totalPnl': '-1774.5934531814523', 'totalPnlRatio': '-0.9999993749605552', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001029732', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061776', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004364976', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009372284532', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '39893.18295384286', 'uTime': '1747921652672', 'upl': ''}], 'msg': ''}
2025-05-22 21:47:33 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 21:47:33 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 21:47:33 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 21:47:33 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22184.629217626007', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1203.7362756030673', 'spotUplRatio': '0.0886499548788512', 'stgyEq': '0', 'totalPnl': '1190.3819838135878', 'totalPnlRatio': '0.0875803352158825', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '8003.830089162925', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1462.5092522238192', 'spotUplRatio': '0.2235801130507113', 'stgyEq': '0', 'totalPnl': '1572.9157329404297', 'totalPnlRatio': '0.2445866397549659', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4730.01711243192', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2278.746398764371', 'spotUplRatio': '-0.3251281620679798', 'stgyEq': '0', 'totalPnl': '-4211.837869947842', 'totalPnlRatio': '-0.4710250701054105', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.168349195192', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '819.3673869760843', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '19.831895025610404', 'spotUplRatio': '0.0248042710173555', 'stgyEq': '0', 'totalPnl': '19.03155919802282', 'totalPnlRatio': '0.0237794667463382', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011091916', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038822742144865', 'spotUplRatio': '-0.7777823907396421', 'stgyEq': '0', 'totalPnl': '-1774.5934531814523', 'totalPnlRatio': '-0.9999993749605552', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001029732', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061785', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004365504', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009372284532', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '39893.013379038166', 'uTime': '1747921653284', 'upl': ''}], 'msg': ''}
2025-05-22 21:47:33 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22184.629217626007', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1203.7362756030673', 'spotUplRatio': '0.0886499548788512', 'stgyEq': '0', 'totalPnl': '1190.3819838135878', 'totalPnlRatio': '0.0875803352158825', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '8003.830089162925', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1462.5092522238192', 'spotUplRatio': '0.2235801130507113', 'stgyEq': '0', 'totalPnl': '1572.9157329404297', 'totalPnlRatio': '0.2445866397549659', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4730.01711243192', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2278.746398764371', 'spotUplRatio': '-0.3251281620679798', 'stgyEq': '0', 'totalPnl': '-4211.837869947842', 'totalPnlRatio': '-0.4710250701054105', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.168349195192', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '819.3673869760843', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '19.831895025610404', 'spotUplRatio': '0.0248042710173555', 'stgyEq': '0', 'totalPnl': '19.03155919802282', 'totalPnlRatio': '0.0237794667463382', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011091916', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038822742144865', 'spotUplRatio': '-0.7777823907396421', 'stgyEq': '0', 'totalPnl': '-1774.5934531814523', 'totalPnlRatio': '-0.9999993749605552', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001029732', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061785', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004365504', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009372284532', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '39893.013379038166', 'uTime': '1747921653284', 'upl': ''}], 'msg': ''}
2025-05-22 21:47:43 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 21:47:43 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 21:47:44 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 21:47:44 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 22:04:42 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 22:04:42 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 22:04:43 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 22:04:43 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 22:04:44 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 22:04:44 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22385.21356859912', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1337.3915068356966', 'spotUplRatio': '0.0984930828614809', 'stgyEq': '0', 'totalPnl': '1324.0372150462172', 'totalPnlRatio': '0.0974137921346517', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7992.444573592871', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1451.1237366537646', 'spotUplRatio': '0.221839560056313', 'stgyEq': '0', 'totalPnl': '1561.5302173703758', 'totalPnlRatio': '0.2428162047997814', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4743.013828894056', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2265.749682302235', 'spotUplRatio': '-0.3232738098072174', 'stgyEq': '0', 'totalPnl': '-4198.841153485706', 'totalPnlRatio': '-0.4695716002730607', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.085246659233', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '821.62879296695', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '22.093301015950445', 'spotUplRatio': '0.0276326707740217', 'stgyEq': '0', 'totalPnl': '21.292965188362814', 'totalPnlRatio': '0.0266050381032477', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011402149', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038512509144865', 'spotUplRatio': '-0.7715671222888469', 'stgyEq': '0', 'totalPnl': '-1774.5934221581524', 'totalPnlRatio': '-0.9999993574786467', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001032574', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061794', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.0000044044', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.000000939066877', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40097.387265707395', 'uTime': '1747922684152', 'upl': ''}], 'msg': ''}
2025-05-22 22:04:44 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22385.21356859912', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1337.3915068356966', 'spotUplRatio': '0.0984930828614809', 'stgyEq': '0', 'totalPnl': '1324.0372150462172', 'totalPnlRatio': '0.0974137921346517', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7992.444573592871', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1451.1237366537646', 'spotUplRatio': '0.221839560056313', 'stgyEq': '0', 'totalPnl': '1561.5302173703758', 'totalPnlRatio': '0.2428162047997814', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4743.013828894056', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2265.749682302235', 'spotUplRatio': '-0.3232738098072174', 'stgyEq': '0', 'totalPnl': '-4198.841153485706', 'totalPnlRatio': '-0.4695716002730607', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.085246659233', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '821.62879296695', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '22.093301015950445', 'spotUplRatio': '0.0276326707740217', 'stgyEq': '0', 'totalPnl': '21.292965188362814', 'totalPnlRatio': '0.0266050381032477', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011402149', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038512509144865', 'spotUplRatio': '-0.7715671222888469', 'stgyEq': '0', 'totalPnl': '-1774.5934221581524', 'totalPnlRatio': '-0.9999993574786467', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001032574', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061794', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.0000044044', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.000000939066877', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40097.387265707395', 'uTime': '1747922684152', 'upl': ''}], 'msg': ''}
2025-05-22 22:04:44 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 22:04:44 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 22:04:44 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 22:04:44 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22385.465875958835', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1337.5596266234118', 'spotUplRatio': '0.0985054641545409', 'stgyEq': '0', 'totalPnl': '1324.2053348339323', 'totalPnlRatio': '0.0974261612628515', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7992.617518133176', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1451.2966811940698', 'spotUplRatio': '0.2218659988359749', 'stgyEq': '0', 'totalPnl': '1561.703161910681', 'totalPnlRatio': '0.2428430974826451', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4743.013828894056', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2265.749682302235', 'spotUplRatio': '-0.3232738098072174', 'stgyEq': '0', 'totalPnl': '-4198.841153485706', 'totalPnlRatio': '-0.4695716002730607', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.085246659233', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '821.62879296695', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '22.093301015950445', 'spotUplRatio': '0.0276326707740217', 'stgyEq': '0', 'totalPnl': '21.292965188362814', 'totalPnlRatio': '0.0266050381032477', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011402149', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038512509144865', 'spotUplRatio': '-0.7715671222888469', 'stgyEq': '0', 'totalPnl': '-1774.5934221581524', 'totalPnlRatio': '-0.9999993574786467', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001032574', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061794', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.0000044044', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.000000939066877', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40097.81251760742', 'uTime': '1747922684331', 'upl': ''}], 'msg': ''}
2025-05-22 22:04:44 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22385.465875958835', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1337.5596266234118', 'spotUplRatio': '0.0985054641545409', 'stgyEq': '0', 'totalPnl': '1324.2053348339323', 'totalPnlRatio': '0.0974261612628515', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7992.617518133176', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1451.2966811940698', 'spotUplRatio': '0.2218659988359749', 'stgyEq': '0', 'totalPnl': '1561.703161910681', 'totalPnlRatio': '0.2428430974826451', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4743.013828894056', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2265.749682302235', 'spotUplRatio': '-0.3232738098072174', 'stgyEq': '0', 'totalPnl': '-4198.841153485706', 'totalPnlRatio': '-0.4695716002730607', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.085246659233', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '821.62879296695', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '22.093301015950445', 'spotUplRatio': '0.0276326707740217', 'stgyEq': '0', 'totalPnl': '21.292965188362814', 'totalPnlRatio': '0.0266050381032477', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011402149', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038512509144865', 'spotUplRatio': '-0.7715671222888469', 'stgyEq': '0', 'totalPnl': '-1774.5934221581524', 'totalPnlRatio': '-0.9999993574786467', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001032574', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061794', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.0000044044', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.000000939066877', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40097.81251760742', 'uTime': '1747922684331', 'upl': ''}], 'msg': ''}
2025-05-22 22:05:15 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 22:05:15 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 22:05:16 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 22:05:16 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 22:05:17 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 22:05:17 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22374.86896685082', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1330.4985955394227', 'spotUplRatio': '0.0979854498460246', 'stgyEq': '0', 'totalPnl': '1317.144303749943', 'totalPnlRatio': '0.0969066578784636', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7992.617518133176', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1451.2966811940698', 'spotUplRatio': '0.2218659988359749', 'stgyEq': '0', 'totalPnl': '1561.703161910681', 'totalPnlRatio': '0.2428430974826451', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4745.5737881972045', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2263.189722999087', 'spotUplRatio': '-0.3229085586043399', 'stgyEq': '0', 'totalPnl': '-4196.281194182557', 'totalPnlRatio': '-0.469285310760628', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.168349195192', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '821.6749441096207', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '22.139452158610403', 'spotUplRatio': '0.0276903932180353', 'stgyEq': '0', 'totalPnl': '21.33911633102275', 'totalPnlRatio': '0.0266627028248172', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011376948', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038537710144865', 'spotUplRatio': '-0.772072004039752', 'stgyEq': '0', 'totalPnl': '-1774.5934246782522', 'totalPnlRatio': '-0.9999993588987456', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001032632', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061776', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004406688', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009401699313', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40089.90481896847', 'uTime': '1747922717483', 'upl': ''}], 'msg': ''}
2025-05-22 22:05:17 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22374.86896685082', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1330.4985955394227', 'spotUplRatio': '0.0979854498460246', 'stgyEq': '0', 'totalPnl': '1317.144303749943', 'totalPnlRatio': '0.0969066578784636', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7992.617518133176', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1451.2966811940698', 'spotUplRatio': '0.2218659988359749', 'stgyEq': '0', 'totalPnl': '1561.703161910681', 'totalPnlRatio': '0.2428430974826451', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4745.5737881972045', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2263.189722999087', 'spotUplRatio': '-0.3229085586043399', 'stgyEq': '0', 'totalPnl': '-4196.281194182557', 'totalPnlRatio': '-0.469285310760628', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.168349195192', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '821.6749441096207', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '22.139452158610403', 'spotUplRatio': '0.0276903932180353', 'stgyEq': '0', 'totalPnl': '21.33911633102275', 'totalPnlRatio': '0.0266627028248172', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011376948', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038537710144865', 'spotUplRatio': '-0.772072004039752', 'stgyEq': '0', 'totalPnl': '-1774.5934246782522', 'totalPnlRatio': '-0.9999993588987456', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001032632', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061776', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004406688', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009401699313', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40089.90481896847', 'uTime': '1747922717483', 'upl': ''}], 'msg': ''}
2025-05-22 22:05:17 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 22:05:17 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 22:05:17 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 22:05:17 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22375.79409383644', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1331.1150347610412', 'spotUplRatio': '0.0980308479205776', 'stgyEq': '0', 'totalPnl': '1317.7607429715608', 'totalPnlRatio': '0.0969520113485292', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7993.532682992288', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1452.2118460531817', 'spotUplRatio': '0.2220059040450182', 'stgyEq': '0', 'totalPnl': '1562.6183267697925', 'totalPnlRatio': '0.2429854045961313', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4744.983028358017', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2263.780482838275', 'spotUplRatio': '-0.3229928473434655', 'stgyEq': '0', 'totalPnl': '-4196.871954021746', 'totalPnlRatio': '-0.4693513775711896', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.209900463171', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '821.6749441096207', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '22.139452158610403', 'spotUplRatio': '0.0276903932180353', 'stgyEq': '0', 'totalPnl': '21.33911633102275', 'totalPnlRatio': '0.0266627028248172', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011376948', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038537710144865', 'spotUplRatio': '-0.772072004039752', 'stgyEq': '0', 'totalPnl': '-1774.5934246782522', 'totalPnlRatio': '-0.9999993588987456', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001032632', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061776', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004406688', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009401699313', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40091.195902242', 'uTime': '1747922717640', 'upl': ''}], 'msg': ''}
2025-05-22 22:05:17 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22375.79409383644', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1331.1150347610412', 'spotUplRatio': '0.0980308479205776', 'stgyEq': '0', 'totalPnl': '1317.7607429715608', 'totalPnlRatio': '0.0969520113485292', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7993.532682992288', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1452.2118460531817', 'spotUplRatio': '0.2220059040450182', 'stgyEq': '0', 'totalPnl': '1562.6183267697925', 'totalPnlRatio': '0.2429854045961313', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4744.983028358017', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2263.780482838275', 'spotUplRatio': '-0.3229928473434655', 'stgyEq': '0', 'totalPnl': '-4196.871954021746', 'totalPnlRatio': '-0.4693513775711896', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.209900463171', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '821.6749441096207', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '22.139452158610403', 'spotUplRatio': '0.0276903932180353', 'stgyEq': '0', 'totalPnl': '21.33911633102275', 'totalPnlRatio': '0.0266627028248172', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011376948', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038537710144865', 'spotUplRatio': '-0.772072004039752', 'stgyEq': '0', 'totalPnl': '-1774.5934246782522', 'totalPnlRatio': '-0.9999993588987456', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001032632', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061776', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004406688', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009401699313', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40091.195902242', 'uTime': '1747922717640', 'upl': ''}], 'msg': ''}
2025-05-22 22:05:19 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 22:05:19 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 22:05:21 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 22:05:21 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 22:09:26 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/fills-history?instType=SPOT "HTTP/2 200 OK"
2025-05-22 22:09:26 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/fills-history?instType=SPOT "HTTP/2 200 OK"
2025-05-22 22:09:30 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/fills-history?instType=SPOT "HTTP/2 200 OK"
2025-05-22 22:09:31 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/fills-history?instType=SPOT "HTTP/2 200 OK"
2025-05-22 22:09:32 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/fills-history?instType=SPOT "HTTP/2 200 OK"
2025-05-22 22:09:33 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/fills-history?instType=SPOT "HTTP/2 200 OK"
2025-05-22 22:09:33 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/fills-history?instType=SPOT "HTTP/2 200 OK"
2025-05-22 22:09:35 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/fills-history?instType=SPOT "HTTP/2 200 OK"
2025-05-22 22:09:36 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/fills-history?instType=SPOT "HTTP/2 200 OK"
2025-05-22 22:09:37 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/fills-history?instType=SPOT "HTTP/2 200 OK"
2025-05-22 22:09:37 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/fills-history?instType=SPOT "HTTP/2 200 OK"
2025-05-22 22:09:41 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/fills-history?instType=SPOT "HTTP/2 200 OK"
2025-05-22 22:09:43 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/fills-history?instType=SPOT "HTTP/2 200 OK"
2025-05-22 22:09:44 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/fills-history?instType=SPOT "HTTP/2 200 OK"
2025-05-22 22:09:45 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/fills-history?instType=SPOT "HTTP/2 200 OK"
2025-05-22 22:10:58 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 22:10:58 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 22:10:58 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 22:10:58 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22357.712066390228', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1319.0664499748707', 'spotUplRatio': '0.0971435219179506', 'stgyEq': '0', 'totalPnl': '1305.7121581853917', 'totalPnlRatio': '0.0960655571608834', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7990.585419784597', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1449.2645828454908', 'spotUplRatio': '0.2215553431749494', 'stgyEq': '0', 'totalPnl': '1559.671063562102', 'totalPnlRatio': '0.2425271084589982', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4738.87851001974', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2269.885001176551', 'spotUplRatio': '-0.3238638309810963', 'stgyEq': '0', 'totalPnl': '-4202.976472360022', 'totalPnlRatio': '-0.4700340679469902', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.459208071047', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '820.5673166855233', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '21.031824734770492', 'spotUplRatio': '0.0263050545617091', 'stgyEq': '0', 'totalPnl': '20.231488907182893', 'totalPnlRatio': '0.0252787495071474', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011436909', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038477749144865', 'spotUplRatio': '-0.7708707336669091', 'stgyEq': '0', 'totalPnl': '-1774.5934186821523', 'totalPnlRatio': '-0.9999993555198894', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.000103124', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061704', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004438016', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009412729856', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40063.20377931573', 'uTime': '1747923059051', 'upl': ''}], 'msg': ''}
2025-05-22 22:10:58 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22357.712066390228', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1319.0664499748707', 'spotUplRatio': '0.0971435219179506', 'stgyEq': '0', 'totalPnl': '1305.7121581853917', 'totalPnlRatio': '0.0960655571608834', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7990.585419784597', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1449.2645828454908', 'spotUplRatio': '0.2215553431749494', 'stgyEq': '0', 'totalPnl': '1559.671063562102', 'totalPnlRatio': '0.2425271084589982', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4738.87851001974', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2269.885001176551', 'spotUplRatio': '-0.3238638309810963', 'stgyEq': '0', 'totalPnl': '-4202.976472360022', 'totalPnlRatio': '-0.4700340679469902', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.459208071047', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '820.5673166855233', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '21.031824734770492', 'spotUplRatio': '0.0263050545617091', 'stgyEq': '0', 'totalPnl': '20.231488907182893', 'totalPnlRatio': '0.0252787495071474', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011436909', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038477749144865', 'spotUplRatio': '-0.7708707336669091', 'stgyEq': '0', 'totalPnl': '-1774.5934186821523', 'totalPnlRatio': '-0.9999993555198894', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.000103124', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061704', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004438016', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009412729856', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40063.20377931573', 'uTime': '1747923059051', 'upl': ''}], 'msg': ''}
2025-05-22 22:10:58 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 22:10:58 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 22:10:59 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 22:10:59 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22357.712066390228', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1319.0664499748707', 'spotUplRatio': '0.0971435219179506', 'stgyEq': '0', 'totalPnl': '1305.7121581853917', 'totalPnlRatio': '0.0960655571608834', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7990.585419784597', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1449.2645828454908', 'spotUplRatio': '0.2215553431749494', 'stgyEq': '0', 'totalPnl': '1559.671063562102', 'totalPnlRatio': '0.2425271084589982', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4738.87851001974', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2269.885001176551', 'spotUplRatio': '-0.3238638309810963', 'stgyEq': '0', 'totalPnl': '-4202.976472360022', 'totalPnlRatio': '-0.4700340679469902', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.459208071047', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '820.5673166855233', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '21.031824734770492', 'spotUplRatio': '0.0263050545617091', 'stgyEq': '0', 'totalPnl': '20.231488907182893', 'totalPnlRatio': '0.0252787495071474', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011436909', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038477749144865', 'spotUplRatio': '-0.7708707336669091', 'stgyEq': '0', 'totalPnl': '-1774.5934186821523', 'totalPnlRatio': '-0.9999993555198894', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.000103124', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061704', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004438016', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009412729856', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40063.20377931573', 'uTime': '1747923059209', 'upl': ''}], 'msg': ''}
2025-05-22 22:10:59 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22357.712066390228', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1319.0664499748707', 'spotUplRatio': '0.0971435219179506', 'stgyEq': '0', 'totalPnl': '1305.7121581853917', 'totalPnlRatio': '0.0960655571608834', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7990.585419784597', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1449.2645828454908', 'spotUplRatio': '0.2215553431749494', 'stgyEq': '0', 'totalPnl': '1559.671063562102', 'totalPnlRatio': '0.2425271084589982', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4738.87851001974', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2269.885001176551', 'spotUplRatio': '-0.3238638309810963', 'stgyEq': '0', 'totalPnl': '-4202.976472360022', 'totalPnlRatio': '-0.4700340679469902', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.459208071047', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '820.5673166855233', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '21.031824734770492', 'spotUplRatio': '0.0263050545617091', 'stgyEq': '0', 'totalPnl': '20.231488907182893', 'totalPnlRatio': '0.0252787495071474', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011436909', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038477749144865', 'spotUplRatio': '-0.7708707336669091', 'stgyEq': '0', 'totalPnl': '-1774.5934186821523', 'totalPnlRatio': '-0.9999993555198894', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.000103124', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061704', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004438016', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009412729856', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40063.20377931573', 'uTime': '1747923059209', 'upl': ''}], 'msg': ''}
2025-05-22 22:10:59 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 22:10:59 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 22:11:01 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 22:11:01 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 22:11:01 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 22:11:01 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22356.70283695137', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1318.3939708240155', 'spotUplRatio': '0.097093996745711', 'stgyEq': '0', 'totalPnl': '1305.0396790345349', 'totalPnlRatio': '0.0960160806480845', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7991.414112373557', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1450.0932754344506', 'spotUplRatio': '0.2216820289941619', 'stgyEq': '0', 'totalPnl': '1560.4997561510618', 'totalPnlRatio': '0.2426559692310528', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4740.0600296981165', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2268.703481498175', 'spotUplRatio': '-0.3236952535028452', 'stgyEq': '0', 'totalPnl': '-4201.794952681645', 'totalPnlRatio': '-0.4699019343258674', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.459208071047', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '820.8903746842184', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '21.35488273339046', 'spotUplRatio': '0.0267091116698042', 'stgyEq': '0', 'totalPnl': '20.554546905802795', 'totalPnlRatio': '0.0256824025581344', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011434302', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038480356144865', 'spotUplRatio': '-0.7709229628135544', 'stgyEq': '0', 'totalPnl': '-1774.5934189428522', 'totalPnlRatio': '-0.9999993556667961', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001031646', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061704', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004438192', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009412729856', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40064.52781992297', 'uTime': '1747923061580', 'upl': ''}], 'msg': ''}
2025-05-22 22:11:01 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22356.70283695137', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1318.3939708240155', 'spotUplRatio': '0.097093996745711', 'stgyEq': '0', 'totalPnl': '1305.0396790345349', 'totalPnlRatio': '0.0960160806480845', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7991.414112373557', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1450.0932754344506', 'spotUplRatio': '0.2216820289941619', 'stgyEq': '0', 'totalPnl': '1560.4997561510618', 'totalPnlRatio': '0.2426559692310528', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4740.0600296981165', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2268.703481498175', 'spotUplRatio': '-0.3236952535028452', 'stgyEq': '0', 'totalPnl': '-4201.794952681645', 'totalPnlRatio': '-0.4699019343258674', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.459208071047', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '820.8903746842184', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '21.35488273339046', 'spotUplRatio': '0.0267091116698042', 'stgyEq': '0', 'totalPnl': '20.554546905802795', 'totalPnlRatio': '0.0256824025581344', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011434302', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038480356144865', 'spotUplRatio': '-0.7709229628135544', 'stgyEq': '0', 'totalPnl': '-1774.5934189428522', 'totalPnlRatio': '-0.9999993556667961', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001031646', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061704', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004438192', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009412729856', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40064.52781992297', 'uTime': '1747923061580', 'upl': ''}], 'msg': ''}
2025-05-22 22:11:01 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 22:11:01 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 22:11:01 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 22:11:01 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22356.70283695137', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1318.3939708240155', 'spotUplRatio': '0.097093996745711', 'stgyEq': '0', 'totalPnl': '1305.0396790345349', 'totalPnlRatio': '0.0960160806480845', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7991.414112373557', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1450.0932754344506', 'spotUplRatio': '0.2216820289941619', 'stgyEq': '0', 'totalPnl': '1560.4997561510618', 'totalPnlRatio': '0.2426559692310528', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4740.0600296981165', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2268.703481498175', 'spotUplRatio': '-0.3236952535028452', 'stgyEq': '0', 'totalPnl': '-4201.794952681645', 'totalPnlRatio': '-0.4699019343258674', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.459208071047', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '820.8903746842184', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '21.35488273339046', 'spotUplRatio': '0.0267091116698042', 'stgyEq': '0', 'totalPnl': '20.554546905802795', 'totalPnlRatio': '0.0256824025581344', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011434302', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038480356144865', 'spotUplRatio': '-0.7709229628135544', 'stgyEq': '0', 'totalPnl': '-1774.5934189428522', 'totalPnlRatio': '-0.9999993556667961', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001031646', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061704', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004438192', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009412729856', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40064.52781992297', 'uTime': '1747923061722', 'upl': ''}], 'msg': ''}
2025-05-22 22:11:01 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22356.70283695137', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1318.3939708240155', 'spotUplRatio': '0.097093996745711', 'stgyEq': '0', 'totalPnl': '1305.0396790345349', 'totalPnlRatio': '0.0960160806480845', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7991.414112373557', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1450.0932754344506', 'spotUplRatio': '0.2216820289941619', 'stgyEq': '0', 'totalPnl': '1560.4997561510618', 'totalPnlRatio': '0.2426559692310528', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4740.0600296981165', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2268.703481498175', 'spotUplRatio': '-0.3236952535028452', 'stgyEq': '0', 'totalPnl': '-4201.794952681645', 'totalPnlRatio': '-0.4699019343258674', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.459208071047', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '820.8903746842184', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '21.35488273339046', 'spotUplRatio': '0.0267091116698042', 'stgyEq': '0', 'totalPnl': '20.554546905802795', 'totalPnlRatio': '0.0256824025581344', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011434302', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038480356144865', 'spotUplRatio': '-0.7709229628135544', 'stgyEq': '0', 'totalPnl': '-1774.5934189428522', 'totalPnlRatio': '-0.9999993556667961', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001031646', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061704', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004438192', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009412729856', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40064.52781992297', 'uTime': '1747923061722', 'upl': ''}], 'msg': ''}
2025-05-22 22:11:06 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/fills-history?instType=SPOT "HTTP/2 200 OK"
2025-05-22 22:11:07 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/fills-history?instType=SPOT "HTTP/2 200 OK"
2025-05-22 22:13:19 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-22 22:13:19 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-22 22:13:19 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-22 22:13:19 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-22 22:13:19 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-22 22:13:19 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-22 22:13:37 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:13:37 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:13:37 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:37 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:13:38 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:13:38 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:13:38 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:38 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:13:39 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:13:39 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:13:39 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:39 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:39 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:13:40 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:13:40 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:13:40 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:40 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:13:47 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:13:47 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:13:48 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:48 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:48 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:13:49 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=7 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:13:49 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:13:49 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:49 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:49 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:13:51 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=2 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:13:51 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:13:51 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:51 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:51 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:13:54 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:13:54 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:13:54 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:54 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - Error processing order: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:13:54 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:15:23 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-22 22:15:23 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-22 22:15:23 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-22 22:15:23 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-22 22:15:24 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-22 22:15:24 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-22 22:15:41 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-22 22:15:41 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-22 22:15:41 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-22 22:15:41 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-22 22:15:42 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-22 22:15:42 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-22 22:16:24 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-22 22:16:24 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-22 22:16:24 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-22 22:16:24 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-22 22:16:25 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-22 22:16:25 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-22 22:16:35 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:16:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:16:35 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:16:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:16:36 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:36 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:16:37 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:16:37 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:16:37 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:16:37 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:16:37 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:16:37 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:37 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:16:39 - backend.service_center.okx_service.okx_balance_service - INFO - 初始化OKXBalanceService
2025-05-22 22:16:39 - backend.service_center.okx_service.okx_balance_service - INFO - OKXBalanceService初始化完成
2025-05-22 22:16:39 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 22:16:39 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 22:16:39 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 22:16:39 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22293.12138230329', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1276.0277843200877', 'spotUplRatio': '0.0939739108946133', 'stgyEq': '0', 'totalPnl': '1262.6734925306082', 'totalPnlRatio': '0.0928990603417578', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7986.65813751518', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1445.3373005760734', 'spotUplRatio': '0.2209549625534639', 'stgyEq': '0', 'totalPnl': '1555.7437812926846', 'totalPnlRatio': '0.2419164204523049', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4739.469269858929', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2269.294241337363', 'spotUplRatio': '-0.3237795422419708', 'stgyEq': '0', 'totalPnl': '-4202.385712520834', 'totalPnlRatio': '-0.4699680011364289', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.043695391254', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '821.951850965645', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '22.416359014570414', 'spotUplRatio': '0.0280367278821168', 'stgyEq': '0', 'totalPnl': '21.61602318698283', 'totalPnlRatio': '0.0270086911542348', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011607233', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038307425144865', 'spotUplRatio': '-0.7674584294194139', 'stgyEq': '0', 'totalPnl': '-1774.5934016497522', 'totalPnlRatio': '-0.9999993459219787', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.000103298', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061659', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.00000442904', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009398022466', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '39996.24561159034', 'uTime': '1747923399833', 'upl': ''}], 'msg': ''}
2025-05-22 22:16:39 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22293.12138230329', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1276.0277843200877', 'spotUplRatio': '0.0939739108946133', 'stgyEq': '0', 'totalPnl': '1262.6734925306082', 'totalPnlRatio': '0.0928990603417578', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7986.65813751518', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1445.3373005760734', 'spotUplRatio': '0.2209549625534639', 'stgyEq': '0', 'totalPnl': '1555.7437812926846', 'totalPnlRatio': '0.2419164204523049', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4739.469269858929', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2269.294241337363', 'spotUplRatio': '-0.3237795422419708', 'stgyEq': '0', 'totalPnl': '-4202.385712520834', 'totalPnlRatio': '-0.4699680011364289', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.043695391254', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '821.951850965645', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '22.416359014570414', 'spotUplRatio': '0.0280367278821168', 'stgyEq': '0', 'totalPnl': '21.61602318698283', 'totalPnlRatio': '0.0270086911542348', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011607233', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038307425144865', 'spotUplRatio': '-0.7674584294194139', 'stgyEq': '0', 'totalPnl': '-1774.5934016497522', 'totalPnlRatio': '-0.9999993459219787', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.000103298', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061659', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.00000442904', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009398022466', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '39996.24561159034', 'uTime': '1747923399833', 'upl': ''}], 'msg': ''}
2025-05-22 22:16:39 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 22:16:39 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 22:16:39 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 22:16:39 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22293.12138230329', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1276.0277843200877', 'spotUplRatio': '0.0939739108946133', 'stgyEq': '0', 'totalPnl': '1262.6734925306082', 'totalPnlRatio': '0.0928990603417578', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7986.65813751518', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1445.3373005760734', 'spotUplRatio': '0.2209549625534639', 'stgyEq': '0', 'totalPnl': '1555.7437812926846', 'totalPnlRatio': '0.2419164204523049', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4739.469269858929', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2269.294241337363', 'spotUplRatio': '-0.3237795422419708', 'stgyEq': '0', 'totalPnl': '-4202.385712520834', 'totalPnlRatio': '-0.4699680011364289', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.043695391254', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '821.951850965645', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '22.416359014570414', 'spotUplRatio': '0.0280367278821168', 'stgyEq': '0', 'totalPnl': '21.61602318698283', 'totalPnlRatio': '0.0270086911542348', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011607233', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038307425144865', 'spotUplRatio': '-0.7674584294194139', 'stgyEq': '0', 'totalPnl': '-1774.5934016497522', 'totalPnlRatio': '-0.9999993459219787', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.000103298', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061659', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.00000442904', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009398022466', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '39996.24561159034', 'uTime': '1747923399976', 'upl': ''}], 'msg': ''}
2025-05-22 22:16:39 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22293.12138230329', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1276.0277843200877', 'spotUplRatio': '0.0939739108946133', 'stgyEq': '0', 'totalPnl': '1262.6734925306082', 'totalPnlRatio': '0.0928990603417578', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7986.65813751518', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1445.3373005760734', 'spotUplRatio': '0.2209549625534639', 'stgyEq': '0', 'totalPnl': '1555.7437812926846', 'totalPnlRatio': '0.2419164204523049', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4739.469269858929', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2269.294241337363', 'spotUplRatio': '-0.3237795422419708', 'stgyEq': '0', 'totalPnl': '-4202.385712520834', 'totalPnlRatio': '-0.4699680011364289', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.043695391254', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '821.951850965645', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '22.416359014570414', 'spotUplRatio': '0.0280367278821168', 'stgyEq': '0', 'totalPnl': '21.61602318698283', 'totalPnlRatio': '0.0270086911542348', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011607233', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038307425144865', 'spotUplRatio': '-0.7674584294194139', 'stgyEq': '0', 'totalPnl': '-1774.5934016497522', 'totalPnlRatio': '-0.9999993459219787', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.000103298', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061659', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.00000442904', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009398022466', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '39996.24561159034', 'uTime': '1747923399976', 'upl': ''}], 'msg': ''}
2025-05-22 22:16:40 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:16:40 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:16:40 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:16:40 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:16:40 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:16:40 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:40 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:16:41 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 22:16:41 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 22:16:42 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 22:16:42 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 22:16:42 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 22:16:42 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22297.3265049652', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1278.8297807819877', 'spotUplRatio': '0.0941802657789451', 'stgyEq': '0', 'totalPnl': '1265.475488992508', 'totalPnlRatio': '0.0931052124784196', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7989.879229578353', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1448.5583926392467', 'spotUplRatio': '0.2214473848246639', 'stgyEq': '0', 'totalPnl': '1558.964873355858', 'totalPnlRatio': '0.2424172966706387', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4741.635389269284', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2267.128121927007', 'spotUplRatio': '-0.3234704835318437', 'stgyEq': '0', 'totalPnl': '-4200.219593110478', 'totalPnlRatio': '-0.4697257561643705', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.168349195192', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '822.1826066789987', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '22.647114727870466', 'spotUplRatio': '0.0283253401021849', 'stgyEq': '0', 'totalPnl': '21.846778900282857', 'totalPnlRatio': '0.0272970147620827', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011622006', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038292652144865', 'spotUplRatio': '-0.7671624642550904', 'stgyEq': '0', 'totalPnl': '-1774.5934001724522', 'totalPnlRatio': '-0.9999993450895068', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001033328', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061659', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004429216', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009399860889', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40006.19335675554', 'uTime': '1747923402994', 'upl': ''}], 'msg': ''}
2025-05-22 22:16:42 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22297.3265049652', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1278.8297807819877', 'spotUplRatio': '0.0941802657789451', 'stgyEq': '0', 'totalPnl': '1265.475488992508', 'totalPnlRatio': '0.0931052124784196', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7989.879229578353', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1448.5583926392467', 'spotUplRatio': '0.2214473848246639', 'stgyEq': '0', 'totalPnl': '1558.964873355858', 'totalPnlRatio': '0.2424172966706387', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4741.635389269284', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2267.128121927007', 'spotUplRatio': '-0.3234704835318437', 'stgyEq': '0', 'totalPnl': '-4200.219593110478', 'totalPnlRatio': '-0.4697257561643705', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.168349195192', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '822.1826066789987', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '22.647114727870466', 'spotUplRatio': '0.0283253401021849', 'stgyEq': '0', 'totalPnl': '21.846778900282857', 'totalPnlRatio': '0.0272970147620827', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011622006', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038292652144865', 'spotUplRatio': '-0.7671624642550904', 'stgyEq': '0', 'totalPnl': '-1774.5934001724522', 'totalPnlRatio': '-0.9999993450895068', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001033328', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061659', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004429216', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009399860889', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40006.19335675554', 'uTime': '1747923402994', 'upl': ''}], 'msg': ''}
2025-05-22 22:16:42 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 22:16:42 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 22:16:43 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 22:16:43 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22297.3265049652', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1278.8297807819877', 'spotUplRatio': '0.0941802657789451', 'stgyEq': '0', 'totalPnl': '1265.475488992508', 'totalPnlRatio': '0.0931052124784196', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7989.799963330713', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1448.4791263916068', 'spotUplRatio': '0.2214352670506522', 'stgyEq': '0', 'totalPnl': '1558.8856071082173', 'totalPnlRatio': '0.2424049708576594', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4741.635389269284', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2267.128121927007', 'spotUplRatio': '-0.3234704835318437', 'stgyEq': '0', 'totalPnl': '-4200.219593110478', 'totalPnlRatio': '-0.4697257561643705', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.1267979272125', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '822.2287578216694', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '22.69326587053042', 'spotUplRatio': '0.0283830625461984', 'stgyEq': '0', 'totalPnl': '21.892930042942794', 'totalPnlRatio': '0.0273546794836522', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011622006', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038292652144865', 'spotUplRatio': '-0.7671624642550904', 'stgyEq': '0', 'totalPnl': '-1774.5934001724522', 'totalPnlRatio': '-0.9999993450895068', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001033328', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061659', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004429216', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009399860889', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40006.11869038259', 'uTime': '1747923403134', 'upl': ''}], 'msg': ''}
2025-05-22 22:16:43 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22297.3265049652', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1278.8297807819877', 'spotUplRatio': '0.0941802657789451', 'stgyEq': '0', 'totalPnl': '1265.475488992508', 'totalPnlRatio': '0.0931052124784196', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7989.799963330713', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1448.4791263916068', 'spotUplRatio': '0.2214352670506522', 'stgyEq': '0', 'totalPnl': '1558.8856071082173', 'totalPnlRatio': '0.2424049708576594', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4741.635389269284', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2267.128121927007', 'spotUplRatio': '-0.3234704835318437', 'stgyEq': '0', 'totalPnl': '-4200.219593110478', 'totalPnlRatio': '-0.4697257561643705', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.1267979272125', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '822.2287578216694', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '22.69326587053042', 'spotUplRatio': '0.0283830625461984', 'stgyEq': '0', 'totalPnl': '21.892930042942794', 'totalPnlRatio': '0.0273546794836522', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011622006', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038292652144865', 'spotUplRatio': '-0.7671624642550904', 'stgyEq': '0', 'totalPnl': '-1774.5934001724522', 'totalPnlRatio': '-0.9999993450895068', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001033328', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061659', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004429216', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009399860889', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40006.11869038259', 'uTime': '1747923403134', 'upl': ''}], 'msg': ''}
2025-05-22 22:16:43 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 22:16:43 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 22:16:45 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 22:16:45 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 22:16:45 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22294.887533821293', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1277.204622834086', 'spotUplRatio': '0.0940605799460327', 'stgyEq': '0', 'totalPnl': '1263.8503310446067', 'totalPnlRatio': '0.0929856442391558', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7989.994525938556', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1448.6736889994493', 'spotUplRatio': '0.2214650106777716', 'stgyEq': '0', 'totalPnl': '1559.0801697160605', 'totalPnlRatio': '0.2424352251258809', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4740.8477094837', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2267.9158017125915', 'spotUplRatio': '-0.3235828685173445', 'stgyEq': '0', 'totalPnl': '-4201.007272896062', 'totalPnlRatio': '-0.469813845245119', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.1267979272125', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '822.1826066789987', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '22.647114727870466', 'spotUplRatio': '0.0283253401021849', 'stgyEq': '0', 'totalPnl': '21.846778900282857', 'totalPnlRatio': '0.0272970147620827', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011607233', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038307425144865', 'spotUplRatio': '-0.7674584294194139', 'stgyEq': '0', 'totalPnl': '-1774.5934016497522', 'totalPnlRatio': '-0.9999993459219787', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.000103327', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061659', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004428864', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009399860889', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40003.04044943482', 'uTime': '1747923405215', 'upl': ''}], 'msg': ''}
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22294.887533821293', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1277.204622834086', 'spotUplRatio': '0.0940605799460327', 'stgyEq': '0', 'totalPnl': '1263.8503310446067', 'totalPnlRatio': '0.0929856442391558', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7989.994525938556', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1448.6736889994493', 'spotUplRatio': '0.2214650106777716', 'stgyEq': '0', 'totalPnl': '1559.0801697160605', 'totalPnlRatio': '0.2424352251258809', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4740.8477094837', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2267.9158017125915', 'spotUplRatio': '-0.3235828685173445', 'stgyEq': '0', 'totalPnl': '-4201.007272896062', 'totalPnlRatio': '-0.469813845245119', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.1267979272125', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '822.1826066789987', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '22.647114727870466', 'spotUplRatio': '0.0283253401021849', 'stgyEq': '0', 'totalPnl': '21.846778900282857', 'totalPnlRatio': '0.0272970147620827', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011607233', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038307425144865', 'spotUplRatio': '-0.7674584294194139', 'stgyEq': '0', 'totalPnl': '-1774.5934016497522', 'totalPnlRatio': '-0.9999993459219787', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.000103327', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061659', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004428864', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009399860889', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40003.04044943482', 'uTime': '1747923405215', 'upl': ''}], 'msg': ''}
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 22:16:45 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 22:16:45 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 22:16:45 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22294.635226461574', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1277.0365030463709', 'spotUplRatio': '0.0940481986529727', 'stgyEq': '0', 'totalPnl': '1263.6822112568916', 'totalPnlRatio': '0.092973275110956', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7989.994525938556', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1448.6736889994493', 'spotUplRatio': '0.2214650106777716', 'stgyEq': '0', 'totalPnl': '1559.0801697160605', 'totalPnlRatio': '0.2424352251258809', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4740.8477094837', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2267.9158017125915', 'spotUplRatio': '-0.3235828685173445', 'stgyEq': '0', 'totalPnl': '-4201.007272896062', 'totalPnlRatio': '-0.469813845245119', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.1267979272125', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '822.1826066789987', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '22.647114727870466', 'spotUplRatio': '0.0283253401021849', 'stgyEq': '0', 'totalPnl': '21.846778900282857', 'totalPnlRatio': '0.0272970147620827', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011606364', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038308294144865', 'spotUplRatio': '-0.7674758391349624', 'stgyEq': '0', 'totalPnl': '-1774.5934017366521', 'totalPnlRatio': '-0.9999993459709475', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.000103327', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061659', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004428864', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009399860889', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40002.788141988196', 'uTime': '1747923405352', 'upl': ''}], 'msg': ''}
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22294.635226461574', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1277.0365030463709', 'spotUplRatio': '0.0940481986529727', 'stgyEq': '0', 'totalPnl': '1263.6822112568916', 'totalPnlRatio': '0.092973275110956', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7989.994525938556', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1448.6736889994493', 'spotUplRatio': '0.2214650106777716', 'stgyEq': '0', 'totalPnl': '1559.0801697160605', 'totalPnlRatio': '0.2424352251258809', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4740.8477094837', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2267.9158017125915', 'spotUplRatio': '-0.3235828685173445', 'stgyEq': '0', 'totalPnl': '-4201.007272896062', 'totalPnlRatio': '-0.469813845245119', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.1267979272125', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '822.1826066789987', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '22.647114727870466', 'spotUplRatio': '0.0283253401021849', 'stgyEq': '0', 'totalPnl': '21.846778900282857', 'totalPnlRatio': '0.0272970147620827', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011606364', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038308294144865', 'spotUplRatio': '-0.7674758391349624', 'stgyEq': '0', 'totalPnl': '-1774.5934017366521', 'totalPnlRatio': '-0.9999993459709475', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.000103327', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061659', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004428864', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009399860889', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40002.788141988196', 'uTime': '1747923405352', 'upl': ''}], 'msg': ''}
2025-05-22 22:16:45 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:16:45 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:16:45 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:16:45 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:16:45 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:16:45 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 59, in process
    return self._process_market_order(order)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 74, in _process_market_order
    return self.record_service.save_or_update_stop_loss_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_stop_loss_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:16:45 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单时发生错误: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 150, in _process_order
    if not processor.process(order):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 36, in process
    return self.record_service.save_or_update_limit_order_result(None, order)
AttributeError: 'RecordService' object has no attribute 'save_or_update_limit_order_result'
2025-05-22 22:16:45 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:17:20 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-22 22:17:20 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-22 22:17:20 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-22 22:17:20 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-22 22:17:21 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-22 22:17:21 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-22 22:17:29 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:17:29 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:17:29 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2529305058655854592
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2529305058655854592
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2529007158247809024
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2529007158247809024
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2528337200090177536
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2528337200090177536
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2528335930558242816
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2528335930558242816
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2527913174175834112
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2527913174175834112
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2527912878729060352
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2527912878729060352
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2527911763748839424
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2527911763748839424
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2498995097967255553
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2498995097967255553
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2498993585501233152
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2498993585501233152
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2498993236199596032
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2498993236199596032
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2498992505249849344
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2498992505249849344
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2490237530801692672
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2490237530801692672
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2484603668386013185
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2484603668386013185
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2484602891869347840
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2484602891869347840
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2478760405745786880
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2478760405745786880
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2454494340484423680
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2454494340484423680
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2452298944899178496
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2452298944899178496
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2431973840864665600
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2431973840864665600
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2431924785358823424
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2431924785358823424
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2411658205454655488
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2411658205454655488
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2411655065766453248
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2411655065766453248
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2359271973143961600
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2359271973143961600
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2256980159729491968
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2256980159729491968
2025-05-22 22:17:29 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2246674599176036352
2025-05-22 22:17:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2246674599176036352
2025-05-22 22:17:29 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:17:36 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:17:36 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:17:36 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529305058655854592
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529007158247809024
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528337200090177536
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528335930558242816
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527913174175834112
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527912878729060352
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527911763748839424
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498995097967255553
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993585501233152
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993236199596032
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498992505249849344
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2490237530801692672
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484603668386013185
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484602891869347840
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2478760405745786880
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2454494340484423680
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2452298944899178496
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431973840864665600
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431924785358823424
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411658205454655488
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411655065766453248
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2359271973143961600
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2256980159729491968
2025-05-22 22:17:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2246674599176036352
2025-05-22 22:17:36 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:17:37 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=2 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:17:37 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:17:37 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529305058655854592
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529007158247809024
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528337200090177536
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528335930558242816
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527913174175834112
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527912878729060352
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527911763748839424
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498995097967255553
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993585501233152
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993236199596032
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498992505249849344
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2490237530801692672
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484603668386013185
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484602891869347840
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2478760405745786880
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2454494340484423680
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2452298944899178496
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431973840864665600
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431924785358823424
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411658205454655488
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411655065766453248
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2359271973143961600
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2256980159729491968
2025-05-22 22:17:37 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:37 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2246674599176036352
2025-05-22 22:17:37 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:17:38 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=3 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:17:38 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:17:38 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529305058655854592
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529007158247809024
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528337200090177536
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528335930558242816
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527913174175834112
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527912878729060352
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527911763748839424
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498995097967255553
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993585501233152
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993236199596032
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498992505249849344
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2490237530801692672
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484603668386013185
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484602891869347840
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2478760405745786880
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2454494340484423680
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2452298944899178496
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431973840864665600
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431924785358823424
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411658205454655488
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411655065766453248
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2359271973143961600
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2256980159729491968
2025-05-22 22:17:38 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 415, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:17:38 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2246674599176036352
2025-05-22 22:17:38 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:18:50 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-22 22:18:50 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-22 22:18:50 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-22 22:18:50 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-22 22:18:51 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-22 22:18:51 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-22 22:19:03 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-22 22:19:03 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-22 22:19:03 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-22 22:19:03 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-22 22:19:04 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-22 22:19:04 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-22 22:24:58 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=3 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:24:58 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:24:58 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:24:58 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:24:59 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.183372, px=2599.6, amount=476.6938512
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529305058655854592
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.312584, px=2559.31, amount=799.99935704
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529007158247809024
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.311, px=2479.38, amount=771.08718
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528337200090177536
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00054016, px=106915.2, amount=57.751314432
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528335930558242816
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.049088, px=173.18, amount=8.50105984
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527913174175834112
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.310917, px=2573.03, amount=799.9987685100001
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527912878729060352
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00594488, px=109336.5, amount=649.9923721199999
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527911763748839424
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00397331, px=104270.6, amount=414.299417686
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498995097967255553
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.166845, px=2483.5, amount=414.3595575
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993585501233152
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2484.11, amount=414.6228001
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993236199596032
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2483.3, amount=414.48760300000004
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498992505249849344
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=44.144234, px=0.9999, amount=44.1398195766
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2490237530801692672
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=2.844106, px=143.56, amount=408.29985736000003
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484603668386013185
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.23276, px=1771.91, amount=412.42977160000004
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484602891869347840
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0041897, px=95472.1, amount=399.99945737
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2478760405745786880
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.457076, px=1808.4, amount=826.5762384
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2454494340484423680
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0043575, px=94320.1, amount=410.99983575000005
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2452298944899178496
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.257895, px=1593.67, amount=410.99952465
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431973840864665600
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00485349, px=84681.2, amount=410.999357388
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431924785358823424
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.019312, px=1563.68, amount=30.19778816
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411658205454655488
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00227894, px=82237.3, amount=187.41387246200003
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411655065766453248
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.04975941, px=87704, amount=4364.09929464
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2359271973143961600
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=16.155958, px=185.69, amount=2999.9998410199996
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2256980159729491968
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.55068, px=190.81, amount=105.07525079999999
2025-05-22 22:24:59 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:24:59 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2246674599176036352
2025-05-22 22:24:59 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:25:01 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=3 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:25:01 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:25:01 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.183372, px=2599.6, amount=476.6938512
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529305058655854592
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.312584, px=2559.31, amount=799.99935704
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529007158247809024
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.311, px=2479.38, amount=771.08718
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528337200090177536
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00054016, px=106915.2, amount=57.751314432
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528335930558242816
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.049088, px=173.18, amount=8.50105984
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527913174175834112
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.310917, px=2573.03, amount=799.9987685100001
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527912878729060352
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00594488, px=109336.5, amount=649.9923721199999
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527911763748839424
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00397331, px=104270.6, amount=414.299417686
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498995097967255553
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.166845, px=2483.5, amount=414.3595575
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993585501233152
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2484.11, amount=414.6228001
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993236199596032
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2483.3, amount=414.48760300000004
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498992505249849344
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=44.144234, px=0.9999, amount=44.1398195766
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2490237530801692672
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=2.844106, px=143.56, amount=408.29985736000003
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484603668386013185
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.23276, px=1771.91, amount=412.42977160000004
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484602891869347840
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0041897, px=95472.1, amount=399.99945737
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2478760405745786880
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.457076, px=1808.4, amount=826.5762384
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2454494340484423680
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0043575, px=94320.1, amount=410.99983575000005
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2452298944899178496
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.257895, px=1593.67, amount=410.99952465
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431973840864665600
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00485349, px=84681.2, amount=410.999357388
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431924785358823424
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.019312, px=1563.68, amount=30.19778816
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411658205454655488
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00227894, px=82237.3, amount=187.41387246200003
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411655065766453248
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.04975941, px=87704, amount=4364.09929464
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2359271973143961600
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=16.155958, px=185.69, amount=2999.9998410199996
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2256980159729491968
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.55068, px=190.81, amount=105.07525079999999
2025-05-22 22:25:01 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:01 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2246674599176036352
2025-05-22 22:25:01 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:25:03 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:25:03 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:25:03 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:25:03 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:25:03 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:25:03 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:25:03 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:25:03 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.183372, px=2599.6, amount=476.6938512
2025-05-22 22:25:03 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:03 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529305058655854592
2025-05-22 22:25:03 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.312584, px=2559.31, amount=799.99935704
2025-05-22 22:25:03 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:03 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529007158247809024
2025-05-22 22:25:03 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.311, px=2479.38, amount=771.08718
2025-05-22 22:25:03 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:03 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528337200090177536
2025-05-22 22:25:03 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00054016, px=106915.2, amount=57.751314432
2025-05-22 22:25:03 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:03 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528335930558242816
2025-05-22 22:25:03 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.049088, px=173.18, amount=8.50105984
2025-05-22 22:25:03 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:03 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527913174175834112
2025-05-22 22:25:03 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.310917, px=2573.03, amount=799.9987685100001
2025-05-22 22:25:03 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:03 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527912878729060352
2025-05-22 22:25:03 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00594488, px=109336.5, amount=649.9923721199999
2025-05-22 22:25:03 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:03 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527911763748839424
2025-05-22 22:25:03 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00397331, px=104270.6, amount=414.299417686
2025-05-22 22:25:04 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498995097967255553
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.166845, px=2483.5, amount=414.3595575
2025-05-22 22:25:04 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993585501233152
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2484.11, amount=414.6228001
2025-05-22 22:25:04 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993236199596032
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2483.3, amount=414.48760300000004
2025-05-22 22:25:04 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498992505249849344
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=44.144234, px=0.9999, amount=44.1398195766
2025-05-22 22:25:04 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2490237530801692672
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=2.844106, px=143.56, amount=408.29985736000003
2025-05-22 22:25:04 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484603668386013185
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.23276, px=1771.91, amount=412.42977160000004
2025-05-22 22:25:04 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484602891869347840
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0041897, px=95472.1, amount=399.99945737
2025-05-22 22:25:04 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2478760405745786880
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.457076, px=1808.4, amount=826.5762384
2025-05-22 22:25:04 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2454494340484423680
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0043575, px=94320.1, amount=410.99983575000005
2025-05-22 22:25:04 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2452298944899178496
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.257895, px=1593.67, amount=410.99952465
2025-05-22 22:25:04 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431973840864665600
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00485349, px=84681.2, amount=410.999357388
2025-05-22 22:25:04 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431924785358823424
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.019312, px=1563.68, amount=30.19778816
2025-05-22 22:25:04 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411658205454655488
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00227894, px=82237.3, amount=187.41387246200003
2025-05-22 22:25:04 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411655065766453248
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.04975941, px=87704, amount=4364.09929464
2025-05-22 22:25:04 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2359271973143961600
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=16.155958, px=185.69, amount=2999.9998410199996
2025-05-22 22:25:04 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2256980159729491968
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.55068, px=190.81, amount=105.07525079999999
2025-05-22 22:25:04 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:04 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2246674599176036352
2025-05-22 22:25:04 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:25:06 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=5 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:25:06 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:25:06 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:25:06 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:25:07 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.183372, px=2599.6, amount=476.6938512
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529305058655854592
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.312584, px=2559.31, amount=799.99935704
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529007158247809024
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.311, px=2479.38, amount=771.08718
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528337200090177536
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00054016, px=106915.2, amount=57.751314432
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528335930558242816
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.049088, px=173.18, amount=8.50105984
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527913174175834112
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.310917, px=2573.03, amount=799.9987685100001
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527912878729060352
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00594488, px=109336.5, amount=649.9923721199999
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527911763748839424
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00397331, px=104270.6, amount=414.299417686
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498995097967255553
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.166845, px=2483.5, amount=414.3595575
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993585501233152
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2484.11, amount=414.6228001
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993236199596032
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2483.3, amount=414.48760300000004
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498992505249849344
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=44.144234, px=0.9999, amount=44.1398195766
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2490237530801692672
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=2.844106, px=143.56, amount=408.29985736000003
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484603668386013185
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.23276, px=1771.91, amount=412.42977160000004
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484602891869347840
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0041897, px=95472.1, amount=399.99945737
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2478760405745786880
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.457076, px=1808.4, amount=826.5762384
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2454494340484423680
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0043575, px=94320.1, amount=410.99983575000005
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2452298944899178496
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.257895, px=1593.67, amount=410.99952465
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431973840864665600
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00485349, px=84681.2, amount=410.999357388
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431924785358823424
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.019312, px=1563.68, amount=30.19778816
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411658205454655488
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00227894, px=82237.3, amount=187.41387246200003
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411655065766453248
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.04975941, px=87704, amount=4364.09929464
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2359271973143961600
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=16.155958, px=185.69, amount=2999.9998410199996
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2256980159729491968
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.55068, px=190.81, amount=105.07525079999999
2025-05-22 22:25:07 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:07 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2246674599176036352
2025-05-22 22:25:07 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:25:11 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:25:11 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:25:11 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.183372, px=2599.6, amount=476.6938512
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529305058655854592
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.312584, px=2559.31, amount=799.99935704
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529007158247809024
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.311, px=2479.38, amount=771.08718
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528337200090177536
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00054016, px=106915.2, amount=57.751314432
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528335930558242816
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.049088, px=173.18, amount=8.50105984
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527913174175834112
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.310917, px=2573.03, amount=799.9987685100001
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527912878729060352
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00594488, px=109336.5, amount=649.9923721199999
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527911763748839424
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00397331, px=104270.6, amount=414.299417686
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498995097967255553
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.166845, px=2483.5, amount=414.3595575
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993585501233152
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2484.11, amount=414.6228001
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993236199596032
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2483.3, amount=414.48760300000004
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498992505249849344
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=44.144234, px=0.9999, amount=44.1398195766
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2490237530801692672
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=2.844106, px=143.56, amount=408.29985736000003
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484603668386013185
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.23276, px=1771.91, amount=412.42977160000004
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484602891869347840
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0041897, px=95472.1, amount=399.99945737
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2478760405745786880
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.457076, px=1808.4, amount=826.5762384
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2454494340484423680
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0043575, px=94320.1, amount=410.99983575000005
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2452298944899178496
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.257895, px=1593.67, amount=410.99952465
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431973840864665600
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00485349, px=84681.2, amount=410.999357388
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431924785358823424
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.019312, px=1563.68, amount=30.19778816
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411658205454655488
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00227894, px=82237.3, amount=187.41387246200003
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411655065766453248
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.04975941, px=87704, amount=4364.09929464
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2359271973143961600
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=16.155958, px=185.69, amount=2999.9998410199996
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2256980159729491968
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.55068, px=190.81, amount=105.07525079999999
2025-05-22 22:25:11 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:11 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2246674599176036352
2025-05-22 22:25:11 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:25:23 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=3 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:25:23 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:25:23 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.183372, px=2599.6, amount=476.6938512
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529305058655854592
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.312584, px=2559.31, amount=799.99935704
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529007158247809024
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.311, px=2479.38, amount=771.08718
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528337200090177536
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00054016, px=106915.2, amount=57.751314432
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528335930558242816
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.049088, px=173.18, amount=8.50105984
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527913174175834112
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.310917, px=2573.03, amount=799.9987685100001
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527912878729060352
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00594488, px=109336.5, amount=649.9923721199999
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527911763748839424
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00397331, px=104270.6, amount=414.299417686
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498995097967255553
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.166845, px=2483.5, amount=414.3595575
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993585501233152
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2484.11, amount=414.6228001
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993236199596032
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2483.3, amount=414.48760300000004
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498992505249849344
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=44.144234, px=0.9999, amount=44.1398195766
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2490237530801692672
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=2.844106, px=143.56, amount=408.29985736000003
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484603668386013185
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.23276, px=1771.91, amount=412.42977160000004
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484602891869347840
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0041897, px=95472.1, amount=399.99945737
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2478760405745786880
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.457076, px=1808.4, amount=826.5762384
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2454494340484423680
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0043575, px=94320.1, amount=410.99983575000005
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2452298944899178496
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.257895, px=1593.67, amount=410.99952465
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431973840864665600
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00485349, px=84681.2, amount=410.999357388
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431924785358823424
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.019312, px=1563.68, amount=30.19778816
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411658205454655488
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00227894, px=82237.3, amount=187.41387246200003
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411655065766453248
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.04975941, px=87704, amount=4364.09929464
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2359271973143961600
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=16.155958, px=185.69, amount=2999.9998410199996
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2256980159729491968
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.55068, px=190.81, amount=105.07525079999999
2025-05-22 22:25:23 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:23 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2246674599176036352
2025-05-22 22:25:23 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:25:26 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:25:26 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:25:26 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.183372, px=2599.6, amount=476.6938512
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529305058655854592
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.312584, px=2559.31, amount=799.99935704
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529007158247809024
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.311, px=2479.38, amount=771.08718
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528337200090177536
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00054016, px=106915.2, amount=57.751314432
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528335930558242816
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.049088, px=173.18, amount=8.50105984
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527913174175834112
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.310917, px=2573.03, amount=799.9987685100001
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527912878729060352
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00594488, px=109336.5, amount=649.9923721199999
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527911763748839424
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00397331, px=104270.6, amount=414.299417686
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498995097967255553
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.166845, px=2483.5, amount=414.3595575
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993585501233152
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2484.11, amount=414.6228001
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993236199596032
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2483.3, amount=414.48760300000004
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498992505249849344
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=44.144234, px=0.9999, amount=44.1398195766
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2490237530801692672
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=2.844106, px=143.56, amount=408.29985736000003
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484603668386013185
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.23276, px=1771.91, amount=412.42977160000004
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484602891869347840
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0041897, px=95472.1, amount=399.99945737
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2478760405745786880
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.457076, px=1808.4, amount=826.5762384
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2454494340484423680
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0043575, px=94320.1, amount=410.99983575000005
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2452298944899178496
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.257895, px=1593.67, amount=410.99952465
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431973840864665600
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00485349, px=84681.2, amount=410.999357388
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431924785358823424
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.019312, px=1563.68, amount=30.19778816
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411658205454655488
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00227894, px=82237.3, amount=187.41387246200003
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411655065766453248
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.04975941, px=87704, amount=4364.09929464
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2359271973143961600
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=16.155958, px=185.69, amount=2999.9998410199996
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2256980159729491968
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.55068, px=190.81, amount=105.07525079999999
2025-05-22 22:25:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2246674599176036352
2025-05-22 22:25:26 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:25:33 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:25:33 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:25:33 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:25:33 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:25:35 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.183372, px=2599.6, amount=476.6938512
2025-05-22 22:25:35 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529305058655854592
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.312584, px=2559.31, amount=799.99935704
2025-05-22 22:25:35 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529007158247809024
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.311, px=2479.38, amount=771.08718
2025-05-22 22:25:35 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528337200090177536
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00054016, px=106915.2, amount=57.751314432
2025-05-22 22:25:35 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528335930558242816
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.049088, px=173.18, amount=8.50105984
2025-05-22 22:25:35 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527913174175834112
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.310917, px=2573.03, amount=799.9987685100001
2025-05-22 22:25:35 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527912878729060352
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00594488, px=109336.5, amount=649.9923721199999
2025-05-22 22:25:35 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527911763748839424
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00397331, px=104270.6, amount=414.299417686
2025-05-22 22:25:35 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498995097967255553
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.166845, px=2483.5, amount=414.3595575
2025-05-22 22:25:35 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993585501233152
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2484.11, amount=414.6228001
2025-05-22 22:25:35 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993236199596032
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2483.3, amount=414.48760300000004
2025-05-22 22:25:35 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498992505249849344
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=44.144234, px=0.9999, amount=44.1398195766
2025-05-22 22:25:35 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2490237530801692672
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=2.844106, px=143.56, amount=408.29985736000003
2025-05-22 22:25:35 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484603668386013185
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.23276, px=1771.91, amount=412.42977160000004
2025-05-22 22:25:35 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484602891869347840
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0041897, px=95472.1, amount=399.99945737
2025-05-22 22:25:35 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2478760405745786880
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.457076, px=1808.4, amount=826.5762384
2025-05-22 22:25:35 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2454494340484423680
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0043575, px=94320.1, amount=410.99983575000005
2025-05-22 22:25:35 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2452298944899178496
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.257895, px=1593.67, amount=410.99952465
2025-05-22 22:25:35 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431973840864665600
2025-05-22 22:25:35 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00485349, px=84681.2, amount=410.999357388
2025-05-22 22:25:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431924785358823424
2025-05-22 22:25:36 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.019312, px=1563.68, amount=30.19778816
2025-05-22 22:25:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411658205454655488
2025-05-22 22:25:36 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00227894, px=82237.3, amount=187.41387246200003
2025-05-22 22:25:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411655065766453248
2025-05-22 22:25:36 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.04975941, px=87704, amount=4364.09929464
2025-05-22 22:25:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2359271973143961600
2025-05-22 22:25:36 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=16.155958, px=185.69, amount=2999.9998410199996
2025-05-22 22:25:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2256980159729491968
2025-05-22 22:25:36 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.55068, px=190.81, amount=105.07525079999999
2025-05-22 22:25:36 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 428, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:25:36 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2246674599176036352
2025-05-22 22:25:36 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:29:13 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-22 22:29:13 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-22 22:29:13 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-22 22:29:13 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-22 22:29:14 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-22 22:29:14 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-22 22:29:25 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-22 22:29:25 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-22 22:29:25 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-22 22:29:25 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-22 22:29:26 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-22 22:29:26 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-22 22:30:13 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-22 22:30:13 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-22 22:30:13 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-22 22:30:13 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-22 22:30:14 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-22 22:30:14 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-22 22:30:22 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:30:22 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:30:22 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.183372, px=2599.6, amount=476.6938512, target_price=2599.6, exec_price=2599.6
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2529305058655854592, amount=476.6938512, target_price=2599.6
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2529305058655854592
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.312584, px=2559.31, amount=799.99935704, target_price=2559.31, exec_price=2559.31
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2529007158247809024, amount=799.99935704, target_price=2559.31
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2529007158247809024
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.311, px=2479.38, amount=771.08718, target_price=2479.38, exec_price=2479.38
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2528337200090177536, amount=771.08718, target_price=2479.38
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2528337200090177536
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00054016, px=106915.2, amount=57.751314432, target_price=106915.2, exec_price=106915.2
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2528335930558242816, amount=57.751314432, target_price=106915.2
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2528335930558242816
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.049088, px=173.18, amount=8.50105984, target_price=173.18, exec_price=173.18
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2527913174175834112, amount=8.50105984, target_price=173.18
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2527913174175834112
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.310917, px=2573.03, amount=799.9987685100001, target_price=2573.03, exec_price=2573.03
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2527912878729060352, amount=799.9987685100001, target_price=2573.03
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2527912878729060352
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00594488, px=109336.5, amount=649.9923721199999, target_price=109336.5, exec_price=109336.5
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2527911763748839424, amount=649.9923721199999, target_price=109336.5
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2527911763748839424
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00397331, px=104270.6, amount=414.299417686, target_price=104270.6, exec_price=104270.6
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2498995097967255553, amount=414.299417686, target_price=104270.6
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2498995097967255553
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.166845, px=2483.5, amount=414.3595575, target_price=2483.5, exec_price=2483.5
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2498993585501233152, amount=414.3595575, target_price=2483.5
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2498993585501233152
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2484.11, amount=414.6228001, target_price=2484.11, exec_price=2484.11
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2498993236199596032, amount=414.6228001, target_price=2484.11
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2498993236199596032
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2483.3, amount=414.48760300000004, target_price=2483.3, exec_price=2483.3
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2498992505249849344, amount=414.48760300000004, target_price=2483.3
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2498992505249849344
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=44.144234, px=0.9999, amount=44.1398195766, target_price=0.9999, exec_price=0.9999
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2490237530801692672, amount=44.1398195766, target_price=0.9999
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2490237530801692672
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=2.844106, px=143.56, amount=408.29985736000003, target_price=143.56, exec_price=143.56
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2484603668386013185, amount=408.29985736000003, target_price=143.56
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2484603668386013185
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.23276, px=1771.91, amount=412.42977160000004, target_price=1771.91, exec_price=1771.91
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2484602891869347840, amount=412.42977160000004, target_price=1771.91
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2484602891869347840
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0041897, px=95472.1, amount=399.99945737, target_price=95472.1, exec_price=95472.1
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2478760405745786880, amount=399.99945737, target_price=95472.1
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2478760405745786880
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.457076, px=1808.4, amount=826.5762384, target_price=1808.4, exec_price=1808.4
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2454494340484423680, amount=826.5762384, target_price=1808.4
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2454494340484423680
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0043575, px=94320.1, amount=410.99983575000005, target_price=94320.1, exec_price=94320.1
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2452298944899178496, amount=410.99983575000005, target_price=94320.1
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2452298944899178496
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.257895, px=1593.67, amount=410.99952465, target_price=1593.67, exec_price=1593.67
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2431973840864665600, amount=410.99952465, target_price=1593.67
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2431973840864665600
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00485349, px=84681.2, amount=410.999357388, target_price=84681.2, exec_price=84681.2
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2431924785358823424, amount=410.999357388, target_price=84681.2
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2431924785358823424
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.019312, px=1563.68, amount=30.19778816, target_price=1563.68, exec_price=1563.68
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2411658205454655488, amount=30.19778816, target_price=1563.68
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2411658205454655488
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00227894, px=82237.3, amount=187.41387246200003, target_price=82237.3, exec_price=82237.3
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2411655065766453248, amount=187.41387246200003, target_price=82237.3
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2411655065766453248
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.04975941, px=87704, amount=4364.09929464, target_price=87704, exec_price=87704
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2359271973143961600, amount=4364.09929464, target_price=87704
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2359271973143961600
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=16.155958, px=185.69, amount=2999.9998410199996, target_price=185.69, exec_price=185.69
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2256980159729491968, amount=2999.9998410199996, target_price=185.69
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2256980159729491968
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.55068, px=190.81, amount=105.07525079999999, target_price=190.81, exec_price=190.81
2025-05-22 22:30:22 - backend.data_object_center.spot_algo_order_record - INFO - 插入新记录: 2246674599176036352, amount=105.07525079999999, target_price=190.81
2025-05-22 22:30:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功处理订单: 2246674599176036352
2025-05-22 22:30:22 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:30:38 - backend.service_center.okx_service.okx_balance_service - INFO - 初始化OKXBalanceService
2025-05-22 22:30:38 - backend.service_center.okx_service.okx_balance_service - INFO - OKXBalanceService初始化完成
2025-05-22 22:30:38 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 22:30:38 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 22:30:39 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 22:30:40 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22452.07501892349', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1381.9432505799082', 'spotUplRatio': '0.1017741255223576', 'stgyEq': '0', 'totalPnl': '1368.5889587904276', 'totalPnlRatio': '0.1006916111075749', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '8027.141571991487', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1485.8207350523799', 'spotUplRatio': '0.2271438402259509', 'stgyEq': '0', 'totalPnl': '1596.2272157689913', 'totalPnlRatio': '0.2482115492992837', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4774.914860210209', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2233.848650986083', 'spotUplRatio': '-0.3187222178944369', 'stgyEq': '0', 'totalPnl': '-4166.940122169553', 'totalPnlRatio': '-0.4660039925027474', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.168349195192', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '826.7054186607298', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '27.169926708550417', 'spotUplRatio': '0.0339821396155171', 'stgyEq': '0', 'totalPnl': '26.369590880962846', 'totalPnlRatio': '0.0329481574759016', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0012011318', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0037903340144865', 'spotUplRatio': '-0.7593629116893867', 'stgyEq': '0', 'totalPnl': '-1774.5933612412523', 'totalPnlRatio': '-0.9999993231514255', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001038954', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061821', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004453856', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009477074689', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40236.006535591965', 'uTime': '1747924239640', 'upl': ''}], 'msg': ''}
2025-05-22 22:30:40 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22452.07501892349', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1381.9432505799082', 'spotUplRatio': '0.1017741255223576', 'stgyEq': '0', 'totalPnl': '1368.5889587904276', 'totalPnlRatio': '0.1006916111075749', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '8027.141571991487', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1485.8207350523799', 'spotUplRatio': '0.2271438402259509', 'stgyEq': '0', 'totalPnl': '1596.2272157689913', 'totalPnlRatio': '0.2482115492992837', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4774.914860210209', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2233.848650986083', 'spotUplRatio': '-0.3187222178944369', 'stgyEq': '0', 'totalPnl': '-4166.940122169553', 'totalPnlRatio': '-0.4660039925027474', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.168349195192', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '826.7054186607298', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '27.169926708550417', 'spotUplRatio': '0.0339821396155171', 'stgyEq': '0', 'totalPnl': '26.369590880962846', 'totalPnlRatio': '0.0329481574759016', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0012011318', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0037903340144865', 'spotUplRatio': '-0.7593629116893867', 'stgyEq': '0', 'totalPnl': '-1774.5933612412523', 'totalPnlRatio': '-0.9999993231514255', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001038954', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061821', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004453856', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009477074689', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40236.006535591965', 'uTime': '1747924239640', 'upl': ''}], 'msg': ''}
2025-05-22 22:30:40 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 22:30:40 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 22:30:40 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 22:30:40 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22452.747838549396', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1382.3915700138118', 'spotUplRatio': '0.1018071423038507', 'stgyEq': '0', 'totalPnl': '1369.037278224332', 'totalPnlRatio': '0.1007245954494408', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '8026.954215406157', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1485.6333784670505', 'spotUplRatio': '0.2271151982146508', 'stgyEq': '0', 'totalPnl': '1596.039859183662', 'totalPnlRatio': '0.248182415559515', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4775.111780156604', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2233.651731039687', 'spotUplRatio': '-0.3186941216480617', 'stgyEq': '0', 'totalPnl': '-4166.743202223159', 'totalPnlRatio': '-0.4659819702325604', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.168349195192', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '826.7054186607298', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '27.169926708550417', 'spotUplRatio': '0.0339821396155171', 'stgyEq': '0', 'totalPnl': '26.369590880962846', 'totalPnlRatio': '0.0329481574759016', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0012012187', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0037902471144865', 'spotUplRatio': '-0.7593455019738383', 'stgyEq': '0', 'totalPnl': '-1774.5933611543524', 'totalPnlRatio': '-0.9999993231024565', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001038954', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061821', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004453328', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009478913113', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40236.688918665495', 'uTime': '1747924240698', 'upl': ''}], 'msg': ''}
2025-05-22 22:30:40 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22452.747838549396', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1382.3915700138118', 'spotUplRatio': '0.1018071423038507', 'stgyEq': '0', 'totalPnl': '1369.037278224332', 'totalPnlRatio': '0.1007245954494408', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '8026.954215406157', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1485.6333784670505', 'spotUplRatio': '0.2271151982146508', 'stgyEq': '0', 'totalPnl': '1596.039859183662', 'totalPnlRatio': '0.248182415559515', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4775.111780156604', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2233.651731039687', 'spotUplRatio': '-0.3186941216480617', 'stgyEq': '0', 'totalPnl': '-4166.743202223159', 'totalPnlRatio': '-0.4659819702325604', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.168349195192', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '826.7054186607298', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '27.169926708550417', 'spotUplRatio': '0.0339821396155171', 'stgyEq': '0', 'totalPnl': '26.369590880962846', 'totalPnlRatio': '0.0329481574759016', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0012012187', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0037902471144865', 'spotUplRatio': '-0.7593455019738383', 'stgyEq': '0', 'totalPnl': '-1774.5933611543524', 'totalPnlRatio': '-0.9999993231024565', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001038954', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061821', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.000004453328', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009478913113', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40236.688918665495', 'uTime': '1747924240698', 'upl': ''}], 'msg': ''}
2025-05-22 22:30:42 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 22:30:42 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 22:37:13 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:37:13 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:37:13 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:37:13 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:37:13 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:37:13 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:37:13 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:37:13 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:37:14 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.183372, px=2599.6, amount=476.6938512, target_price=2599.6, exec_price=2599.6
2025-05-22 22:37:14 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529305058655854592
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.312584, px=2559.31, amount=799.99935704, target_price=2559.31, exec_price=2559.31
2025-05-22 22:37:14 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529007158247809024
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.311, px=2479.38, amount=771.08718, target_price=2479.38, exec_price=2479.38
2025-05-22 22:37:14 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528337200090177536
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00054016, px=106915.2, amount=57.751314432, target_price=106915.2, exec_price=106915.2
2025-05-22 22:37:14 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528335930558242816
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.049088, px=173.18, amount=8.50105984, target_price=173.18, exec_price=173.18
2025-05-22 22:37:14 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527913174175834112
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.310917, px=2573.03, amount=799.9987685100001, target_price=2573.03, exec_price=2573.03
2025-05-22 22:37:14 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527912878729060352
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00594488, px=109336.5, amount=649.9923721199999, target_price=109336.5, exec_price=109336.5
2025-05-22 22:37:14 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527911763748839424
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00397331, px=104270.6, amount=414.299417686, target_price=104270.6, exec_price=104270.6
2025-05-22 22:37:14 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498995097967255553
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.166845, px=2483.5, amount=414.3595575, target_price=2483.5, exec_price=2483.5
2025-05-22 22:37:14 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993585501233152
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2484.11, amount=414.6228001, target_price=2484.11, exec_price=2484.11
2025-05-22 22:37:14 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993236199596032
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2483.3, amount=414.48760300000004, target_price=2483.3, exec_price=2483.3
2025-05-22 22:37:14 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498992505249849344
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=44.144234, px=0.9999, amount=44.1398195766, target_price=0.9999, exec_price=0.9999
2025-05-22 22:37:14 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2490237530801692672
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=2.844106, px=143.56, amount=408.29985736000003, target_price=143.56, exec_price=143.56
2025-05-22 22:37:14 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484603668386013185
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.23276, px=1771.91, amount=412.42977160000004, target_price=1771.91, exec_price=1771.91
2025-05-22 22:37:14 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484602891869347840
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0041897, px=95472.1, amount=399.99945737, target_price=95472.1, exec_price=95472.1
2025-05-22 22:37:14 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2478760405745786880
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.457076, px=1808.4, amount=826.5762384, target_price=1808.4, exec_price=1808.4
2025-05-22 22:37:14 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2454494340484423680
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0043575, px=94320.1, amount=410.99983575000005, target_price=94320.1, exec_price=94320.1
2025-05-22 22:37:14 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2452298944899178496
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.257895, px=1593.67, amount=410.99952465, target_price=1593.67, exec_price=1593.67
2025-05-22 22:37:14 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431973840864665600
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00485349, px=84681.2, amount=410.999357388, target_price=84681.2, exec_price=84681.2
2025-05-22 22:37:14 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431924785358823424
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.019312, px=1563.68, amount=30.19778816, target_price=1563.68, exec_price=1563.68
2025-05-22 22:37:14 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411658205454655488
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00227894, px=82237.3, amount=187.41387246200003, target_price=82237.3, exec_price=82237.3
2025-05-22 22:37:14 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411655065766453248
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.04975941, px=87704, amount=4364.09929464, target_price=87704, exec_price=87704
2025-05-22 22:37:14 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2359271973143961600
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=16.155958, px=185.69, amount=2999.9998410199996, target_price=185.69, exec_price=185.69
2025-05-22 22:37:14 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2256980159729491968
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.55068, px=190.81, amount=105.07525079999999, target_price=190.81, exec_price=190.81
2025-05-22 22:37:14 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:14 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2246674599176036352
2025-05-22 22:37:14 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:37:15 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.183372, px=2599.6, amount=476.6938512, target_price=2599.6, exec_price=2599.6
2025-05-22 22:37:15 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529305058655854592
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.312584, px=2559.31, amount=799.99935704, target_price=2559.31, exec_price=2559.31
2025-05-22 22:37:15 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529007158247809024
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.311, px=2479.38, amount=771.08718, target_price=2479.38, exec_price=2479.38
2025-05-22 22:37:15 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528337200090177536
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00054016, px=106915.2, amount=57.751314432, target_price=106915.2, exec_price=106915.2
2025-05-22 22:37:15 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528335930558242816
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.049088, px=173.18, amount=8.50105984, target_price=173.18, exec_price=173.18
2025-05-22 22:37:15 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527913174175834112
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.310917, px=2573.03, amount=799.9987685100001, target_price=2573.03, exec_price=2573.03
2025-05-22 22:37:15 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527912878729060352
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00594488, px=109336.5, amount=649.9923721199999, target_price=109336.5, exec_price=109336.5
2025-05-22 22:37:15 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527911763748839424
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00397331, px=104270.6, amount=414.299417686, target_price=104270.6, exec_price=104270.6
2025-05-22 22:37:15 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498995097967255553
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.166845, px=2483.5, amount=414.3595575, target_price=2483.5, exec_price=2483.5
2025-05-22 22:37:15 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993585501233152
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2484.11, amount=414.6228001, target_price=2484.11, exec_price=2484.11
2025-05-22 22:37:15 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993236199596032
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2483.3, amount=414.48760300000004, target_price=2483.3, exec_price=2483.3
2025-05-22 22:37:15 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498992505249849344
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=44.144234, px=0.9999, amount=44.1398195766, target_price=0.9999, exec_price=0.9999
2025-05-22 22:37:15 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2490237530801692672
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=2.844106, px=143.56, amount=408.29985736000003, target_price=143.56, exec_price=143.56
2025-05-22 22:37:15 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484603668386013185
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.23276, px=1771.91, amount=412.42977160000004, target_price=1771.91, exec_price=1771.91
2025-05-22 22:37:15 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484602891869347840
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0041897, px=95472.1, amount=399.99945737, target_price=95472.1, exec_price=95472.1
2025-05-22 22:37:15 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2478760405745786880
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.457076, px=1808.4, amount=826.5762384, target_price=1808.4, exec_price=1808.4
2025-05-22 22:37:15 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2454494340484423680
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0043575, px=94320.1, amount=410.99983575000005, target_price=94320.1, exec_price=94320.1
2025-05-22 22:37:15 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2452298944899178496
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.257895, px=1593.67, amount=410.99952465, target_price=1593.67, exec_price=1593.67
2025-05-22 22:37:15 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431973840864665600
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00485349, px=84681.2, amount=410.999357388, target_price=84681.2, exec_price=84681.2
2025-05-22 22:37:15 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431924785358823424
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.019312, px=1563.68, amount=30.19778816, target_price=1563.68, exec_price=1563.68
2025-05-22 22:37:15 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411658205454655488
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00227894, px=82237.3, amount=187.41387246200003, target_price=82237.3, exec_price=82237.3
2025-05-22 22:37:15 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411655065766453248
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.04975941, px=87704, amount=4364.09929464, target_price=87704, exec_price=87704
2025-05-22 22:37:15 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2359271973143961600
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=16.155958, px=185.69, amount=2999.9998410199996, target_price=185.69, exec_price=185.69
2025-05-22 22:37:15 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2256980159729491968
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.55068, px=190.81, amount=105.07525079999999, target_price=190.81, exec_price=190.81
2025-05-22 22:37:15 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:15 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2246674599176036352
2025-05-22 22:37:15 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:37:25 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:37:25 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:37:25 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:37:25 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:37:26 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.183372, px=2599.6, amount=476.6938512, target_price=2599.6, exec_price=2599.6
2025-05-22 22:37:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529305058655854592
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.312584, px=2559.31, amount=799.99935704, target_price=2559.31, exec_price=2559.31
2025-05-22 22:37:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529007158247809024
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.311, px=2479.38, amount=771.08718, target_price=2479.38, exec_price=2479.38
2025-05-22 22:37:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528337200090177536
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00054016, px=106915.2, amount=57.751314432, target_price=106915.2, exec_price=106915.2
2025-05-22 22:37:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528335930558242816
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.049088, px=173.18, amount=8.50105984, target_price=173.18, exec_price=173.18
2025-05-22 22:37:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527913174175834112
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.310917, px=2573.03, amount=799.9987685100001, target_price=2573.03, exec_price=2573.03
2025-05-22 22:37:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527912878729060352
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00594488, px=109336.5, amount=649.9923721199999, target_price=109336.5, exec_price=109336.5
2025-05-22 22:37:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527911763748839424
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00397331, px=104270.6, amount=414.299417686, target_price=104270.6, exec_price=104270.6
2025-05-22 22:37:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498995097967255553
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.166845, px=2483.5, amount=414.3595575, target_price=2483.5, exec_price=2483.5
2025-05-22 22:37:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993585501233152
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2484.11, amount=414.6228001, target_price=2484.11, exec_price=2484.11
2025-05-22 22:37:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993236199596032
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2483.3, amount=414.48760300000004, target_price=2483.3, exec_price=2483.3
2025-05-22 22:37:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498992505249849344
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=44.144234, px=0.9999, amount=44.1398195766, target_price=0.9999, exec_price=0.9999
2025-05-22 22:37:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2490237530801692672
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=2.844106, px=143.56, amount=408.29985736000003, target_price=143.56, exec_price=143.56
2025-05-22 22:37:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484603668386013185
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.23276, px=1771.91, amount=412.42977160000004, target_price=1771.91, exec_price=1771.91
2025-05-22 22:37:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484602891869347840
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0041897, px=95472.1, amount=399.99945737, target_price=95472.1, exec_price=95472.1
2025-05-22 22:37:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2478760405745786880
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.457076, px=1808.4, amount=826.5762384, target_price=1808.4, exec_price=1808.4
2025-05-22 22:37:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2454494340484423680
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0043575, px=94320.1, amount=410.99983575000005, target_price=94320.1, exec_price=94320.1
2025-05-22 22:37:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2452298944899178496
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.257895, px=1593.67, amount=410.99952465, target_price=1593.67, exec_price=1593.67
2025-05-22 22:37:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431973840864665600
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00485349, px=84681.2, amount=410.999357388, target_price=84681.2, exec_price=84681.2
2025-05-22 22:37:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431924785358823424
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.019312, px=1563.68, amount=30.19778816, target_price=1563.68, exec_price=1563.68
2025-05-22 22:37:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411658205454655488
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00227894, px=82237.3, amount=187.41387246200003, target_price=82237.3, exec_price=82237.3
2025-05-22 22:37:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411655065766453248
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.04975941, px=87704, amount=4364.09929464, target_price=87704, exec_price=87704
2025-05-22 22:37:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2359271973143961600
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=16.155958, px=185.69, amount=2999.9998410199996, target_price=185.69, exec_price=185.69
2025-05-22 22:37:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2256980159729491968
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.55068, px=190.81, amount=105.07525079999999, target_price=190.81, exec_price=190.81
2025-05-22 22:37:26 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:26 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2246674599176036352
2025-05-22 22:37:26 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:37:30 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:37:30 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:37:30 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.183372, px=2599.6, amount=476.6938512, target_price=2599.6, exec_price=2599.6
2025-05-22 22:37:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529305058655854592
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.312584, px=2559.31, amount=799.99935704, target_price=2559.31, exec_price=2559.31
2025-05-22 22:37:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529007158247809024
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.311, px=2479.38, amount=771.08718, target_price=2479.38, exec_price=2479.38
2025-05-22 22:37:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528337200090177536
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00054016, px=106915.2, amount=57.751314432, target_price=106915.2, exec_price=106915.2
2025-05-22 22:37:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528335930558242816
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.049088, px=173.18, amount=8.50105984, target_price=173.18, exec_price=173.18
2025-05-22 22:37:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527913174175834112
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.310917, px=2573.03, amount=799.9987685100001, target_price=2573.03, exec_price=2573.03
2025-05-22 22:37:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527912878729060352
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00594488, px=109336.5, amount=649.9923721199999, target_price=109336.5, exec_price=109336.5
2025-05-22 22:37:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527911763748839424
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00397331, px=104270.6, amount=414.299417686, target_price=104270.6, exec_price=104270.6
2025-05-22 22:37:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498995097967255553
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.166845, px=2483.5, amount=414.3595575, target_price=2483.5, exec_price=2483.5
2025-05-22 22:37:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993585501233152
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2484.11, amount=414.6228001, target_price=2484.11, exec_price=2484.11
2025-05-22 22:37:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993236199596032
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2483.3, amount=414.48760300000004, target_price=2483.3, exec_price=2483.3
2025-05-22 22:37:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498992505249849344
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=44.144234, px=0.9999, amount=44.1398195766, target_price=0.9999, exec_price=0.9999
2025-05-22 22:37:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2490237530801692672
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=2.844106, px=143.56, amount=408.29985736000003, target_price=143.56, exec_price=143.56
2025-05-22 22:37:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484603668386013185
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.23276, px=1771.91, amount=412.42977160000004, target_price=1771.91, exec_price=1771.91
2025-05-22 22:37:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484602891869347840
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0041897, px=95472.1, amount=399.99945737, target_price=95472.1, exec_price=95472.1
2025-05-22 22:37:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2478760405745786880
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.457076, px=1808.4, amount=826.5762384, target_price=1808.4, exec_price=1808.4
2025-05-22 22:37:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2454494340484423680
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0043575, px=94320.1, amount=410.99983575000005, target_price=94320.1, exec_price=94320.1
2025-05-22 22:37:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2452298944899178496
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.257895, px=1593.67, amount=410.99952465, target_price=1593.67, exec_price=1593.67
2025-05-22 22:37:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431973840864665600
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00485349, px=84681.2, amount=410.999357388, target_price=84681.2, exec_price=84681.2
2025-05-22 22:37:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431924785358823424
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.019312, px=1563.68, amount=30.19778816, target_price=1563.68, exec_price=1563.68
2025-05-22 22:37:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411658205454655488
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00227894, px=82237.3, amount=187.41387246200003, target_price=82237.3, exec_price=82237.3
2025-05-22 22:37:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411655065766453248
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.04975941, px=87704, amount=4364.09929464, target_price=87704, exec_price=87704
2025-05-22 22:37:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2359271973143961600
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=16.155958, px=185.69, amount=2999.9998410199996, target_price=185.69, exec_price=185.69
2025-05-22 22:37:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2256980159729491968
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.55068, px=190.81, amount=105.07525079999999, target_price=190.81, exec_price=190.81
2025-05-22 22:37:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:37:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2246674599176036352
2025-05-22 22:37:30 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:38:25 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 22:38:25 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 22:38:26 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 22:38:26 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 22:38:27 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:38:27 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:38:27 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:38:27 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:38:27 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 22:38:27 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22354.516173167176', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1316.9369326638287', 'spotUplRatio': '0.0969866922058585', 'stgyEq': '0', 'totalPnl': '1303.5826408743487', 'totalPnlRatio': '0.0959088815370205', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7983.854994757741', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1442.5341578186353', 'spotUplRatio': '0.2205264339997796', 'stgyEq': '0', 'totalPnl': '1552.9406385352459', 'totalPnlRatio': '0.2414805348842244', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4742.423069054868', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2266.3404421414234', 'spotUplRatio': '-0.323358098546343', 'stgyEq': '0', 'totalPnl': '-4199.431913324894', 'totalPnlRatio': '-0.469637667083622', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.209900463171', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '823.8440478151448', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '24.308555863630396', 'spotUplRatio': '0.0304033480866742', 'stgyEq': '0', 'totalPnl': '23.508220036042758', 'totalPnlRatio': '0.0293729447385875', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011908776', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038005882144865', 'spotUplRatio': '-0.7614172581241033', 'stgyEq': '0', 'totalPnl': '-1774.5933714954522', 'totalPnlRatio': '-0.9999993289297593', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001035358', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061641', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.00000444136', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009432952518', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40059.84949122026', 'uTime': '1747924707388', 'upl': ''}], 'msg': ''}
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22354.516173167176', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1316.9369326638287', 'spotUplRatio': '0.0969866922058585', 'stgyEq': '0', 'totalPnl': '1303.5826408743487', 'totalPnlRatio': '0.0959088815370205', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7983.854994757741', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1442.5341578186353', 'spotUplRatio': '0.2205264339997796', 'stgyEq': '0', 'totalPnl': '1552.9406385352459', 'totalPnlRatio': '0.2414805348842244', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4742.423069054868', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2266.3404421414234', 'spotUplRatio': '-0.323358098546343', 'stgyEq': '0', 'totalPnl': '-4199.431913324894', 'totalPnlRatio': '-0.469637667083622', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.209900463171', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '823.8440478151448', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '24.308555863630396', 'spotUplRatio': '0.0304033480866742', 'stgyEq': '0', 'totalPnl': '23.508220036042758', 'totalPnlRatio': '0.0293729447385875', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011908776', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038005882144865', 'spotUplRatio': '-0.7614172581241033', 'stgyEq': '0', 'totalPnl': '-1774.5933714954522', 'totalPnlRatio': '-0.9999993289297593', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001035358', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061641', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.00000444136', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009432952518', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40059.84949122026', 'uTime': '1747924707388', 'upl': ''}], 'msg': ''}
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 22:38:27 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 22:38:27 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 22:38:27 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22353.927455994508', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1316.5446531591617', 'spotUplRatio': '0.096957802522052', 'stgyEq': '0', 'totalPnl': '1303.1903613696813', 'totalPnlRatio': '0.0958800202378877', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7983.854994757741', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1442.5341578186353', 'spotUplRatio': '0.2205264339997796', 'stgyEq': '0', 'totalPnl': '1552.9406385352459', 'totalPnlRatio': '0.2414805348842244', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4742.423069054868', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2266.3404421414234', 'spotUplRatio': '-0.323358098546343', 'stgyEq': '0', 'totalPnl': '-4199.431913324894', 'totalPnlRatio': '-0.469637667083622', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.25145173115', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '823.7978966724742', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '24.262404720970437', 'spotUplRatio': '0.0303456256426606', 'stgyEq': '0', 'totalPnl': '23.46206889338282', 'totalPnlRatio': '0.029315280017018', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011908776', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038005882144865', 'spotUplRatio': '-0.7614172581241033', 'stgyEq': '0', 'totalPnl': '-1774.5933714954522', 'totalPnlRatio': '-0.9999993289297593', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.00010353', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061641', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.00000444136', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009432952518', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40059.256174167094', 'uTime': '1747924707595', 'upl': ''}], 'msg': ''}
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22353.927455994508', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1316.5446531591617', 'spotUplRatio': '0.096957802522052', 'stgyEq': '0', 'totalPnl': '1303.1903613696813', 'totalPnlRatio': '0.0958800202378877', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7983.854994757741', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1442.5341578186353', 'spotUplRatio': '0.2205264339997796', 'stgyEq': '0', 'totalPnl': '1552.9406385352459', 'totalPnlRatio': '0.2414805348842244', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4742.423069054868', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2266.3404421414234', 'spotUplRatio': '-0.323358098546343', 'stgyEq': '0', 'totalPnl': '-4199.431913324894', 'totalPnlRatio': '-0.469637667083622', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.25145173115', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '823.7978966724742', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '24.262404720970437', 'spotUplRatio': '0.0303456256426606', 'stgyEq': '0', 'totalPnl': '23.46206889338282', 'totalPnlRatio': '0.029315280017018', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011908776', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0038005882144865', 'spotUplRatio': '-0.7614172581241033', 'stgyEq': '0', 'totalPnl': '-1774.5933714954522', 'totalPnlRatio': '-0.9999993289297593', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.00010353', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061641', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.00000444136', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009432952518', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40059.256174167094', 'uTime': '1747924707595', 'upl': ''}], 'msg': ''}
2025-05-22 22:38:27 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:38:27 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.183372, px=2599.6, amount=476.6938512, target_price=2599.6, exec_price=2599.6
2025-05-22 22:38:27 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:27 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529305058655854592
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.312584, px=2559.31, amount=799.99935704, target_price=2559.31, exec_price=2559.31
2025-05-22 22:38:27 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529007158247809024
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.311, px=2479.38, amount=771.08718, target_price=2479.38, exec_price=2479.38
2025-05-22 22:38:27 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528337200090177536
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00054016, px=106915.2, amount=57.751314432, target_price=106915.2, exec_price=106915.2
2025-05-22 22:38:27 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528335930558242816
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.049088, px=173.18, amount=8.50105984, target_price=173.18, exec_price=173.18
2025-05-22 22:38:27 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527913174175834112
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.310917, px=2573.03, amount=799.9987685100001, target_price=2573.03, exec_price=2573.03
2025-05-22 22:38:27 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527912878729060352
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00594488, px=109336.5, amount=649.9923721199999, target_price=109336.5, exec_price=109336.5
2025-05-22 22:38:27 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527911763748839424
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00397331, px=104270.6, amount=414.299417686, target_price=104270.6, exec_price=104270.6
2025-05-22 22:38:27 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498995097967255553
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.166845, px=2483.5, amount=414.3595575, target_price=2483.5, exec_price=2483.5
2025-05-22 22:38:27 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993585501233152
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2484.11, amount=414.6228001, target_price=2484.11, exec_price=2484.11
2025-05-22 22:38:27 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993236199596032
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2483.3, amount=414.48760300000004, target_price=2483.3, exec_price=2483.3
2025-05-22 22:38:27 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498992505249849344
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=44.144234, px=0.9999, amount=44.1398195766, target_price=0.9999, exec_price=0.9999
2025-05-22 22:38:27 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2490237530801692672
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=2.844106, px=143.56, amount=408.29985736000003, target_price=143.56, exec_price=143.56
2025-05-22 22:38:27 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484603668386013185
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.23276, px=1771.91, amount=412.42977160000004, target_price=1771.91, exec_price=1771.91
2025-05-22 22:38:27 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484602891869347840
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0041897, px=95472.1, amount=399.99945737, target_price=95472.1, exec_price=95472.1
2025-05-22 22:38:27 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2478760405745786880
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.457076, px=1808.4, amount=826.5762384, target_price=1808.4, exec_price=1808.4
2025-05-22 22:38:27 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2454494340484423680
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0043575, px=94320.1, amount=410.99983575000005, target_price=94320.1, exec_price=94320.1
2025-05-22 22:38:27 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2452298944899178496
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.257895, px=1593.67, amount=410.99952465, target_price=1593.67, exec_price=1593.67
2025-05-22 22:38:27 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431973840864665600
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00485349, px=84681.2, amount=410.999357388, target_price=84681.2, exec_price=84681.2
2025-05-22 22:38:27 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431924785358823424
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.019312, px=1563.68, amount=30.19778816, target_price=1563.68, exec_price=1563.68
2025-05-22 22:38:27 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411658205454655488
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00227894, px=82237.3, amount=187.41387246200003, target_price=82237.3, exec_price=82237.3
2025-05-22 22:38:27 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411655065766453248
2025-05-22 22:38:27 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.04975941, px=87704, amount=4364.09929464, target_price=87704, exec_price=87704
2025-05-22 22:38:27 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2359271973143961600
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=16.155958, px=185.69, amount=2999.9998410199996, target_price=185.69, exec_price=185.69
2025-05-22 22:38:28 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2256980159729491968
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.55068, px=190.81, amount=105.07525079999999, target_price=190.81, exec_price=190.81
2025-05-22 22:38:28 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2246674599176036352
2025-05-22 22:38:28 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:38:28 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.183372, px=2599.6, amount=476.6938512, target_price=2599.6, exec_price=2599.6
2025-05-22 22:38:28 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529305058655854592
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.312584, px=2559.31, amount=799.99935704, target_price=2559.31, exec_price=2559.31
2025-05-22 22:38:28 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529007158247809024
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.311, px=2479.38, amount=771.08718, target_price=2479.38, exec_price=2479.38
2025-05-22 22:38:28 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528337200090177536
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00054016, px=106915.2, amount=57.751314432, target_price=106915.2, exec_price=106915.2
2025-05-22 22:38:28 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528335930558242816
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.049088, px=173.18, amount=8.50105984, target_price=173.18, exec_price=173.18
2025-05-22 22:38:28 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527913174175834112
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.310917, px=2573.03, amount=799.9987685100001, target_price=2573.03, exec_price=2573.03
2025-05-22 22:38:28 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527912878729060352
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00594488, px=109336.5, amount=649.9923721199999, target_price=109336.5, exec_price=109336.5
2025-05-22 22:38:28 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527911763748839424
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00397331, px=104270.6, amount=414.299417686, target_price=104270.6, exec_price=104270.6
2025-05-22 22:38:28 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498995097967255553
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.166845, px=2483.5, amount=414.3595575, target_price=2483.5, exec_price=2483.5
2025-05-22 22:38:28 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993585501233152
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2484.11, amount=414.6228001, target_price=2484.11, exec_price=2484.11
2025-05-22 22:38:28 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993236199596032
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2483.3, amount=414.48760300000004, target_price=2483.3, exec_price=2483.3
2025-05-22 22:38:28 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498992505249849344
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=44.144234, px=0.9999, amount=44.1398195766, target_price=0.9999, exec_price=0.9999
2025-05-22 22:38:28 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2490237530801692672
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=2.844106, px=143.56, amount=408.29985736000003, target_price=143.56, exec_price=143.56
2025-05-22 22:38:28 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484603668386013185
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.23276, px=1771.91, amount=412.42977160000004, target_price=1771.91, exec_price=1771.91
2025-05-22 22:38:28 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484602891869347840
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0041897, px=95472.1, amount=399.99945737, target_price=95472.1, exec_price=95472.1
2025-05-22 22:38:28 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2478760405745786880
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.457076, px=1808.4, amount=826.5762384, target_price=1808.4, exec_price=1808.4
2025-05-22 22:38:28 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2454494340484423680
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0043575, px=94320.1, amount=410.99983575000005, target_price=94320.1, exec_price=94320.1
2025-05-22 22:38:28 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2452298944899178496
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.257895, px=1593.67, amount=410.99952465, target_price=1593.67, exec_price=1593.67
2025-05-22 22:38:28 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431973840864665600
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00485349, px=84681.2, amount=410.999357388, target_price=84681.2, exec_price=84681.2
2025-05-22 22:38:28 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431924785358823424
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.019312, px=1563.68, amount=30.19778816, target_price=1563.68, exec_price=1563.68
2025-05-22 22:38:28 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411658205454655488
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00227894, px=82237.3, amount=187.41387246200003, target_price=82237.3, exec_price=82237.3
2025-05-22 22:38:28 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411655065766453248
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.04975941, px=87704, amount=4364.09929464, target_price=87704, exec_price=87704
2025-05-22 22:38:28 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2359271973143961600
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=16.155958, px=185.69, amount=2999.9998410199996, target_price=185.69, exec_price=185.69
2025-05-22 22:38:28 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2256980159729491968
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.55068, px=190.81, amount=105.07525079999999, target_price=190.81, exec_price=190.81
2025-05-22 22:38:28 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:28 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2246674599176036352
2025-05-22 22:38:28 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:38:29 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 22:38:29 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'Filter1,Filter2', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-22 22:38:29 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 22:38:29 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 22:38:30 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:38:30 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-22 22:38:30 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:38:30 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-22 22:38:30 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 22:38:30 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22352.245406929742', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1315.4238545744004', 'spotUplRatio': '0.0968752605683191', 'stgyEq': '0', 'totalPnl': '1302.06956278492', 'totalPnlRatio': '0.0957975593832229', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7983.7396983975395', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1442.4188614584327', 'spotUplRatio': '0.2205088081466719', 'stgyEq': '0', 'totalPnl': '1552.8253421750442', 'totalPnlRatio': '0.2414626064289823', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4742.423069054868', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2266.3404421414234', 'spotUplRatio': '-0.323358098546343', 'stgyEq': '0', 'totalPnl': '-4199.431913324894', 'totalPnlRatio': '-0.469637667083622', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.25145173115', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '823.7978966724742', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '24.262404720970437', 'spotUplRatio': '0.0303456256426606', 'stgyEq': '0', 'totalPnl': '23.46206889338282', 'totalPnlRatio': '0.029315280017018', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011917466', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0037997192144865', 'spotUplRatio': '-0.7612431609686189', 'stgyEq': '0', 'totalPnl': '-1774.5933706264523', 'totalPnlRatio': '-0.9999993284400701', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.00010353', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061641', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.00000444136', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009432952518', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40057.45882961113', 'uTime': '1747924710109', 'upl': ''}], 'msg': ''}
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22352.245406929742', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1315.4238545744004', 'spotUplRatio': '0.0968752605683191', 'stgyEq': '0', 'totalPnl': '1302.06956278492', 'totalPnlRatio': '0.0957975593832229', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7983.7396983975395', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1442.4188614584327', 'spotUplRatio': '0.2205088081466719', 'stgyEq': '0', 'totalPnl': '1552.8253421750442', 'totalPnlRatio': '0.2414626064289823', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4742.423069054868', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2266.3404421414234', 'spotUplRatio': '-0.323358098546343', 'stgyEq': '0', 'totalPnl': '-4199.431913324894', 'totalPnlRatio': '-0.469637667083622', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.25145173115', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '823.7978966724742', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '24.262404720970437', 'spotUplRatio': '0.0303456256426606', 'stgyEq': '0', 'totalPnl': '23.46206889338282', 'totalPnlRatio': '0.029315280017018', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011917466', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0037997192144865', 'spotUplRatio': '-0.7612431609686189', 'stgyEq': '0', 'totalPnl': '-1774.5933706264523', 'totalPnlRatio': '-0.9999993284400701', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.00010353', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061641', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.00000444136', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009432952518', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40057.45882961113', 'uTime': '1747924710109', 'upl': ''}], 'msg': ''}
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 22:38:30 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 22:38:30 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:38:30 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 200 OK"
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 成功获取历史订单，数量: 24
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.183372, px=2599.6, amount=476.6938512, target_price=2599.6, exec_price=2599.6
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 获取到 24 条历史订单记录
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.183372, px=2599.6, amount=476.6938512, target_price=2599.6, exec_price=2599.6
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529305058655854592
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529305058655854592
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.312584, px=2559.31, amount=799.99935704, target_price=2559.31, exec_price=2559.31
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.312584, px=2559.31, amount=799.99935704, target_price=2559.31, exec_price=2559.31
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529007158247809024
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2529007158247809024
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.311, px=2479.38, amount=771.08718, target_price=2479.38, exec_price=2479.38
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.311, px=2479.38, amount=771.08718, target_price=2479.38, exec_price=2479.38
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528337200090177536
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528337200090177536
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00054016, px=106915.2, amount=57.751314432, target_price=106915.2, exec_price=106915.2
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00054016, px=106915.2, amount=57.751314432, target_price=106915.2, exec_price=106915.2
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528335930558242816
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2528335930558242816
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.049088, px=173.18, amount=8.50105984, target_price=173.18, exec_price=173.18
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.049088, px=173.18, amount=8.50105984, target_price=173.18, exec_price=173.18
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527913174175834112
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527913174175834112
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.310917, px=2573.03, amount=799.9987685100001, target_price=2573.03, exec_price=2573.03
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.310917, px=2573.03, amount=799.9987685100001, target_price=2573.03, exec_price=2573.03
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527912878729060352
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527912878729060352
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00594488, px=109336.5, amount=649.9923721199999, target_price=109336.5, exec_price=109336.5
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00594488, px=109336.5, amount=649.9923721199999, target_price=109336.5, exec_price=109336.5
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527911763748839424
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2527911763748839424
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00397331, px=104270.6, amount=414.299417686, target_price=104270.6, exec_price=104270.6
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00397331, px=104270.6, amount=414.299417686, target_price=104270.6, exec_price=104270.6
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498995097967255553
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498995097967255553
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.166845, px=2483.5, amount=414.3595575, target_price=2483.5, exec_price=2483.5
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.166845, px=2483.5, amount=414.3595575, target_price=2483.5, exec_price=2483.5
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993585501233152
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993585501233152
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2484.11, amount=414.6228001, target_price=2484.11, exec_price=2484.11
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2484.11, amount=414.6228001, target_price=2484.11, exec_price=2484.11
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993236199596032
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498993236199596032
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2483.3, amount=414.48760300000004, target_price=2483.3, exec_price=2483.3
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.16691, px=2483.3, amount=414.48760300000004, target_price=2483.3, exec_price=2483.3
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498992505249849344
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=44.144234, px=0.9999, amount=44.1398195766, target_price=0.9999, exec_price=0.9999
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2498992505249849344
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=44.144234, px=0.9999, amount=44.1398195766, target_price=0.9999, exec_price=0.9999
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2490237530801692672
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2490237530801692672
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=2.844106, px=143.56, amount=408.29985736000003, target_price=143.56, exec_price=143.56
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=2.844106, px=143.56, amount=408.29985736000003, target_price=143.56, exec_price=143.56
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484603668386013185
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484603668386013185
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.23276, px=1771.91, amount=412.42977160000004, target_price=1771.91, exec_price=1771.91
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.23276, px=1771.91, amount=412.42977160000004, target_price=1771.91, exec_price=1771.91
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484602891869347840
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2484602891869347840
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0041897, px=95472.1, amount=399.99945737, target_price=95472.1, exec_price=95472.1
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0041897, px=95472.1, amount=399.99945737, target_price=95472.1, exec_price=95472.1
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2478760405745786880
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2478760405745786880
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.457076, px=1808.4, amount=826.5762384, target_price=1808.4, exec_price=1808.4
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.457076, px=1808.4, amount=826.5762384, target_price=1808.4, exec_price=1808.4
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2454494340484423680
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2454494340484423680
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0043575, px=94320.1, amount=410.99983575000005, target_price=94320.1, exec_price=94320.1
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.0043575, px=94320.1, amount=410.99983575000005, target_price=94320.1, exec_price=94320.1
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2452298944899178496
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2452298944899178496
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.257895, px=1593.67, amount=410.99952465, target_price=1593.67, exec_price=1593.67
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.257895, px=1593.67, amount=410.99952465, target_price=1593.67, exec_price=1593.67
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22352.329509382984', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1315.4798945036396', 'spotUplRatio': '0.0968793876660058', 'stgyEq': '0', 'totalPnl': '1302.125602714159', 'totalPnlRatio': '0.0958016824259562', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7983.732492375026', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1442.4116554359196', 'spotUplRatio': '0.2205077065308526', 'stgyEq': '0', 'totalPnl': '1552.8181361525303', 'totalPnlRatio': '0.2414614859005294', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4742.226149108473', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2266.537362087819', 'spotUplRatio': '-0.3233861947927181', 'stgyEq': '0', 'totalPnl': '-4199.62883327129', 'totalPnlRatio': '-0.4696596893538092', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.25145173115', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '823.7978966724742', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '24.262404720970437', 'spotUplRatio': '0.0303456256426606', 'stgyEq': '0', 'totalPnl': '23.46206889338282', 'totalPnlRatio': '0.029315280017018', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011919204', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0037995454144865', 'spotUplRatio': '-0.7612083415375219', 'stgyEq': '0', 'totalPnl': '-1774.5933704526524', 'totalPnlRatio': '-0.9999993283421322', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.00010353', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061641', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.00000444136', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009432952518', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40057.33880626926', 'uTime': '1747924710783', 'upl': ''}], 'msg': ''}
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431973840864665600
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431973840864665600
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22352.329509382984', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1315.4798945036396', 'spotUplRatio': '0.0968793876660058', 'stgyEq': '0', 'totalPnl': '1302.125602714159', 'totalPnlRatio': '0.0958016824259562', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7983.732492375026', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1442.4116554359196', 'spotUplRatio': '0.2205077065308526', 'stgyEq': '0', 'totalPnl': '1552.8181361525303', 'totalPnlRatio': '0.2414614859005294', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4742.226149108473', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2266.537362087819', 'spotUplRatio': '-0.3233861947927181', 'stgyEq': '0', 'totalPnl': '-4199.62883327129', 'totalPnlRatio': '-0.4696596893538092', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.25145173115', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '823.7978966724742', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '24.262404720970437', 'spotUplRatio': '0.0303456256426606', 'stgyEq': '0', 'totalPnl': '23.46206889338282', 'totalPnlRatio': '0.029315280017018', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011919204', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0037995454144865', 'spotUplRatio': '-0.7612083415375219', 'stgyEq': '0', 'totalPnl': '-1774.5933704526524', 'totalPnlRatio': '-0.9999993283421322', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.00010353', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061641', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.00000444136', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009432952518', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40057.33880626926', 'uTime': '1747924710783', 'upl': ''}], 'msg': ''}
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00485349, px=84681.2, amount=410.999357388, target_price=84681.2, exec_price=84681.2
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00485349, px=84681.2, amount=410.999357388, target_price=84681.2, exec_price=84681.2
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431924785358823424
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2431924785358823424
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.019312, px=1563.68, amount=30.19778816, target_price=1563.68, exec_price=1563.68
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.019312, px=1563.68, amount=30.19778816, target_price=1563.68, exec_price=1563.68
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411658205454655488
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411658205454655488
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00227894, px=82237.3, amount=187.41387246200003, target_price=82237.3, exec_price=82237.3
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.00227894, px=82237.3, amount=187.41387246200003, target_price=82237.3, exec_price=82237.3
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411655065766453248
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2411655065766453248
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.04975941, px=87704, amount=4364.09929464, target_price=87704, exec_price=87704
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.04975941, px=87704, amount=4364.09929464, target_price=87704, exec_price=87704
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2359271973143961600
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2359271973143961600
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=16.155958, px=185.69, amount=2999.9998410199996, target_price=185.69, exec_price=185.69
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=16.155958, px=185.69, amount=2999.9998410199996, target_price=185.69, exec_price=185.69
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2256980159729491968
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2256980159729491968
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.55068, px=190.81, amount=105.07525079999999, target_price=190.81, exec_price=190.81
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 处理订单数据: sz=0.55068, px=190.81, amount=105.07525079999999, target_price=190.81, exec_price=190.81
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.data_object_center.spot_algo_order_record - ERROR - 更新记录状态失败: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 445, in update_status_by_order
    result = session.query(cls).filter(cls.ordId == order.get('ordId')).update({
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3300, in update
    result: CursorResult[Any] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2251, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/bulk_persistence.py", line 1648, in orm_execute_statement
    return super().orm_execute_statement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/context.py", line 306, in orm_execute_statement
    result = conn.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1416, in execute
    return meth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/sql/elements.py", line 523, in _execute_on_connection
    return connection._execute_clauseelement(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1638, in _execute_clauseelement
    ret = self._execute_context(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1818, in _execute_context
    self._handle_dbapi_exception(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 2352, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/base.py", line 1812, in _execute_context
    context = constructor(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1475, in _init_compiled
    l_param: List[Any] = [
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/engine/default.py", line 1477, in <listcomp>
    flattened_processors[key](compiled_params[key])
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py", line 1116, in process
    raise TypeError(
sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
[SQL: UPDATE spot_algo_order_record SET exec_price=?, status=?, update_time=?, "cTime"=?, "uTime"=? WHERE spot_algo_order_record."ordId" = ?]
[parameters: [{}]]
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2246674599176036352
2025-05-22 22:38:30 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:38:30 - backend.service_center.okx_service.okx_spot_order_record_service - ERROR - 处理订单失败: 2246674599176036352
2025-05-22 22:38:30 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-22 22:38:31 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 22:38:31 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 22:38:31 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 22:38:32 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22352.245406929742', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1315.4238545744004', 'spotUplRatio': '0.0968752605683191', 'stgyEq': '0', 'totalPnl': '1302.06956278492', 'totalPnlRatio': '0.0957975593832229', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7983.7396983975395', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1442.4188614584327', 'spotUplRatio': '0.2205088081466719', 'stgyEq': '0', 'totalPnl': '1552.8253421750442', 'totalPnlRatio': '0.2414626064289823', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4742.226149108473', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2266.537362087819', 'spotUplRatio': '-0.3233861947927181', 'stgyEq': '0', 'totalPnl': '-4199.62883327129', 'totalPnlRatio': '-0.4696596893538092', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.209900463171', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '823.7517455298034', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '24.21625357831048', 'spotUplRatio': '0.0302879031986471', 'stgyEq': '0', 'totalPnl': '23.415917750722883', 'totalPnlRatio': '0.0292576152954485', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011915728', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0037998930144865', 'spotUplRatio': '-0.7612779803997157', 'stgyEq': '0', 'totalPnl': '-1774.5933708002522', 'totalPnlRatio': '-0.9999993285380079', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001035242', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061641', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.00000444136', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009432952518', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40057.17420707448', 'uTime': '1747924711186', 'upl': ''}], 'msg': ''}
2025-05-22 22:38:32 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22352.245406929742', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1315.4238545744004', 'spotUplRatio': '0.0968752605683191', 'stgyEq': '0', 'totalPnl': '1302.06956278492', 'totalPnlRatio': '0.0957975593832229', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7983.7396983975395', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1442.4188614584327', 'spotUplRatio': '0.2205088081466719', 'stgyEq': '0', 'totalPnl': '1552.8253421750442', 'totalPnlRatio': '0.2414626064289823', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4742.226149108473', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2266.537362087819', 'spotUplRatio': '-0.3233861947927181', 'stgyEq': '0', 'totalPnl': '-4199.62883327129', 'totalPnlRatio': '-0.4696596893538092', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.209900463171', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '823.7517455298034', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '24.21625357831048', 'spotUplRatio': '0.0302879031986471', 'stgyEq': '0', 'totalPnl': '23.415917750722883', 'totalPnlRatio': '0.0292576152954485', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011915728', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0037998930144865', 'spotUplRatio': '-0.7612779803997157', 'stgyEq': '0', 'totalPnl': '-1774.5933708002522', 'totalPnlRatio': '-0.9999993285380079', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001035242', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061641', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.00000444136', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009432952518', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40057.17420707448', 'uTime': '1747924711186', 'upl': ''}], 'msg': ''}
2025-05-22 22:38:32 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-22 22:38:32 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-22 22:38:32 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 200 OK"
2025-05-22 22:38:32 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22352.077202023265', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1315.3117747159245', 'spotUplRatio': '0.0968670063729458', 'stgyEq': '0', 'totalPnl': '1301.9574829264438', 'totalPnlRatio': '0.0957893132977564', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7983.7396983975395', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1442.4188614584327', 'spotUplRatio': '0.2205088081466719', 'stgyEq': '0', 'totalPnl': '1552.8253421750442', 'totalPnlRatio': '0.2414626064289823', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4742.423069054868', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2266.3404421414234', 'spotUplRatio': '-0.323358098546343', 'stgyEq': '0', 'totalPnl': '-4199.431913324894', 'totalPnlRatio': '-0.469637667083622', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.25145173115', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '823.7055943871326', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '24.170102435650392', 'spotUplRatio': '0.0302301807546334', 'stgyEq': '0', 'totalPnl': '23.36976660806272', 'totalPnlRatio': '0.0291999505738787', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011926156', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0037988502144865', 'spotUplRatio': '-0.7610690638131344', 'stgyEq': '0', 'totalPnl': '-1774.5933697574524', 'totalPnlRatio': '-0.9999993279503808', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001035184', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061641', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.00000444136', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009432952518', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40057.19832327671', 'uTime': '1747924712200', 'upl': ''}], 'msg': ''}
2025-05-22 22:38:32 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'code': '0', 'data': [{'adjEq': '', 'availEq': '', 'borrowFroz': '', 'details': [{'accAvgPx': '2425.393246445928', 'availBal': '8.410245323820142', 'availEq': '8.410245323820142', 'borrowFroz': '', 'cashBal': '8.410245323820142', 'ccy': 'ETH', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '8.410245323820142', 'eqUsd': '22352.077202023265', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '2423.0102506122316', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '5.603992923800001', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1315.3117747159245', 'spotUplRatio': '0.0968670063729458', 'stgyEq': '0', 'totalPnl': '1301.9574829264438', 'totalPnlRatio': '0.0957893132977564', 'twap': '0', 'uTime': '1747881564776', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '89243.60623208017', 'availBal': '0.0000000051269267', 'availEq': '0.0000000051269267', 'borrowFroz': '', 'cashBal': '0.0720602251269267', 'ccy': 'BTC', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.0720602251269267', 'eqUsd': '7983.7396983975395', 'fixedBal': '0', 'frozenBal': '0.07206022', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '90775.74799991591', 'ordFrozen': '0.07206022', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.0720602251269267', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '1442.4188614584327', 'spotUplRatio': '0.2205088081466719', 'stgyEq': '0', 'totalPnl': '1552.8253421750442', 'totalPnlRatio': '0.2414626064289823', 'twap': '0', 'uTime': '1747852682508', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '0.4540857920201727', 'availBal': '19691.9946396', 'availEq': '19691.9946396', 'borrowFroz': '', 'cashBal': '19691.9946396', 'ccy': 'DOGE', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '19691.9946396', 'eqUsd': '4742.423069054868', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '0.3559194301780827', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '19691.9946396', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-2266.3404421414234', 'spotUplRatio': '-0.323358098546343', 'stgyEq': '0', 'totalPnl': '-4199.431913324894', 'totalPnlRatio': '-0.469637667083622', 'twap': '0', 'uTime': '1735795115236', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '4155.1267979272125', 'availEq': '4155.1267979272125', 'borrowFroz': '', 'cashBal': '4155.1267979272125', 'ccy': 'USDT', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4155.1267979272125', 'eqUsd': '4155.25145173115', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1747887204742', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '173.4162539557839', 'availBal': '4.615114267072684', 'availEq': '4.615114267072684', 'borrowFroz': '', 'cashBal': '4.615114267072684', 'ccy': 'SOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '4.615114267072684', 'eqUsd': '823.7055943871326', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '173.2428377018281', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '4.615114265999999', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '24.170102435650392', 'spotUplRatio': '0.0302301807546334', 'stgyEq': '0', 'totalPnl': '23.36976660806272', 'totalPnlRatio': '0.0291999505738787', 'twap': '0', 'uTime': '1747840083386', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '2042111.1189563316', 'availBal': '0.000869', 'availEq': '0.000869', 'borrowFroz': '', 'cashBal': '0.000869', 'ccy': 'WLD', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000869', 'eqUsd': '0.0011926156', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '5.743919234161703', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '0.000869', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '-0.0037988502144865', 'spotUplRatio': '-0.7610690638131344', 'stgyEq': '0', 'totalPnl': '-1774.5933697574524', 'totalPnlRatio': '-0.9999993279503808', 'twap': '0', 'uTime': '1731514629197', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000058', 'availEq': '0.00000058', 'borrowFroz': '', 'cashBal': '0.00000058', 'ccy': 'OKSOL', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000058', 'eqUsd': '0.0001035184', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1746717261716', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000009', 'availEq': '0.000000009', 'borrowFroz': '', 'cashBal': '0.000000009', 'ccy': 'BNB', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000009', 'eqUsd': '0.0000061641', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1734446990187', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.000000176', 'availEq': '0.000000176', 'borrowFroz': '', 'cashBal': '0.000000176', 'ccy': 'AVAX', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.000000176', 'eqUsd': '0.00000444136', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1731514614720', 'upl': '0', 'uplLiab': ''}, {'accAvgPx': '', 'availBal': '0.00000018384238', 'availEq': '0.00000018384238', 'borrowFroz': '', 'cashBal': '0.00000018384238', 'ccy': 'ATOM', 'clSpotInUseAmt': '', 'collateralEnabled': False, 'collateralRestrict': False, 'crossLiab': '', 'disEq': '0', 'eq': '0.00000018384238', 'eqUsd': '0.0000009432952518', 'fixedBal': '0', 'frozenBal': '0', 'imr': '0', 'interest': '', 'isoEq': '0', 'isoLiab': '', 'isoUpl': '0', 'liab': '', 'maxLoan': '', 'maxSpotInUse': '', 'mgnRatio': '', 'mmr': '0', 'notionalLever': '0', 'openAvgPx': '', 'ordFrozen': '0', 'rewardBal': '0', 'smtSyncEq': '0', 'spotBal': '', 'spotCopyTradingEq': '0', 'spotInUseAmt': '', 'spotIsoBal': '0', 'spotUpl': '', 'spotUplRatio': '', 'stgyEq': '0', 'totalPnl': '', 'totalPnlRatio': '', 'twap': '0', 'uTime': '1733563456564', 'upl': '0', 'uplLiab': ''}], 'imr': '', 'isoEq': '0', 'mgnRatio': '', 'mmr': '', 'notionalUsd': '', 'notionalUsdForBorrow': '', 'notionalUsdForFutures': '', 'notionalUsdForOption': '', 'notionalUsdForSwap': '', 'ordFroz': '', 'totalEq': '40057.19832327671', 'uTime': '1747924712200', 'upl': ''}], 'msg': ''}
2025-05-24 12:37:56 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 12:37:56 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 12:37:56 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 12:37:56 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 12:37:56 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 12:37:56 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 12:37:56 - __main__ - INFO - 启动FastAPI服务器 - 主机: 127.0.0.1, 端口: 8000
2025-05-24 12:37:59 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 12:37:59 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 12:37:59 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 12:37:59 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 12:38:00 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 12:38:00 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 12:40:37 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 12:40:37 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 12:40:37 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-24 12:40:37 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-24 12:40:37 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-24 12:40:37 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-24 12:40:37 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-24 12:40:37 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-24 12:40:38 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 401 Unauthorized"
2025-05-24 12:40:38 - backend.service_center.okx_service.okx_spot_order_record_service - WARNING - 获取历史订单失败或没有数据
2025-05-24 12:40:38 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - No manual live spot orders.
2025-05-24 12:40:38 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-24 12:40:38 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 401 Unauthorized"
2025-05-24 12:40:38 - backend.service_center.okx_service.okx_spot_order_record_service - WARNING - 获取历史订单失败或没有数据
2025-05-24 12:40:38 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - No manual live spot orders.
2025-05-24 12:40:38 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-24 12:40:38 - backend.controller_center.record.record_controller - ERROR - Error processing request: This session is provisioning a new connection; concurrent operations are not permitted (Background on this error at: https://sqlalche.me/e/20/isce)
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/controller_center/record/record_controller.py", line 32, in list_spot_record
    page_result = RecordService.list_config_execute_records(request)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/controller_center/record/record_service.py", line 11, in list_config_execute_records
    return SpotAlgoOrderRecord.list_spot_algo_order_record_by_conditions(config_execute_history_request)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 397, in list_spot_algo_order_record_by_conditions
    total = session.query(cls).filter(*filters).count()
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3147, in count
    self._legacy_from_self(col).enable_eagerloads(False).scalar()
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 2836, in scalar
    ret = self.one()
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 2809, in one
    return self._iter().one()  # type: ignore
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 2858, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2241, in _execute_internal
    conn = self._connection_for_bind(bind)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2110, in _connection_for_bind
    return trans._connection_for_bind(engine, execution_options)
  File "<string>", line 2, in _connection_for_bind
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/state_changes.py", line 103, in _go
    self._raise_for_prerequisite_state(fn.__name__, current_state)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 990, in _raise_for_prerequisite_state
    raise sa_exc.InvalidRequestError(
sqlalchemy.exc.InvalidRequestError: This session is provisioning a new connection; concurrent operations are not permitted (Background on this error at: https://sqlalche.me/e/20/isce)
2025-05-24 12:41:04 - tvDatafeed.main - ERROR - error while signin
2025-05-24 12:41:04 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 12:41:08 - backend.backtest_center.backtest_core.backtest_system - INFO - 
信号统计:
2025-05-24 12:41:08 - backend.backtest_center.backtest_core.backtest_system - INFO - 总买入信号数: 119
2025-05-24 12:41:08 - backend.backtest_center.backtest_core.backtest_system - INFO - 总卖出信号数: 80
2025-05-24 12:41:08 - backend.backtest_center.backtest_core.backtest_system - INFO - 
=== 回测结果 ===
2025-05-24 12:41:08 - backend.backtest_center.backtest_core.backtest_system - INFO - 初始投资组合价值: $100000.00
2025-05-24 12:41:08 - backend.backtest_center.backtest_core.backtest_system - INFO - 最终投资组合价值: $101190.97
2025-05-24 12:41:08 - backend.backtest_center.backtest_core.backtest_system - INFO - 总收益率: 1.18%
2025-05-24 12:41:08 - backend.backtest_center.backtest_core.backtest_system - INFO - 年化收益率: 0.85%
2025-05-24 12:41:08 - backend.backtest_center.backtest_core.backtest_system - INFO - 夏普比率: -0.679
2025-05-24 12:41:08 - backend.backtest_center.backtest_core.backtest_system - INFO - 最大回撤: 40.06%
2025-05-24 12:41:08 - backend.backtest_center.backtest_core.backtest_system - INFO - 最大回撤金额: $404.40
2025-05-24 12:41:08 - backend.backtest_center.backtest_core.backtest_system - INFO - 
=== 交易统计 ===
2025-05-24 12:41:08 - backend.backtest_center.backtest_core.backtest_system - INFO - 总交易次数: 91
2025-05-24 12:41:08 - backend.backtest_center.backtest_core.backtest_system - INFO - 盈利交易次数: 33
2025-05-24 12:41:08 - backend.backtest_center.backtest_core.backtest_system - INFO - 亏损交易次数: 57
2025-05-24 12:41:08 - backend.backtest_center.backtest_core.backtest_system - INFO - 胜率: 36.26%
2025-05-24 12:41:08 - backend.backtest_center.backtest_core.backtest_system - INFO - 平均盈利: $91.42
2025-05-24 12:41:08 - backend.backtest_center.backtest_core.backtest_system - INFO - 平均亏损: $-32.02
2025-05-24 12:41:52 - tvDatafeed.main - ERROR - error while signin
2025-05-24 12:41:52 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 12:41:56 - backend.backtest_center.backtest_core.backtest_system - INFO - 
信号统计:
2025-05-24 12:41:56 - backend.backtest_center.backtest_core.backtest_system - INFO - 总买入信号数: 119
2025-05-24 12:41:56 - backend.backtest_center.backtest_core.backtest_system - INFO - 总卖出信号数: 80
2025-05-24 12:41:56 - backend.backtest_center.backtest_core.backtest_system - INFO - 
=== 回测结果 ===
2025-05-24 12:41:56 - backend.backtest_center.backtest_core.backtest_system - INFO - 初始投资组合价值: $100000.00
2025-05-24 12:41:56 - backend.backtest_center.backtest_core.backtest_system - INFO - 最终投资组合价值: $101190.97
2025-05-24 12:41:56 - backend.backtest_center.backtest_core.backtest_system - INFO - 总收益率: 1.18%
2025-05-24 12:41:56 - backend.backtest_center.backtest_core.backtest_system - INFO - 年化收益率: 0.85%
2025-05-24 12:41:56 - backend.backtest_center.backtest_core.backtest_system - INFO - 夏普比率: -0.679
2025-05-24 12:41:56 - backend.backtest_center.backtest_core.backtest_system - INFO - 最大回撤: 40.06%
2025-05-24 12:41:56 - backend.backtest_center.backtest_core.backtest_system - INFO - 最大回撤金额: $404.40
2025-05-24 12:41:56 - backend.backtest_center.backtest_core.backtest_system - INFO - 
=== 交易统计 ===
2025-05-24 12:41:56 - backend.backtest_center.backtest_core.backtest_system - INFO - 总交易次数: 91
2025-05-24 12:41:56 - backend.backtest_center.backtest_core.backtest_system - INFO - 盈利交易次数: 33
2025-05-24 12:41:56 - backend.backtest_center.backtest_core.backtest_system - INFO - 亏损交易次数: 57
2025-05-24 12:41:56 - backend.backtest_center.backtest_core.backtest_system - INFO - 胜率: 36.26%
2025-05-24 12:41:56 - backend.backtest_center.backtest_core.backtest_system - INFO - 平均盈利: $91.42
2025-05-24 12:41:56 - backend.backtest_center.backtest_core.backtest_system - INFO - 平均亏损: $-32.02
2025-05-24 13:02:51 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 13:02:51 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 13:02:51 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-24 13:02:51 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-24 13:02:51 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-24 13:02:51 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-24 13:02:51 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-24 13:02:51 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-24 13:02:51 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 401 Unauthorized"
2025-05-24 13:02:51 - backend.service_center.okx_service.okx_spot_order_record_service - WARNING - 获取历史订单失败或没有数据
2025-05-24 13:02:51 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - No manual live spot orders.
2025-05-24 13:02:51 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-24 13:02:51 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 401 Unauthorized"
2025-05-24 13:02:51 - backend.service_center.okx_service.okx_spot_order_record_service - WARNING - 获取历史订单失败或没有数据
2025-05-24 13:02:51 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - No manual live spot orders.
2025-05-24 13:02:51 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-24 13:02:56 - backend.service_center.okx_service.okx_balance_service - INFO - 初始化OKXBalanceService
2025-05-24 13:02:56 - backend.service_center.okx_service.okx_balance_service - INFO - OKXBalanceService初始化完成
2025-05-24 13:02:56 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 13:02:56 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 13:02:57 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 13:02:57 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 13:02:57 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 13:02:57 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 13:02:57 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 13:02:57 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 13:02:57 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 13:02:57 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 13:02:57 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 13:02:57 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 13:02:57 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 13:02:57 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 13:02:58 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-24 13:02:58 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-24 13:03:07 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-24 13:03:07 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-24 13:08:40 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-24 13:08:40 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-24 13:08:41 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-24 13:08:41 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-24 13:08:42 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 13:08:42 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 13:08:42 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 13:08:42 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 13:08:42 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 13:08:42 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 13:08:42 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 13:08:42 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 13:08:42 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 13:08:42 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 13:08:42 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 13:08:42 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 13:08:42 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 13:08:42 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 13:08:44 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 13:08:44 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-24 13:08:44 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 13:08:44 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-24 13:08:44 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-24 13:08:44 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-24 13:08:44 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-24 13:08:44 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-24 13:08:44 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 401 Unauthorized"
2025-05-24 13:08:44 - backend.service_center.okx_service.okx_spot_order_record_service - WARNING - 获取历史订单失败或没有数据
2025-05-24 13:08:44 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - No manual live spot orders.
2025-05-24 13:08:44 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-24 13:08:44 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 401 Unauthorized"
2025-05-24 13:08:44 - backend.service_center.okx_service.okx_spot_order_record_service - WARNING - 获取历史订单失败或没有数据
2025-05-24 13:08:44 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - No manual live spot orders.
2025-05-24 13:08:44 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-24 13:10:29 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 13:10:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-24 13:10:29 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-24 13:10:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-24 13:10:29 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 13:10:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-24 13:10:29 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-24 13:10:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-24 13:10:29 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 401 Unauthorized"
2025-05-24 13:10:29 - backend.service_center.okx_service.okx_spot_order_record_service - WARNING - 获取历史订单失败或没有数据
2025-05-24 13:10:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - No manual live spot orders.
2025-05-24 13:10:29 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-24 13:10:29 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 401 Unauthorized"
2025-05-24 13:10:29 - backend.service_center.okx_service.okx_spot_order_record_service - WARNING - 获取历史订单失败或没有数据
2025-05-24 13:10:29 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - No manual live spot orders.
2025-05-24 13:10:29 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-24 13:11:22 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 13:11:22 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 13:11:22 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 13:11:22 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 13:11:22 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 13:11:22 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 13:11:22 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 13:11:22 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 13:11:22 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 13:11:22 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 13:11:22 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 13:11:22 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 13:11:22 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 13:11:22 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 13:12:45 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-24 13:12:45 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-24 13:12:46 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 13:12:46 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 13:12:46 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 13:12:46 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 13:12:46 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 13:12:46 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 13:12:46 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 13:12:46 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 13:12:46 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 13:12:46 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 13:12:46 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 13:12:46 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 13:12:46 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 13:12:46 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 13:12:46 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 13:12:46 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-24 13:12:46 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-24 13:12:46 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-24 13:12:46 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 13:12:46 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-24 13:12:46 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-24 13:12:46 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-24 13:12:46 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 401 Unauthorized"
2025-05-24 13:12:46 - backend.service_center.okx_service.okx_spot_order_record_service - WARNING - 获取历史订单失败或没有数据
2025-05-24 13:12:46 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - No manual live spot orders.
2025-05-24 13:12:46 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-24 13:12:46 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 401 Unauthorized"
2025-05-24 13:12:46 - backend.service_center.okx_service.okx_spot_order_record_service - WARNING - 获取历史订单失败或没有数据
2025-05-24 13:12:46 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - No manual live spot orders.
2025-05-24 13:12:46 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-24 13:13:59 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 13:13:59 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 13:13:59 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 13:13:59 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 13:13:59 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 13:13:59 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 13:13:59 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 13:13:59 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 13:13:59 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 13:13:59 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 13:13:59 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 13:13:59 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 13:13:59 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 13:13:59 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 13:14:03 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 13:14:03 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 13:14:03 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 13:14:03 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 13:14:03 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 13:14:03 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 13:14:03 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 13:14:03 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 13:14:03 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 13:14:03 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 13:14:03 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 13:14:03 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 13:14:03 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 13:14:03 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 13:14:04 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 13:14:04 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 13:14:04 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 13:14:04 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 13:14:04 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 13:14:04 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 13:14:04 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 13:14:05 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-24 13:14:05 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 10, 'name': '测试2', 'trade_pair': 'ETH-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 286, 'loss_per_trans': 0, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy', 'schedule_config': {'date': '1,2,3,4', 'time': '0-9'}, 'stop_loss_config': {'stop_limit': '20'}, 'switch': 1, 'gmt_create': '2024-12-07 09:11:14', 'gmt_modified': '2025-01-02 23:31:57'}, {'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 6, 'page_size': 10, 'page_num': 1}}
2025-05-24 13:34:51 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 9, 'name': '测试', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 87, 'loss_per_trans': 23, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '2,3,4', 'time': '0-9'}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-12-07 00:16:06', 'gmt_modified': '2025-01-04 21:11:36'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 5, 'page_size': 10, 'page_num': 1}}
2025-05-24 13:34:54 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 7, 'name': '测试策略1', 'trade_pair': 'ETH-USDT', 'time_frame': '5m', 'side': 'short', 'entry_per_trans': 12, 'loss_per_trans': 12, 'entry_st_code': 'Strategy2', 'exit_st_code': 'Exit2', 'filter_st_code': 'Filter3', 'schedule_config': {'date': '1,2,3,4', 'time': '0-1'}, 'stop_loss_config': {'stop_limit': '2'}, 'switch': 0, 'gmt_create': '2024-11-10 19:27:25', 'gmt_modified': '2025-01-04 21:11:28'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 4, 'page_size': 10, 'page_num': 1}}
2025-05-24 13:34:56 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}, {'id': 1, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 0, 'gmt_create': '2024-03-02 22:09:19', 'gmt_modified': '2024-11-30 10:22:37'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 13:35:04 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT-SWAP', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 100, 'loss_per_trans': 100, 'entry_st_code': 'dbb_strategy', 'exit_st_code': '10day_exist', 'filter_st_code': None, 'schedule_config': {}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-01-02 23:32:02'}], 'total_count': 2, 'page_size': 10, 'page_num': 1}}
2025-05-24 13:35:42 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 2, 'page_size': 10, 'page_num': 1}}
2025-05-24 13:35:42 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 2, 'page_size': 10, 'page_num': 1}}
2025-05-24 13:35:56 - tvDatafeed.main - ERROR - error while signin
2025-05-24 13:35:56 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 13:36:00 - backend.backtest_center.backtest_core.backtest_system - INFO - 
信号统计:
2025-05-24 13:36:00 - backend.backtest_center.backtest_core.backtest_system - INFO - 总买入信号数: 116
2025-05-24 13:36:00 - backend.backtest_center.backtest_core.backtest_system - INFO - 总卖出信号数: 77
2025-05-24 13:38:25 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 13:38:25 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 13:38:25 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 13:38:25 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 13:38:26 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 13:38:26 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 13:38:33 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 13:38:33 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 13:38:33 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 13:38:33 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 13:38:33 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 13:38:33 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 13:39:14 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 13:39:14 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 13:39:14 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 13:39:14 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 13:39:14 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 13:39:14 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 13:39:33 - tvDatafeed.main - ERROR - error while signin
2025-05-24 13:39:33 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 13:39:36 - backend.backtest_center.backtest_core.backtest_system - INFO - 
信号统计:
2025-05-24 13:39:36 - backend.backtest_center.backtest_core.backtest_system - INFO - 总买入信号数: 116
2025-05-24 13:39:36 - backend.backtest_center.backtest_core.backtest_system - INFO - 总卖出信号数: 77
2025-05-24 13:39:37 - backend.backtest_center.backtest_core.backtest_system - INFO - 
=== 回测结果 ===
2025-05-24 13:39:37 - backend.backtest_center.backtest_core.backtest_system - INFO - 初始投资组合价值: $100000.00
2025-05-24 13:39:37 - backend.backtest_center.backtest_core.backtest_system - INFO - 最终投资组合价值: $54137596367931888951884193083520146193186189407805238515674013048537874432.00
2025-05-24 13:39:37 - backend.backtest_center.backtest_core.backtest_system - INFO - 总收益率: 15826.47%
2025-05-24 13:39:37 - backend.backtest_center.backtest_core.backtest_system - INFO - 年化收益率: 2223962528242653323225669055115135737314731880349696.00%
2025-05-24 13:39:37 - backend.backtest_center.backtest_core.backtest_system - INFO - 夏普比率: 1.000
2025-05-24 13:39:37 - backend.backtest_center.backtest_core.backtest_system - INFO - 最大回撤: 350896805.83%
2025-05-24 13:39:37 - backend.backtest_center.backtest_core.backtest_system - INFO - 最大回撤金额: $48903176526006334681078653763179752767539449285032550453170873598168006656.00
2025-05-24 13:39:37 - backend.backtest_center.backtest_core.backtest_system - INFO - 
=== 交易统计 ===
2025-05-24 13:39:37 - backend.backtest_center.backtest_core.backtest_system - INFO - 总交易次数: 66
2025-05-24 13:39:37 - backend.backtest_center.backtest_core.backtest_system - INFO - 盈利交易次数: 22
2025-05-24 13:39:37 - backend.backtest_center.backtest_core.backtest_system - INFO - 亏损交易次数: 43
2025-05-24 13:39:37 - backend.backtest_center.backtest_core.backtest_system - INFO - 胜率: 33.33%
2025-05-24 13:39:37 - backend.backtest_center.backtest_core.backtest_system - INFO - 平均盈利: $67.15
2025-05-24 13:39:37 - backend.backtest_center.backtest_core.backtest_system - INFO - 平均亏损: $-34.87
2025-05-24 13:40:11 - tvDatafeed.main - ERROR - error while signin
2025-05-24 13:40:11 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 13:40:16 - backend.backtest_center.backtest_core.backtest_system - INFO - 
信号统计:
2025-05-24 13:40:16 - backend.backtest_center.backtest_core.backtest_system - INFO - 总买入信号数: 116
2025-05-24 13:40:16 - backend.backtest_center.backtest_core.backtest_system - INFO - 总卖出信号数: 77
2025-05-24 13:40:16 - backend.backtest_center.backtest_core.backtest_system - INFO - 
=== 回测结果 ===
2025-05-24 13:40:16 - backend.backtest_center.backtest_core.backtest_system - INFO - 初始投资组合价值: $100000.00
2025-05-24 13:40:16 - backend.backtest_center.backtest_core.backtest_system - INFO - 最终投资组合价值: $54137596367931888951884193083520146193186189407805238515674013048537874432.00
2025-05-24 13:40:16 - backend.backtest_center.backtest_core.backtest_system - INFO - 总收益率: 15826.47%
2025-05-24 13:40:16 - backend.backtest_center.backtest_core.backtest_system - INFO - 年化收益率: 2223962528242653323225669055115135737314731880349696.00%
2025-05-24 13:40:16 - backend.backtest_center.backtest_core.backtest_system - INFO - 夏普比率: 1.000
2025-05-24 13:40:16 - backend.backtest_center.backtest_core.backtest_system - INFO - 最大回撤: 350896805.83%
2025-05-24 13:40:16 - backend.backtest_center.backtest_core.backtest_system - INFO - 最大回撤金额: $48903176526006334681078653763179752767539449285032550453170873598168006656.00
2025-05-24 13:40:16 - backend.backtest_center.backtest_core.backtest_system - INFO - 
=== 交易统计 ===
2025-05-24 13:40:16 - backend.backtest_center.backtest_core.backtest_system - INFO - 总交易次数: 66
2025-05-24 13:40:16 - backend.backtest_center.backtest_core.backtest_system - INFO - 盈利交易次数: 22
2025-05-24 13:40:16 - backend.backtest_center.backtest_core.backtest_system - INFO - 亏损交易次数: 43
2025-05-24 13:40:16 - backend.backtest_center.backtest_core.backtest_system - INFO - 胜率: 33.33%
2025-05-24 13:40:16 - backend.backtest_center.backtest_core.backtest_system - INFO - 平均盈利: $67.15
2025-05-24 13:40:16 - backend.backtest_center.backtest_core.backtest_system - INFO - 平均亏损: $-34.87
2025-05-24 13:40:20 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 13:40:20 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 13:40:20 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 13:40:20 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 13:40:20 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 13:40:20 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 13:42:12 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 13:42:12 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 13:42:12 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 13:42:12 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 13:42:12 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 13:42:12 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 13:42:39 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 13:42:39 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 13:42:39 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 13:42:39 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 13:42:39 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 13:42:39 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 13:42:48 - tvDatafeed.main - ERROR - error while signin
2025-05-24 13:42:48 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 13:42:52 - backend.backtest_center.backtest_core.backtest_system - INFO - 
信号统计:
2025-05-24 13:42:52 - backend.backtest_center.backtest_core.backtest_system - INFO - 总买入信号数: 116
2025-05-24 13:42:52 - backend.backtest_center.backtest_core.backtest_system - INFO - 总卖出信号数: 77
2025-05-24 13:42:52 - backend.backtest_center.backtest_core.backtest_system - INFO - 
=== 回测结果 ===
2025-05-24 13:42:52 - backend.backtest_center.backtest_core.backtest_system - INFO - 初始投资组合价值: $100000.00
2025-05-24 13:42:52 - backend.backtest_center.backtest_core.backtest_system - INFO - 最终投资组合价值: $54137596367931888951884193083520146193186189407805238515674013048537874432.00
2025-05-24 13:42:52 - backend.backtest_center.backtest_core.backtest_system - INFO - 总收益率: 15826.47%
2025-05-24 13:42:52 - backend.backtest_center.backtest_core.backtest_system - INFO - 年化收益率: 2223962528242653323225669055115135737314731880349696.00%
2025-05-24 13:42:52 - backend.backtest_center.backtest_core.backtest_system - INFO - 夏普比率: 1.000
2025-05-24 13:42:52 - backend.backtest_center.backtest_core.backtest_system - INFO - 最大回撤: 350896805.83%
2025-05-24 13:42:52 - backend.backtest_center.backtest_core.backtest_system - INFO - 最大回撤金额: $48903176526006334681078653763179752767539449285032550453170873598168006656.00
2025-05-24 13:42:52 - backend.backtest_center.backtest_core.backtest_system - INFO - 
=== 交易统计 ===
2025-05-24 13:42:52 - backend.backtest_center.backtest_core.backtest_system - INFO - 总交易次数: 66
2025-05-24 13:42:52 - backend.backtest_center.backtest_core.backtest_system - INFO - 盈利交易次数: 22
2025-05-24 13:42:52 - backend.backtest_center.backtest_core.backtest_system - INFO - 亏损交易次数: 43
2025-05-24 13:42:52 - backend.backtest_center.backtest_core.backtest_system - INFO - 胜率: 33.33%
2025-05-24 13:42:52 - backend.backtest_center.backtest_core.backtest_system - INFO - 平均盈利: $67.15
2025-05-24 13:42:52 - backend.backtest_center.backtest_core.backtest_system - INFO - 平均亏损: $-34.87
2025-05-24 13:45:54 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 13:45:54 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 13:45:54 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 13:45:54 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 13:45:54 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 13:45:54 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 13:47:06 - tvDatafeed.main - ERROR - error while signin
2025-05-24 13:47:06 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 13:47:30 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 2, 'page_size': 10, 'page_num': 1}}
2025-05-24 13:47:30 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 2, 'page_size': 10, 'page_num': 1}}
2025-05-24 13:47:31 - backend.service_center.okx_service.okx_balance_service - INFO - 初始化OKXBalanceService
2025-05-24 13:47:31 - backend.service_center.okx_service.okx_balance_service - INFO - OKXBalanceService初始化完成
2025-05-24 13:47:31 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 13:47:31 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 13:47:31 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 13:47:31 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 13:47:31 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 13:47:31 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 13:47:31 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 13:47:31 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 13:47:31 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 13:47:31 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 13:47:31 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 13:47:31 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 13:47:31 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 13:47:31 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 13:47:32 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 2, 'page_size': 10, 'page_num': 1}}
2025-05-24 13:47:33 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 2, 'page_size': 10, 'page_num': 1}}
2025-05-24 13:49:00 - backend.controller_center.strategy.strategy_controller - INFO - 收到策略请求: name='SOL双布林带' id=None trade_pair='SOL-USDT' time_frame='4h' side='long' entry_per_trans='' loss_per_trans='200' entry_st_code='dbb_entry_long_strategy' exit_st_code='dbb_exit_long_strategy' filter_st_code='sma_perfect_order_filter_strategy' stop_loss_config={} schedule_config={'date': '1,2,3,4,5,6,7', 'time': '0-23'}
2025-05-24 13:49:00 - backend.controller_center.strategy.strategy_controller - INFO - 策略创建成功: 11
2025-05-24 13:49:00 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 13:49:00 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 13:54:52 - tvDatafeed.main - ERROR - error while signin
2025-05-24 13:54:52 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 13:55:16 - tvDatafeed.main - ERROR - error while signin
2025-05-24 13:55:16 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 13:55:21 - tvDatafeed.main - ERROR - error while signin
2025-05-24 13:55:21 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 13:55:40 - tvDatafeed.main - ERROR - error while signin
2025-05-24 13:55:40 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 13:57:31 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 13:57:31 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 13:57:31 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 13:57:31 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 13:57:31 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 13:57:31 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 13:57:41 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 13:57:41 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 13:57:41 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 13:57:41 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 13:57:41 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 13:57:41 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 13:57:49 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 13:57:49 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 13:57:49 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 13:57:49 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 13:57:50 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 13:57:50 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 13:57:59 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 13:57:59 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 13:57:59 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 13:57:59 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 13:57:59 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 13:57:59 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 13:58:05 - tvDatafeed.main - ERROR - error while signin
2025-05-24 13:58:05 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 13:58:10 - backend.backtest_center.backtest_core.backtest_system - INFO - 
信号统计:
2025-05-24 13:58:10 - backend.backtest_center.backtest_core.backtest_system - INFO - 总买入信号数: 232
2025-05-24 13:58:10 - backend.backtest_center.backtest_core.backtest_system - INFO - 总卖出信号数: 143
2025-05-24 13:58:10 - backend.backtest_center.backtest_core.backtest_system - INFO - 
=== 回测结果 ===
2025-05-24 13:58:10 - backend.backtest_center.backtest_core.backtest_system - INFO - 初始投资组合价值: $100000.00
2025-05-24 13:58:10 - backend.backtest_center.backtest_core.backtest_system - INFO - 最终投资组合价值: $nan
2025-05-24 13:58:10 - backend.backtest_center.backtest_core.backtest_system - INFO - 总收益率: nan%
2025-05-24 13:58:10 - backend.backtest_center.backtest_core.backtest_system - INFO - 年化收益率: nan%
2025-05-24 13:58:10 - backend.backtest_center.backtest_core.backtest_system - INFO - 夏普比率: nan
2025-05-24 13:58:10 - backend.backtest_center.backtest_core.backtest_system - INFO - 最大回撤: 1319091515.45%
2025-05-24 13:58:10 - backend.backtest_center.backtest_core.backtest_system - INFO - 最大回撤金额: $1211144208740982554925522931167693415781827207004277176283234518484749642298833295366318879841178930544679645700824850029876303563628278999041795329482054851305924792803121579722467625293877262107910890243896580851141920838055585078765604022163869810573379343156778539156746617766965238344815877947954036736.00
2025-05-24 13:58:10 - backend.backtest_center.backtest_core.backtest_system - INFO - 
=== 交易统计 ===
2025-05-24 13:58:10 - backend.backtest_center.backtest_core.backtest_system - INFO - 总交易次数: 111
2025-05-24 13:58:10 - backend.backtest_center.backtest_core.backtest_system - INFO - 盈利交易次数: 29
2025-05-24 13:58:10 - backend.backtest_center.backtest_core.backtest_system - INFO - 亏损交易次数: 81
2025-05-24 13:58:10 - backend.backtest_center.backtest_core.backtest_system - INFO - 胜率: 26.13%
2025-05-24 13:58:10 - backend.backtest_center.backtest_core.backtest_system - INFO - 平均盈利: $206.36
2025-05-24 13:58:10 - backend.backtest_center.backtest_core.backtest_system - INFO - 平均亏损: $-64.41
2025-05-24 14:11:55 - tvDatafeed.main - ERROR - error while signin
2025-05-24 14:11:55 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 14:11:59 - backend.backtest_center.backtest_core.backtest_system - INFO - 
信号统计:
2025-05-24 14:11:59 - backend.backtest_center.backtest_core.backtest_system - INFO - 总买入信号数: 232
2025-05-24 14:11:59 - backend.backtest_center.backtest_core.backtest_system - INFO - 总卖出信号数: 143
2025-05-24 14:11:59 - backend.backtest_center.backtest_core.backtest_system - INFO - 
=== 回测结果 ===
2025-05-24 14:11:59 - backend.backtest_center.backtest_core.backtest_system - INFO - 初始投资组合价值: $100000.00
2025-05-24 14:11:59 - backend.backtest_center.backtest_core.backtest_system - INFO - 最终投资组合价值: $nan
2025-05-24 14:11:59 - backend.backtest_center.backtest_core.backtest_system - INFO - 总收益率: nan%
2025-05-24 14:11:59 - backend.backtest_center.backtest_core.backtest_system - INFO - 年化收益率: nan%
2025-05-24 14:11:59 - backend.backtest_center.backtest_core.backtest_system - INFO - 夏普比率: nan
2025-05-24 14:11:59 - backend.backtest_center.backtest_core.backtest_system - INFO - 最大回撤: 1319091515.45%
2025-05-24 14:11:59 - backend.backtest_center.backtest_core.backtest_system - INFO - 最大回撤金额: $1211144208740982554925522931167693415781827207004277176283234518484749642298833295366318879841178930544679645700824850029876303563628278999041795329482054851305924792803121579722467625293877262107910890243896580851141920838055585078765604022163869810573379343156778539156746617766965238344815877947954036736.00
2025-05-24 14:11:59 - backend.backtest_center.backtest_core.backtest_system - INFO - 
=== 交易统计 ===
2025-05-24 14:11:59 - backend.backtest_center.backtest_core.backtest_system - INFO - 总交易次数: 111
2025-05-24 14:11:59 - backend.backtest_center.backtest_core.backtest_system - INFO - 盈利交易次数: 29
2025-05-24 14:11:59 - backend.backtest_center.backtest_core.backtest_system - INFO - 亏损交易次数: 81
2025-05-24 14:11:59 - backend.backtest_center.backtest_core.backtest_system - INFO - 胜率: 26.13%
2025-05-24 14:11:59 - backend.backtest_center.backtest_core.backtest_system - INFO - 平均盈利: $206.36
2025-05-24 14:11:59 - backend.backtest_center.backtest_core.backtest_system - INFO - 平均亏损: $-64.41
2025-05-24 14:12:44 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 14:12:44 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 14:12:49 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 14:12:49 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 14:12:49 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 14:12:49 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 14:12:49 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 14:12:49 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 14:12:49 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 14:12:49 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 14:12:50 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 14:12:50 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-24 14:12:50 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-24 14:12:50 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-24 14:12:50 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 14:12:50 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-24 14:12:50 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-24 14:12:50 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-24 14:12:50 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 401 Unauthorized"
2025-05-24 14:12:50 - backend.service_center.okx_service.okx_spot_order_record_service - WARNING - 获取历史订单失败或没有数据
2025-05-24 14:12:50 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - No manual live spot orders.
2025-05-24 14:12:50 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-24 14:12:50 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 401 Unauthorized"
2025-05-24 14:12:50 - backend.service_center.okx_service.okx_spot_order_record_service - WARNING - 获取历史订单失败或没有数据
2025-05-24 14:12:50 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - No manual live spot orders.
2025-05-24 14:12:50 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-24 14:12:52 - backend.service_center.okx_service.okx_balance_service - INFO - 初始化OKXBalanceService
2025-05-24 14:12:52 - backend.service_center.okx_service.okx_balance_service - INFO - OKXBalanceService初始化完成
2025-05-24 14:12:52 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 14:12:52 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 14:12:52 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 14:12:52 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 14:12:52 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 14:12:52 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 14:12:52 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 14:12:52 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 14:12:52 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 14:12:52 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 14:12:52 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 14:12:52 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 14:12:52 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 14:12:52 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 14:12:58 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 14:12:58 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 14:12:58 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 14:12:58 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 14:12:58 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 14:12:58 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 14:12:58 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 14:12:58 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 14:12:58 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-24 14:12:58 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-24 14:12:58 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-24 14:12:58 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-24 14:12:58 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-24 14:12:58 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-24 14:12:59 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 401 Unauthorized"
2025-05-24 14:12:59 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 401 Unauthorized"
2025-05-24 14:12:59 - backend.service_center.okx_service.okx_spot_order_record_service - WARNING - 获取历史订单失败或没有数据
2025-05-24 14:12:59 - backend.service_center.okx_service.okx_spot_order_record_service - WARNING - 获取历史订单失败或没有数据
2025-05-24 14:12:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - No manual live spot orders.
2025-05-24 14:12:59 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - No manual live spot orders.
2025-05-24 14:12:59 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-24 14:12:59 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-24 14:12:59 - backend.controller_center.record.record_controller - ERROR - Error processing request: This session is provisioning a new connection; concurrent operations are not permitted (Background on this error at: https://sqlalche.me/e/20/isce)
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/controller_center/record/record_controller.py", line 32, in list_spot_record
    page_result = RecordService.list_config_execute_records(request)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/controller_center/record/record_service.py", line 11, in list_config_execute_records
    return SpotAlgoOrderRecord.list_spot_algo_order_record_by_conditions(config_execute_history_request)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 397, in list_spot_algo_order_record_by_conditions
    total = session.query(cls).filter(*filters).count()
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3147, in count
    self._legacy_from_self(col).enable_eagerloads(False).scalar()
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 2836, in scalar
    ret = self.one()
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 2809, in one
    return self._iter().one()  # type: ignore
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 2858, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2241, in _execute_internal
    conn = self._connection_for_bind(bind)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2110, in _connection_for_bind
    return trans._connection_for_bind(engine, execution_options)
  File "<string>", line 2, in _connection_for_bind
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/state_changes.py", line 103, in _go
    self._raise_for_prerequisite_state(fn.__name__, current_state)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 990, in _raise_for_prerequisite_state
    raise sa_exc.InvalidRequestError(
sqlalchemy.exc.InvalidRequestError: This session is provisioning a new connection; concurrent operations are not permitted (Background on this error at: https://sqlalche.me/e/20/isce)
2025-05-24 14:14:24 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 14:14:24 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 14:14:24 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 14:14:24 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 14:14:25 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 14:14:25 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 14:14:54 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 14:14:54 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 14:14:54 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 14:14:54 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 14:14:54 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 14:14:54 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 14:15:17 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 14:15:17 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 14:16:39 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 14:16:39 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 14:16:39 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 14:16:39 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 14:16:40 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 14:16:40 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 14:16:51 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 14:16:51 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 14:16:51 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 14:16:51 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 14:16:51 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 14:16:51 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 14:16:56 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 14:16:56 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 14:16:56 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 14:16:56 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 14:16:57 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 14:16:57 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 14:18:23 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 14:18:23 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 14:18:23 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 14:18:23 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 14:18:23 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 14:18:23 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 14:18:33 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 14:18:33 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 14:18:33 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 14:18:33 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 14:18:33 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 14:18:33 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 14:18:44 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 14:18:44 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 14:18:44 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 14:18:44 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 14:18:45 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 14:18:45 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 14:18:55 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 14:18:55 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 14:18:55 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 14:18:55 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 14:18:55 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 14:18:55 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 14:20:32 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 14:20:32 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 14:20:32 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 14:20:32 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 14:20:33 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 14:20:33 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 14:22:21 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 14:22:21 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 14:22:21 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 14:22:21 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 14:22:21 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 14:22:21 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 14:22:34 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 14:22:34 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 14:22:34 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 14:22:34 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 14:22:35 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 14:22:35 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 14:22:43 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 14:22:43 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 14:22:43 - backend.service_center.okx_service.okx_balance_service - INFO - 初始化OKXBalanceService
2025-05-24 14:22:43 - backend.service_center.okx_service.okx_balance_service - INFO - OKXBalanceService初始化完成
2025-05-24 14:22:43 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 14:22:43 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 14:22:44 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 14:22:44 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 14:22:44 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-24 14:22:44 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-24 14:22:44 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-24 14:22:44 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-24 14:22:44 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-24 14:22:44 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-24 14:22:44 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 14:22:44 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 14:22:44 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 14:22:44 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 14:22:44 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 14:22:44 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 14:22:44 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 14:22:44 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 14:22:44 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 14:22:44 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 14:22:44 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 14:22:44 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 14:22:44 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 401 Unauthorized"
2025-05-24 14:22:44 - backend.service_center.okx_service.okx_spot_order_record_service - WARNING - 获取历史订单失败或没有数据
2025-05-24 14:22:44 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - No manual live spot orders.
2025-05-24 14:22:44 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-24 14:22:44 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 401 Unauthorized"
2025-05-24 14:22:44 - backend.service_center.okx_service.okx_spot_order_record_service - WARNING - 获取历史订单失败或没有数据
2025-05-24 14:22:44 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - No manual live spot orders.
2025-05-24 14:22:44 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-24 14:22:45 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 14:22:45 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 14:23:15 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 14:23:15 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 14:23:15 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 14:23:15 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 14:23:15 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 14:23:15 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 14:25:31 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 14:25:31 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 14:25:31 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 14:25:31 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 14:25:31 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 14:25:31 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 14:25:31 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 14:25:31 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 14:25:31 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 14:25:31 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 14:25:31 - sqlalchemy.engine.Engine - INFO - SELECT strategy_instance.id AS strategy_instance_id, strategy_instance.strategy_id AS strategy_instance_strategy_id, strategy_instance.strategy_name AS strategy_instance_strategy_name, strategy_instance.strategy_type AS strategy_instance_strategy_type, strategy_instance.strategy_params AS strategy_instance_strategy_params, strategy_instance.created_at AS strategy_instance_created_at, strategy_instance.updated_at AS strategy_instance_updated_at 
FROM strategy_instance
2025-05-24 14:25:31 - sqlalchemy.engine.Engine - INFO - SELECT strategy_instance.id AS strategy_instance_id, strategy_instance.strategy_id AS strategy_instance_strategy_id, strategy_instance.strategy_name AS strategy_instance_strategy_name, strategy_instance.strategy_type AS strategy_instance_strategy_type, strategy_instance.strategy_params AS strategy_instance_strategy_params, strategy_instance.created_at AS strategy_instance_created_at, strategy_instance.updated_at AS strategy_instance_updated_at 
FROM strategy_instance
2025-05-24 14:25:31 - sqlalchemy.engine.Engine - INFO - SELECT strategy_instance.id AS strategy_instance_id, strategy_instance.strategy_id AS strategy_instance_strategy_id, strategy_instance.strategy_name AS strategy_instance_strategy_name, strategy_instance.strategy_type AS strategy_instance_strategy_type, strategy_instance.strategy_params AS strategy_instance_strategy_params, strategy_instance.created_at AS strategy_instance_created_at, strategy_instance.updated_at AS strategy_instance_updated_at 
FROM strategy_instance
2025-05-24 14:25:31 - sqlalchemy.engine.Engine - INFO - SELECT strategy_instance.id AS strategy_instance_id, strategy_instance.strategy_id AS strategy_instance_strategy_id, strategy_instance.strategy_name AS strategy_instance_strategy_name, strategy_instance.strategy_type AS strategy_instance_strategy_type, strategy_instance.strategy_params AS strategy_instance_strategy_params, strategy_instance.created_at AS strategy_instance_created_at, strategy_instance.updated_at AS strategy_instance_updated_at 
FROM strategy_instance
2025-05-24 14:25:31 - sqlalchemy.engine.Engine - INFO - [generated in 0.00075s] ()
2025-05-24 14:25:31 - sqlalchemy.engine.Engine - INFO - [cached since 0.0009792s ago] ()
2025-05-24 14:25:31 - sqlalchemy.engine.Engine - INFO - [cached since 0.001216s ago] ()
2025-05-24 14:25:31 - sqlalchemy.engine.Engine - INFO - [cached since 0.001487s ago] ()
2025-05-24 14:25:31 - backend.data_object_center.strategy_instance - ERROR - 获取策略实例列表失败: (sqlite3.OperationalError) no such table: strategy_instance
[SQL: SELECT strategy_instance.id AS strategy_instance_id, strategy_instance.strategy_id AS strategy_instance_strategy_id, strategy_instance.strategy_name AS strategy_instance_strategy_name, strategy_instance.strategy_type AS strategy_instance_strategy_type, strategy_instance.strategy_params AS strategy_instance_strategy_params, strategy_instance.created_at AS strategy_instance_created_at, strategy_instance.updated_at AS strategy_instance_updated_at 
FROM strategy_instance]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-05-24 14:25:31 - backend.data_object_center.strategy_instance - ERROR - 获取策略实例列表失败: (sqlite3.OperationalError) no such table: strategy_instance
[SQL: SELECT strategy_instance.id AS strategy_instance_id, strategy_instance.strategy_id AS strategy_instance_strategy_id, strategy_instance.strategy_name AS strategy_instance_strategy_name, strategy_instance.strategy_type AS strategy_instance_strategy_type, strategy_instance.strategy_params AS strategy_instance_strategy_params, strategy_instance.created_at AS strategy_instance_created_at, strategy_instance.updated_at AS strategy_instance_updated_at 
FROM strategy_instance]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-05-24 14:25:31 - backend.data_object_center.strategy_instance - ERROR - 获取策略实例列表失败: (sqlite3.OperationalError) no such table: strategy_instance
[SQL: SELECT strategy_instance.id AS strategy_instance_id, strategy_instance.strategy_id AS strategy_instance_strategy_id, strategy_instance.strategy_name AS strategy_instance_strategy_name, strategy_instance.strategy_type AS strategy_instance_strategy_type, strategy_instance.strategy_params AS strategy_instance_strategy_params, strategy_instance.created_at AS strategy_instance_created_at, strategy_instance.updated_at AS strategy_instance_updated_at 
FROM strategy_instance]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-05-24 14:25:31 - backend.data_object_center.strategy_instance - ERROR - 获取策略实例列表失败: (sqlite3.OperationalError) no such table: strategy_instance
[SQL: SELECT strategy_instance.id AS strategy_instance_id, strategy_instance.strategy_id AS strategy_instance_strategy_id, strategy_instance.strategy_name AS strategy_instance_strategy_name, strategy_instance.strategy_type AS strategy_instance_strategy_type, strategy_instance.strategy_params AS strategy_instance_strategy_params, strategy_instance.created_at AS strategy_instance_created_at, strategy_instance.updated_at AS strategy_instance_updated_at 
FROM strategy_instance]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-05-24 14:25:31 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-05-24 14:25:31 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-05-24 14:25:31 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-05-24 14:25:31 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-05-24 14:25:39 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 14:25:39 - sqlalchemy.engine.Engine - INFO - SELECT strategy_instance.id AS strategy_instance_id, strategy_instance.strategy_id AS strategy_instance_strategy_id, strategy_instance.strategy_name AS strategy_instance_strategy_name, strategy_instance.strategy_type AS strategy_instance_strategy_type, strategy_instance.strategy_params AS strategy_instance_strategy_params, strategy_instance.created_at AS strategy_instance_created_at, strategy_instance.updated_at AS strategy_instance_updated_at 
FROM strategy_instance
2025-05-24 14:25:39 - sqlalchemy.engine.Engine - INFO - [cached since 7.527s ago] ()
2025-05-24 14:25:39 - backend.data_object_center.strategy_instance - ERROR - 获取策略实例列表失败: (sqlite3.OperationalError) no such table: strategy_instance
[SQL: SELECT strategy_instance.id AS strategy_instance_id, strategy_instance.strategy_id AS strategy_instance_strategy_id, strategy_instance.strategy_name AS strategy_instance_strategy_name, strategy_instance.strategy_type AS strategy_instance_strategy_type, strategy_instance.strategy_params AS strategy_instance_strategy_params, strategy_instance.created_at AS strategy_instance_created_at, strategy_instance.updated_at AS strategy_instance_updated_at 
FROM strategy_instance]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-05-24 14:25:39 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-05-24 14:25:39 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 14:25:39 - sqlalchemy.engine.Engine - INFO - SELECT strategy_instance.id AS strategy_instance_id, strategy_instance.strategy_id AS strategy_instance_strategy_id, strategy_instance.strategy_name AS strategy_instance_strategy_name, strategy_instance.strategy_type AS strategy_instance_strategy_type, strategy_instance.strategy_params AS strategy_instance_strategy_params, strategy_instance.created_at AS strategy_instance_created_at, strategy_instance.updated_at AS strategy_instance_updated_at 
FROM strategy_instance
2025-05-24 14:25:39 - sqlalchemy.engine.Engine - INFO - [cached since 7.536s ago] ()
2025-05-24 14:25:39 - backend.data_object_center.strategy_instance - ERROR - 获取策略实例列表失败: (sqlite3.OperationalError) no such table: strategy_instance
[SQL: SELECT strategy_instance.id AS strategy_instance_id, strategy_instance.strategy_id AS strategy_instance_strategy_id, strategy_instance.strategy_name AS strategy_instance_strategy_name, strategy_instance.strategy_type AS strategy_instance_strategy_type, strategy_instance.strategy_params AS strategy_instance_strategy_params, strategy_instance.created_at AS strategy_instance_created_at, strategy_instance.updated_at AS strategy_instance_updated_at 
FROM strategy_instance]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-05-24 14:25:39 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-05-24 14:25:47 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 14:25:47 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 14:25:47 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 14:25:47 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 14:25:48 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 14:25:48 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 14:27:35 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 14:27:35 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 14:27:35 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 14:27:35 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 14:27:36 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 14:27:36 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 14:27:36 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 14:27:36 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 14:27:36 - sqlalchemy.engine.Engine - INFO - SELECT strategy_instance.id AS strategy_instance_id, strategy_instance.strategy_id AS strategy_instance_strategy_id, strategy_instance.strategy_name AS strategy_instance_strategy_name, strategy_instance.strategy_type AS strategy_instance_strategy_type, strategy_instance.strategy_params AS strategy_instance_strategy_params, strategy_instance.created_at AS strategy_instance_created_at, strategy_instance.updated_at AS strategy_instance_updated_at 
FROM strategy_instance
2025-05-24 14:27:36 - sqlalchemy.engine.Engine - INFO - SELECT strategy_instance.id AS strategy_instance_id, strategy_instance.strategy_id AS strategy_instance_strategy_id, strategy_instance.strategy_name AS strategy_instance_strategy_name, strategy_instance.strategy_type AS strategy_instance_strategy_type, strategy_instance.strategy_params AS strategy_instance_strategy_params, strategy_instance.created_at AS strategy_instance_created_at, strategy_instance.updated_at AS strategy_instance_updated_at 
FROM strategy_instance
2025-05-24 14:27:36 - sqlalchemy.engine.Engine - INFO - [generated in 0.00055s] ()
2025-05-24 14:27:36 - sqlalchemy.engine.Engine - INFO - [cached since 0.003717s ago] ()
2025-05-24 14:27:36 - backend.data_object_center.strategy_instance - ERROR - 获取策略实例列表失败: (sqlite3.OperationalError) no such table: strategy_instance
[SQL: SELECT strategy_instance.id AS strategy_instance_id, strategy_instance.strategy_id AS strategy_instance_strategy_id, strategy_instance.strategy_name AS strategy_instance_strategy_name, strategy_instance.strategy_type AS strategy_instance_strategy_type, strategy_instance.strategy_params AS strategy_instance_strategy_params, strategy_instance.created_at AS strategy_instance_created_at, strategy_instance.updated_at AS strategy_instance_updated_at 
FROM strategy_instance]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-05-24 14:27:36 - backend.data_object_center.strategy_instance - ERROR - 获取策略实例列表失败: (sqlite3.OperationalError) no such table: strategy_instance
[SQL: SELECT strategy_instance.id AS strategy_instance_id, strategy_instance.strategy_id AS strategy_instance_strategy_id, strategy_instance.strategy_name AS strategy_instance_strategy_name, strategy_instance.strategy_type AS strategy_instance_strategy_type, strategy_instance.strategy_params AS strategy_instance_strategy_params, strategy_instance.created_at AS strategy_instance_created_at, strategy_instance.updated_at AS strategy_instance_updated_at 
FROM strategy_instance]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-05-24 14:27:36 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-05-24 14:27:36 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-05-24 14:27:47 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 14:27:47 - sqlalchemy.engine.Engine - INFO - SELECT strategy_instance.id AS strategy_instance_id, strategy_instance.strategy_id AS strategy_instance_strategy_id, strategy_instance.strategy_name AS strategy_instance_strategy_name, strategy_instance.strategy_type AS strategy_instance_strategy_type, strategy_instance.strategy_params AS strategy_instance_strategy_params, strategy_instance.created_at AS strategy_instance_created_at, strategy_instance.updated_at AS strategy_instance_updated_at 
FROM strategy_instance
2025-05-24 14:27:47 - sqlalchemy.engine.Engine - INFO - [cached since 11.58s ago] ()
2025-05-24 14:27:47 - backend.data_object_center.strategy_instance - ERROR - 获取策略实例列表失败: (sqlite3.OperationalError) no such table: strategy_instance
[SQL: SELECT strategy_instance.id AS strategy_instance_id, strategy_instance.strategy_id AS strategy_instance_strategy_id, strategy_instance.strategy_name AS strategy_instance_strategy_name, strategy_instance.strategy_type AS strategy_instance_strategy_type, strategy_instance.strategy_params AS strategy_instance_strategy_params, strategy_instance.created_at AS strategy_instance_created_at, strategy_instance.updated_at AS strategy_instance_updated_at 
FROM strategy_instance]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-05-24 14:27:47 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-05-24 14:27:47 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 14:27:47 - sqlalchemy.engine.Engine - INFO - SELECT strategy_instance.id AS strategy_instance_id, strategy_instance.strategy_id AS strategy_instance_strategy_id, strategy_instance.strategy_name AS strategy_instance_strategy_name, strategy_instance.strategy_type AS strategy_instance_strategy_type, strategy_instance.strategy_params AS strategy_instance_strategy_params, strategy_instance.created_at AS strategy_instance_created_at, strategy_instance.updated_at AS strategy_instance_updated_at 
FROM strategy_instance
2025-05-24 14:27:47 - sqlalchemy.engine.Engine - INFO - [cached since 11.61s ago] ()
2025-05-24 14:27:47 - backend.data_object_center.strategy_instance - ERROR - 获取策略实例列表失败: (sqlite3.OperationalError) no such table: strategy_instance
[SQL: SELECT strategy_instance.id AS strategy_instance_id, strategy_instance.strategy_id AS strategy_instance_strategy_id, strategy_instance.strategy_name AS strategy_instance_strategy_name, strategy_instance.strategy_type AS strategy_instance_strategy_type, strategy_instance.strategy_params AS strategy_instance_strategy_params, strategy_instance.created_at AS strategy_instance_created_at, strategy_instance.updated_at AS strategy_instance_updated_at 
FROM strategy_instance]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-05-24 14:27:47 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-05-24 14:28:07 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 14:28:07 - sqlalchemy.engine.Engine - INFO - SELECT strategy_instance.id AS strategy_instance_id, strategy_instance.strategy_id AS strategy_instance_strategy_id, strategy_instance.strategy_name AS strategy_instance_strategy_name, strategy_instance.strategy_type AS strategy_instance_strategy_type, strategy_instance.strategy_params AS strategy_instance_strategy_params, strategy_instance.created_at AS strategy_instance_created_at, strategy_instance.updated_at AS strategy_instance_updated_at 
FROM strategy_instance
2025-05-24 14:28:07 - sqlalchemy.engine.Engine - INFO - [cached since 31.46s ago] ()
2025-05-24 14:28:07 - backend.data_object_center.strategy_instance - ERROR - 获取策略实例列表失败: (sqlite3.OperationalError) no such table: strategy_instance
[SQL: SELECT strategy_instance.id AS strategy_instance_id, strategy_instance.strategy_id AS strategy_instance_strategy_id, strategy_instance.strategy_name AS strategy_instance_strategy_name, strategy_instance.strategy_type AS strategy_instance_strategy_type, strategy_instance.strategy_params AS strategy_instance_strategy_params, strategy_instance.created_at AS strategy_instance_created_at, strategy_instance.updated_at AS strategy_instance_updated_at 
FROM strategy_instance]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-05-24 14:28:07 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-05-24 14:28:07 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 14:28:07 - sqlalchemy.engine.Engine - INFO - SELECT strategy_instance.id AS strategy_instance_id, strategy_instance.strategy_id AS strategy_instance_strategy_id, strategy_instance.strategy_name AS strategy_instance_strategy_name, strategy_instance.strategy_type AS strategy_instance_strategy_type, strategy_instance.strategy_params AS strategy_instance_strategy_params, strategy_instance.created_at AS strategy_instance_created_at, strategy_instance.updated_at AS strategy_instance_updated_at 
FROM strategy_instance
2025-05-24 14:28:07 - sqlalchemy.engine.Engine - INFO - [cached since 31.47s ago] ()
2025-05-24 14:28:07 - backend.data_object_center.strategy_instance - ERROR - 获取策略实例列表失败: (sqlite3.OperationalError) no such table: strategy_instance
[SQL: SELECT strategy_instance.id AS strategy_instance_id, strategy_instance.strategy_id AS strategy_instance_strategy_id, strategy_instance.strategy_name AS strategy_instance_strategy_name, strategy_instance.strategy_type AS strategy_instance_strategy_type, strategy_instance.strategy_params AS strategy_instance_strategy_params, strategy_instance.created_at AS strategy_instance_created_at, strategy_instance.updated_at AS strategy_instance_updated_at 
FROM strategy_instance]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-05-24 14:28:07 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-05-24 14:30:11 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 14:30:11 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 14:30:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-24 14:30:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-24 14:30:11 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-24 14:30:11 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-24 14:30:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-24 14:30:11 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-24 14:30:12 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 401 Unauthorized"
2025-05-24 14:30:12 - backend.service_center.okx_service.okx_spot_order_record_service - WARNING - 获取历史订单失败或没有数据
2025-05-24 14:30:12 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - No manual live spot orders.
2025-05-24 14:30:12 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-24 14:30:12 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 401 Unauthorized"
2025-05-24 14:30:12 - backend.service_center.okx_service.okx_spot_order_record_service - WARNING - 获取历史订单失败或没有数据
2025-05-24 14:30:12 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - No manual live spot orders.
2025-05-24 14:30:12 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-24 14:30:13 - backend.service_center.okx_service.okx_balance_service - INFO - 初始化OKXBalanceService
2025-05-24 14:30:13 - backend.service_center.okx_service.okx_balance_service - INFO - OKXBalanceService初始化完成
2025-05-24 14:30:13 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 14:30:13 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 14:30:13 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 14:30:13 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 14:30:13 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 14:30:13 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 14:30:13 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 14:30:13 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 14:30:13 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 14:30:13 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 14:30:13 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 14:30:13 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 14:30:13 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 14:30:13 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 14:30:15 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 14:30:15 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 14:30:45 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 14:30:45 - sqlalchemy.engine.Engine - INFO - SELECT strategy_instance.id AS strategy_instance_id, strategy_instance.strategy_id AS strategy_instance_strategy_id, strategy_instance.strategy_name AS strategy_instance_strategy_name, strategy_instance.strategy_type AS strategy_instance_strategy_type, strategy_instance.strategy_params AS strategy_instance_strategy_params, strategy_instance.created_at AS strategy_instance_created_at, strategy_instance.updated_at AS strategy_instance_updated_at 
FROM strategy_instance
2025-05-24 14:30:45 - sqlalchemy.engine.Engine - INFO - [cached since 189s ago] ()
2025-05-24 14:30:45 - backend.data_object_center.strategy_instance - ERROR - 获取策略实例列表失败: (sqlite3.OperationalError) no such table: strategy_instance
[SQL: SELECT strategy_instance.id AS strategy_instance_id, strategy_instance.strategy_id AS strategy_instance_strategy_id, strategy_instance.strategy_name AS strategy_instance_strategy_name, strategy_instance.strategy_type AS strategy_instance_strategy_type, strategy_instance.strategy_params AS strategy_instance_strategy_params, strategy_instance.created_at AS strategy_instance_created_at, strategy_instance.updated_at AS strategy_instance_updated_at 
FROM strategy_instance]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-05-24 14:30:45 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-05-24 14:30:45 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 14:30:45 - sqlalchemy.engine.Engine - INFO - SELECT strategy_instance.id AS strategy_instance_id, strategy_instance.strategy_id AS strategy_instance_strategy_id, strategy_instance.strategy_name AS strategy_instance_strategy_name, strategy_instance.strategy_type AS strategy_instance_strategy_type, strategy_instance.strategy_params AS strategy_instance_strategy_params, strategy_instance.created_at AS strategy_instance_created_at, strategy_instance.updated_at AS strategy_instance_updated_at 
FROM strategy_instance
2025-05-24 14:30:45 - sqlalchemy.engine.Engine - INFO - [cached since 189s ago] ()
2025-05-24 14:30:45 - backend.data_object_center.strategy_instance - ERROR - 获取策略实例列表失败: (sqlite3.OperationalError) no such table: strategy_instance
[SQL: SELECT strategy_instance.id AS strategy_instance_id, strategy_instance.strategy_id AS strategy_instance_strategy_id, strategy_instance.strategy_name AS strategy_instance_strategy_name, strategy_instance.strategy_type AS strategy_instance_strategy_type, strategy_instance.strategy_params AS strategy_instance_strategy_params, strategy_instance.created_at AS strategy_instance_created_at, strategy_instance.updated_at AS strategy_instance_updated_at 
FROM strategy_instance]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-05-24 14:30:45 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-05-24 14:31:33 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 14:31:33 - sqlalchemy.engine.Engine - INFO - SELECT strategy_instance.id AS strategy_instance_id, strategy_instance.strategy_id AS strategy_instance_strategy_id, strategy_instance.strategy_name AS strategy_instance_strategy_name, strategy_instance.strategy_type AS strategy_instance_strategy_type, strategy_instance.strategy_params AS strategy_instance_strategy_params, strategy_instance.created_at AS strategy_instance_created_at, strategy_instance.updated_at AS strategy_instance_updated_at 
FROM strategy_instance
2025-05-24 14:31:33 - sqlalchemy.engine.Engine - INFO - [cached since 237.8s ago] ()
2025-05-24 14:31:33 - backend.data_object_center.strategy_instance - ERROR - 获取策略实例列表失败: (sqlite3.OperationalError) no such table: strategy_instance
[SQL: SELECT strategy_instance.id AS strategy_instance_id, strategy_instance.strategy_id AS strategy_instance_strategy_id, strategy_instance.strategy_name AS strategy_instance_strategy_name, strategy_instance.strategy_type AS strategy_instance_strategy_type, strategy_instance.strategy_params AS strategy_instance_strategy_params, strategy_instance.created_at AS strategy_instance_created_at, strategy_instance.updated_at AS strategy_instance_updated_at 
FROM strategy_instance]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-05-24 14:31:33 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-05-24 14:31:33 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 14:31:33 - sqlalchemy.engine.Engine - INFO - SELECT strategy_instance.id AS strategy_instance_id, strategy_instance.strategy_id AS strategy_instance_strategy_id, strategy_instance.strategy_name AS strategy_instance_strategy_name, strategy_instance.strategy_type AS strategy_instance_strategy_type, strategy_instance.strategy_params AS strategy_instance_strategy_params, strategy_instance.created_at AS strategy_instance_created_at, strategy_instance.updated_at AS strategy_instance_updated_at 
FROM strategy_instance
2025-05-24 14:31:33 - sqlalchemy.engine.Engine - INFO - [cached since 237.9s ago] ()
2025-05-24 14:31:33 - backend.data_object_center.strategy_instance - ERROR - 获取策略实例列表失败: (sqlite3.OperationalError) no such table: strategy_instance
[SQL: SELECT strategy_instance.id AS strategy_instance_id, strategy_instance.strategy_id AS strategy_instance_strategy_id, strategy_instance.strategy_name AS strategy_instance_strategy_name, strategy_instance.strategy_type AS strategy_instance_strategy_type, strategy_instance.strategy_params AS strategy_instance_strategy_params, strategy_instance.created_at AS strategy_instance_created_at, strategy_instance.updated_at AS strategy_instance_updated_at 
FROM strategy_instance]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-05-24 14:31:33 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-05-24 14:31:44 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 14:31:44 - sqlalchemy.engine.Engine - INFO - SELECT strategy_instance.id AS strategy_instance_id, strategy_instance.strategy_id AS strategy_instance_strategy_id, strategy_instance.strategy_name AS strategy_instance_strategy_name, strategy_instance.strategy_type AS strategy_instance_strategy_type, strategy_instance.strategy_params AS strategy_instance_strategy_params, strategy_instance.created_at AS strategy_instance_created_at, strategy_instance.updated_at AS strategy_instance_updated_at 
FROM strategy_instance
2025-05-24 14:31:44 - sqlalchemy.engine.Engine - INFO - [cached since 248.7s ago] ()
2025-05-24 14:31:44 - backend.data_object_center.strategy_instance - ERROR - 获取策略实例列表失败: (sqlite3.OperationalError) no such table: strategy_instance
[SQL: SELECT strategy_instance.id AS strategy_instance_id, strategy_instance.strategy_id AS strategy_instance_strategy_id, strategy_instance.strategy_name AS strategy_instance_strategy_name, strategy_instance.strategy_type AS strategy_instance_strategy_type, strategy_instance.strategy_params AS strategy_instance_strategy_params, strategy_instance.created_at AS strategy_instance_created_at, strategy_instance.updated_at AS strategy_instance_updated_at 
FROM strategy_instance]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-05-24 14:31:44 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-05-24 14:31:44 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 14:31:44 - sqlalchemy.engine.Engine - INFO - SELECT strategy_instance.id AS strategy_instance_id, strategy_instance.strategy_id AS strategy_instance_strategy_id, strategy_instance.strategy_name AS strategy_instance_strategy_name, strategy_instance.strategy_type AS strategy_instance_strategy_type, strategy_instance.strategy_params AS strategy_instance_strategy_params, strategy_instance.created_at AS strategy_instance_created_at, strategy_instance.updated_at AS strategy_instance_updated_at 
FROM strategy_instance
2025-05-24 14:31:44 - sqlalchemy.engine.Engine - INFO - [cached since 248.7s ago] ()
2025-05-24 14:31:44 - backend.data_object_center.strategy_instance - ERROR - 获取策略实例列表失败: (sqlite3.OperationalError) no such table: strategy_instance
[SQL: SELECT strategy_instance.id AS strategy_instance_id, strategy_instance.strategy_id AS strategy_instance_strategy_id, strategy_instance.strategy_name AS strategy_instance_strategy_name, strategy_instance.strategy_type AS strategy_instance_strategy_type, strategy_instance.strategy_params AS strategy_instance_strategy_params, strategy_instance.created_at AS strategy_instance_created_at, strategy_instance.updated_at AS strategy_instance_updated_at 
FROM strategy_instance]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-05-24 14:31:44 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-05-24 14:32:48 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 14:32:48 - sqlalchemy.engine.Engine - INFO - SELECT strategy_instance.id AS strategy_instance_id, strategy_instance.strategy_id AS strategy_instance_strategy_id, strategy_instance.strategy_name AS strategy_instance_strategy_name, strategy_instance.strategy_type AS strategy_instance_strategy_type, strategy_instance.strategy_params AS strategy_instance_strategy_params, strategy_instance.created_at AS strategy_instance_created_at, strategy_instance.updated_at AS strategy_instance_updated_at 
FROM strategy_instance
2025-05-24 14:32:48 - sqlalchemy.engine.Engine - INFO - [cached since 312.6s ago] ()
2025-05-24 14:32:48 - backend.data_object_center.strategy_instance - ERROR - 获取策略实例列表失败: (sqlite3.OperationalError) no such table: strategy_instance
[SQL: SELECT strategy_instance.id AS strategy_instance_id, strategy_instance.strategy_id AS strategy_instance_strategy_id, strategy_instance.strategy_name AS strategy_instance_strategy_name, strategy_instance.strategy_type AS strategy_instance_strategy_type, strategy_instance.strategy_params AS strategy_instance_strategy_params, strategy_instance.created_at AS strategy_instance_created_at, strategy_instance.updated_at AS strategy_instance_updated_at 
FROM strategy_instance]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-05-24 14:32:48 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-05-24 14:33:36 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 14:33:36 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 14:34:36 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 14:34:36 - sqlalchemy.engine.Engine - INFO - SELECT strategy_instance.id AS strategy_instance_id, strategy_instance.strategy_id AS strategy_instance_strategy_id, strategy_instance.strategy_name AS strategy_instance_strategy_name, strategy_instance.strategy_type AS strategy_instance_strategy_type, strategy_instance.strategy_params AS strategy_instance_strategy_params, strategy_instance.created_at AS strategy_instance_created_at, strategy_instance.updated_at AS strategy_instance_updated_at 
FROM strategy_instance
2025-05-24 14:34:36 - sqlalchemy.engine.Engine - INFO - [cached since 420.3s ago] ()
2025-05-24 14:34:36 - backend.data_object_center.strategy_instance - ERROR - 获取策略实例列表失败: (sqlite3.OperationalError) no such table: strategy_instance
[SQL: SELECT strategy_instance.id AS strategy_instance_id, strategy_instance.strategy_id AS strategy_instance_strategy_id, strategy_instance.strategy_name AS strategy_instance_strategy_name, strategy_instance.strategy_type AS strategy_instance_strategy_type, strategy_instance.strategy_params AS strategy_instance_strategy_params, strategy_instance.created_at AS strategy_instance_created_at, strategy_instance.updated_at AS strategy_instance_updated_at 
FROM strategy_instance]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-05-24 14:34:36 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-05-24 14:34:36 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 14:34:36 - sqlalchemy.engine.Engine - INFO - SELECT strategy_instance.id AS strategy_instance_id, strategy_instance.strategy_id AS strategy_instance_strategy_id, strategy_instance.strategy_name AS strategy_instance_strategy_name, strategy_instance.strategy_type AS strategy_instance_strategy_type, strategy_instance.strategy_params AS strategy_instance_strategy_params, strategy_instance.created_at AS strategy_instance_created_at, strategy_instance.updated_at AS strategy_instance_updated_at 
FROM strategy_instance
2025-05-24 14:34:36 - sqlalchemy.engine.Engine - INFO - [cached since 420.3s ago] ()
2025-05-24 14:34:36 - backend.data_object_center.strategy_instance - ERROR - 获取策略实例列表失败: (sqlite3.OperationalError) no such table: strategy_instance
[SQL: SELECT strategy_instance.id AS strategy_instance_id, strategy_instance.strategy_id AS strategy_instance_strategy_id, strategy_instance.strategy_name AS strategy_instance_strategy_name, strategy_instance.strategy_type AS strategy_instance_strategy_type, strategy_instance.strategy_params AS strategy_instance_strategy_params, strategy_instance.created_at AS strategy_instance_created_at, strategy_instance.updated_at AS strategy_instance_updated_at 
FROM strategy_instance]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-05-24 14:34:36 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-05-24 14:34:44 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 14:34:44 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 14:34:44 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 14:34:44 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 14:34:45 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 14:34:45 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 14:34:53 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 14:34:53 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 14:34:53 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 14:34:53 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 14:34:54 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 14:34:54 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 14:34:54 - __main__ - INFO - 启动FastAPI服务器 - 主机: 127.0.0.1, 端口: 8000
2025-05-24 14:35:27 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 14:35:27 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 14:35:27 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 14:35:27 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 14:35:28 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 14:35:28 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 14:35:32 - tvDatafeed.main - ERROR - error while signin
2025-05-24 14:35:32 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 14:35:37 - backend.backtest_center.backtest_core.backtest_system - INFO - 
信号统计:
2025-05-24 14:35:37 - backend.backtest_center.backtest_core.backtest_system - INFO - 总买入信号数: 227
2025-05-24 14:35:37 - backend.backtest_center.backtest_core.backtest_system - INFO - 总卖出信号数: 162
2025-05-24 14:35:38 - backend.backtest_center.backtest_core.backtest_system - INFO - 
=== 回测结果 ===
2025-05-24 14:35:38 - backend.backtest_center.backtest_core.backtest_system - INFO - 初始投资组合价值: $100000.00
2025-05-24 14:35:38 - backend.backtest_center.backtest_core.backtest_system - INFO - 最终投资组合价值: $nan
2025-05-24 14:35:38 - backend.backtest_center.backtest_core.backtest_system - INFO - 总收益率: nan%
2025-05-24 14:35:38 - backend.backtest_center.backtest_core.backtest_system - INFO - 年化收益率: nan%
2025-05-24 14:35:38 - backend.backtest_center.backtest_core.backtest_system - INFO - 夏普比率: nan
2025-05-24 14:35:38 - backend.backtest_center.backtest_core.backtest_system - INFO - 最大回撤: 2593627422.97%
2025-05-24 14:35:38 - backend.backtest_center.backtest_core.backtest_system - INFO - 最大回撤金额: $498997125993049111686289874353930715321657613231941330200151215294346884249548065509276025682871985942383057398756616673378992747808663955937504716424947543261442490566532314713979313283537349292058191109736112322692769931277116328893537149870695509826908335129236476272530855791705795969361548938540220416.00
2025-05-24 14:35:38 - backend.backtest_center.backtest_core.backtest_system - INFO - 
=== 交易统计 ===
2025-05-24 14:35:38 - backend.backtest_center.backtest_core.backtest_system - INFO - 总交易次数: 25
2025-05-24 14:35:38 - backend.backtest_center.backtest_core.backtest_system - INFO - 盈利交易次数: 6
2025-05-24 14:35:38 - backend.backtest_center.backtest_core.backtest_system - INFO - 亏损交易次数: 18
2025-05-24 14:35:38 - backend.backtest_center.backtest_core.backtest_system - INFO - 胜率: 24.00%
2025-05-24 14:35:38 - backend.backtest_center.backtest_core.backtest_system - INFO - 平均盈利: $149.28
2025-05-24 14:35:38 - backend.backtest_center.backtest_core.backtest_system - INFO - 平均亏损: $-31.55
2025-05-24 14:38:10 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 14:38:10 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 14:38:10 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 14:38:10 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 14:38:10 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 14:38:10 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 14:38:11 - __main__ - INFO - 启动FastAPI服务器 - 主机: 127.0.0.1, 端口: 8000
2025-05-24 14:38:14 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 14:38:14 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 14:38:14 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 14:38:14 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 14:38:14 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 14:38:14 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 14:38:20 - tvDatafeed.main - ERROR - error while signin
2025-05-24 14:38:20 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 14:38:25 - backend.backtest_center.backtest_core.backtest_system - INFO - 
信号统计:
2025-05-24 14:38:25 - backend.backtest_center.backtest_core.backtest_system - INFO - 总买入信号数: 227
2025-05-24 14:38:25 - backend.backtest_center.backtest_core.backtest_system - INFO - 总卖出信号数: 162
2025-05-24 14:38:28 - backend.backtest_center.backtest_core.backtest_system - INFO - 
=== 回测结果 ===
2025-05-24 14:38:28 - backend.backtest_center.backtest_core.backtest_system - INFO - 初始投资组合价值: $100000.00
2025-05-24 14:38:28 - backend.backtest_center.backtest_core.backtest_system - INFO - 最终投资组合价值: $nan
2025-05-24 14:38:28 - backend.backtest_center.backtest_core.backtest_system - INFO - 总收益率: nan%
2025-05-24 14:38:28 - backend.backtest_center.backtest_core.backtest_system - INFO - 年化收益率: nan%
2025-05-24 14:38:28 - backend.backtest_center.backtest_core.backtest_system - INFO - 夏普比率: nan
2025-05-24 14:38:28 - backend.backtest_center.backtest_core.backtest_system - INFO - 最大回撤: 2593627422.97%
2025-05-24 14:38:28 - backend.backtest_center.backtest_core.backtest_system - INFO - 最大回撤金额: $498997125993049111686289874353930715321657613231941330200151215294346884249548065509276025682871985942383057398756616673378992747808663955937504716424947543261442490566532314713979313283537349292058191109736112322692769931277116328893537149870695509826908335129236476272530855791705795969361548938540220416.00
2025-05-24 14:38:28 - backend.backtest_center.backtest_core.backtest_system - INFO - 
=== 交易统计 ===
2025-05-24 14:38:28 - backend.backtest_center.backtest_core.backtest_system - INFO - 总交易次数: 25
2025-05-24 14:38:28 - backend.backtest_center.backtest_core.backtest_system - INFO - 盈利交易次数: 6
2025-05-24 14:38:28 - backend.backtest_center.backtest_core.backtest_system - INFO - 亏损交易次数: 18
2025-05-24 14:38:28 - backend.backtest_center.backtest_core.backtest_system - INFO - 胜率: 24.00%
2025-05-24 14:38:28 - backend.backtest_center.backtest_core.backtest_system - INFO - 平均盈利: $149.28
2025-05-24 14:38:28 - backend.backtest_center.backtest_core.backtest_system - INFO - 平均亏损: $-31.55
2025-05-24 14:38:35 - matplotlib.font_manager - WARNING - Matplotlib is building the font cache; this may take a moment.
2025-05-24 14:38:52 - matplotlib.font_manager - INFO - Failed to extract font properties from /System/Library/PrivateFrameworks/FontServices.framework/Resources/Reserved/PingFangUI.ttc: Can not load face (locations (loca) table missing; error code 0x90)
2025-05-24 14:38:52 - matplotlib.font_manager - INFO - Failed to extract font properties from /System/Library/Fonts/LastResort.otf: tuple indices must be integers or slices, not str
2025-05-24 14:38:52 - matplotlib.font_manager - INFO - Failed to extract font properties from /System/Library/Fonts/Apple Color Emoji.ttc: Could not set the fontsize (invalid pixel size; error code 0x17)
2025-05-24 14:38:52 - matplotlib.font_manager - INFO - Failed to extract font properties from /System/Library/Fonts/Supplemental/NISC18030.ttf: Could not set the fontsize (invalid pixel size; error code 0x17)
2025-05-24 14:38:52 - matplotlib.font_manager - INFO - generated new fontManager
2025-05-24 14:42:26 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 14:42:26 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 14:42:26 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 14:42:26 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 14:42:26 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 14:42:26 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 14:42:26 - __main__ - INFO - 启动FastAPI服务器 - 主机: 127.0.0.1, 端口: 8000
2025-05-24 14:42:29 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 14:42:29 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 14:42:29 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 14:42:29 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 14:42:29 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 14:42:29 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 14:42:42 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/fills-history?instType=SPOT "HTTP/2 401 Unauthorized"
2025-05-24 14:42:42 - backend.controller_center.trade.trade_service - ERROR - Failed to get fills history: 50110, Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 14:42:42 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/fills-history?instType=SPOT "HTTP/2 401 Unauthorized"
2025-05-24 14:42:42 - backend.controller_center.trade.trade_service - ERROR - Failed to get fills history: 50110, Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 14:42:43 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 14:42:43 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-24 14:42:43 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 14:42:43 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-24 14:42:43 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-24 14:42:43 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-24 14:42:43 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-24 14:42:43 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-24 14:42:43 - backend.controller_center.record.record_controller - ERROR - Error processing request: Server disconnected
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpx/_transports/default.py", line 69, in map_httpcore_exceptions
    yield
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpx/_transports/default.py", line 233, in handle_request
    resp = self._pool.handle_request(req)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_sync/connection_pool.py", line 268, in handle_request
    raise exc
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_sync/connection_pool.py", line 251, in handle_request
    response = connection.handle_request(request)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_sync/http_proxy.py", line 344, in handle_request
    return self._connection.handle_request(request)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_sync/http2.py", line 185, in handle_request
    raise exc
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_sync/http2.py", line 148, in handle_request
    status, headers = self._receive_response(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_sync/http2.py", line 292, in _receive_response
    event = self._receive_stream_event(request, stream_id)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_sync/http2.py", line 333, in _receive_stream_event
    self._receive_events(request, stream_id)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_sync/http2.py", line 361, in _receive_events
    events = self._read_incoming_data(request)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_sync/http2.py", line 435, in _read_incoming_data
    raise self._read_exception  # pragma: nocover
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpx/_transports/default.py", line 69, in map_httpcore_exceptions
    yield
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpx/_transports/default.py", line 233, in handle_request
    resp = self._pool.handle_request(req)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_sync/connection_pool.py", line 268, in handle_request
    raise exc
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_sync/connection_pool.py", line 251, in handle_request
    response = connection.handle_request(request)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_sync/http_proxy.py", line 344, in handle_request
    return self._connection.handle_request(request)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_sync/http2.py", line 185, in handle_request
    raise exc
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_sync/http2.py", line 148, in handle_request
    status, headers = self._receive_response(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_sync/http2.py", line 292, in _receive_response
    event = self._receive_stream_event(request, stream_id)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_sync/http2.py", line 333, in _receive_stream_event
    self._receive_events(request, stream_id)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_sync/http2.py", line 361, in _receive_events
    events = self._read_incoming_data(request)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_sync/http2.py", line 452, in _read_incoming_data
    raise exc
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_sync/http2.py", line 440, in _read_incoming_data
    raise RemoteProtocolError("Server disconnected")
httpcore.RemoteProtocolError: Server disconnected

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/controller_center/record/record_controller.py", line 28, in list_spot_record
    spot_order_record_service.save_update_spot_order_record()
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 108, in save_update_spot_order_record
    history_orders = self._get_history_orders()
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 121, in _get_history_orders
    response = self.trade.get_orders_history_archive(
  File "/Users/rain/PycharmProjects/uchu_trade/backend/api_center/okx_api/trade_api.py", line 24, in get_orders_history_archive
    return self.tradeAPI.get_orders_history_archive(instType=instType, **kwargs)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/okx/Trade.py", line 86, in get_orders_history_archive
    return self._request_with_params(GET, ORDERS_HISTORY_ARCHIVE, params)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/okx/okxclient.py", line 55, in _request_with_params
    return self._request(method, request_path, params)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/okx/okxclient.py", line 46, in _request
    response = self.get(request_path, headers=header)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpx/_client.py", line 1054, in get
    return self.request(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpx/_client.py", line 827, in request
    return self.send(request, auth=auth, follow_redirects=follow_redirects)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpx/_client.py", line 914, in send
    response = self._send_handling_auth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpx/_client.py", line 942, in _send_handling_auth
    response = self._send_handling_redirects(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpx/_client.py", line 979, in _send_handling_redirects
    response = self._send_single_request(request)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpx/_client.py", line 1015, in _send_single_request
    response = transport.handle_request(request)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpx/_transports/default.py", line 232, in handle_request
    with map_httpcore_exceptions():
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/contextlib.py", line 153, in __exit__
    self.gen.throw(typ, value, traceback)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpx/_transports/default.py", line 86, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.RemoteProtocolError: Server disconnected
2025-05-24 14:42:43 - backend.controller_center.record.record_controller - ERROR - Error processing request: Server disconnected
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpx/_transports/default.py", line 69, in map_httpcore_exceptions
    yield
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpx/_transports/default.py", line 233, in handle_request
    resp = self._pool.handle_request(req)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_sync/connection_pool.py", line 268, in handle_request
    raise exc
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_sync/connection_pool.py", line 251, in handle_request
    response = connection.handle_request(request)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_sync/http_proxy.py", line 344, in handle_request
    return self._connection.handle_request(request)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_sync/http2.py", line 185, in handle_request
    raise exc
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_sync/http2.py", line 148, in handle_request
    status, headers = self._receive_response(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_sync/http2.py", line 292, in _receive_response
    event = self._receive_stream_event(request, stream_id)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_sync/http2.py", line 333, in _receive_stream_event
    self._receive_events(request, stream_id)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_sync/http2.py", line 361, in _receive_events
    events = self._read_incoming_data(request)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_sync/http2.py", line 435, in _read_incoming_data
    raise self._read_exception  # pragma: nocover
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpx/_transports/default.py", line 69, in map_httpcore_exceptions
    yield
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpx/_transports/default.py", line 233, in handle_request
    resp = self._pool.handle_request(req)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_sync/connection_pool.py", line 268, in handle_request
    raise exc
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_sync/connection_pool.py", line 251, in handle_request
    response = connection.handle_request(request)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_sync/http_proxy.py", line 344, in handle_request
    return self._connection.handle_request(request)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_sync/http2.py", line 185, in handle_request
    raise exc
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_sync/http2.py", line 148, in handle_request
    status, headers = self._receive_response(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_sync/http2.py", line 292, in _receive_response
    event = self._receive_stream_event(request, stream_id)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_sync/http2.py", line 333, in _receive_stream_event
    self._receive_events(request, stream_id)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_sync/http2.py", line 361, in _receive_events
    events = self._read_incoming_data(request)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_sync/http2.py", line 452, in _read_incoming_data
    raise exc
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_sync/http2.py", line 440, in _read_incoming_data
    raise RemoteProtocolError("Server disconnected")
httpcore.RemoteProtocolError: Server disconnected

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/controller_center/record/record_controller.py", line 28, in list_spot_record
    spot_order_record_service.save_update_spot_order_record()
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 108, in save_update_spot_order_record
    history_orders = self._get_history_orders()
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 121, in _get_history_orders
    response = self.trade.get_orders_history_archive(
  File "/Users/rain/PycharmProjects/uchu_trade/backend/api_center/okx_api/trade_api.py", line 24, in get_orders_history_archive
    return self.tradeAPI.get_orders_history_archive(instType=instType, **kwargs)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/okx/Trade.py", line 86, in get_orders_history_archive
    return self._request_with_params(GET, ORDERS_HISTORY_ARCHIVE, params)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/okx/okxclient.py", line 55, in _request_with_params
    return self._request(method, request_path, params)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/okx/okxclient.py", line 46, in _request
    response = self.get(request_path, headers=header)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpx/_client.py", line 1054, in get
    return self.request(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpx/_client.py", line 827, in request
    return self.send(request, auth=auth, follow_redirects=follow_redirects)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpx/_client.py", line 914, in send
    response = self._send_handling_auth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpx/_client.py", line 942, in _send_handling_auth
    response = self._send_handling_redirects(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpx/_client.py", line 979, in _send_handling_redirects
    response = self._send_single_request(request)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpx/_client.py", line 1015, in _send_single_request
    response = transport.handle_request(request)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpx/_transports/default.py", line 232, in handle_request
    with map_httpcore_exceptions():
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/contextlib.py", line 153, in __exit__
    self.gen.throw(typ, value, traceback)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpx/_transports/default.py", line 86, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.RemoteProtocolError: Server disconnected
2025-05-24 14:42:47 - backend.service_center.okx_service.okx_balance_service - INFO - 初始化OKXBalanceService
2025-05-24 14:42:47 - backend.service_center.okx_service.okx_balance_service - INFO - OKXBalanceService初始化完成
2025-05-24 14:42:47 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 14:42:47 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 14:42:47 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 14:42:47 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 14:42:47 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 14:42:47 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 14:42:47 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 14:42:47 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 14:42:47 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 14:42:47 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 14:42:47 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 14:42:47 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 14:42:47 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 14:42:47 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 14:42:49 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 14:42:49 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 14:42:52 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 14:42:52 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 14:42:52 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-24 14:42:52 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-24 14:42:52 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-24 14:42:52 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-24 14:42:52 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-24 14:42:52 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-24 14:42:54 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 401 Unauthorized"
2025-05-24 14:42:54 - backend.service_center.okx_service.okx_spot_order_record_service - WARNING - 获取历史订单失败或没有数据
2025-05-24 14:42:54 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - No manual live spot orders.
2025-05-24 14:42:54 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-24 14:42:56 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 14:42:56 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 14:42:57 - backend.controller_center.record.record_controller - ERROR - Error processing request: [SSL: UNEXPECTED_EOF_WHILE_READING] EOF occurred in violation of protocol (_ssl.c:1007)
Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_exceptions.py", line 10, in map_exceptions
    yield
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_backends/sync.py", line 168, in start_tls
    raise exc
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_backends/sync.py", line 163, in start_tls
    sock = ssl_context.wrap_socket(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/ssl.py", line 513, in wrap_socket
    return self.sslsocket_class._create(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/ssl.py", line 1104, in _create
    self.do_handshake()
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/ssl.py", line 1375, in do_handshake
    self._sslobj.do_handshake()
ssl.SSLEOFError: [SSL: UNEXPECTED_EOF_WHILE_READING] EOF occurred in violation of protocol (_ssl.c:1007)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpx/_transports/default.py", line 69, in map_httpcore_exceptions
    yield
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpx/_transports/default.py", line 233, in handle_request
    resp = self._pool.handle_request(req)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_sync/connection_pool.py", line 268, in handle_request
    raise exc
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_sync/connection_pool.py", line 251, in handle_request
    response = connection.handle_request(request)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_sync/http_proxy.py", line 317, in handle_request
    stream = stream.start_tls(**kwargs)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_backends/sync.py", line 152, in start_tls
    with map_exceptions(exc_map):
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/contextlib.py", line 153, in __exit__
    self.gen.throw(typ, value, traceback)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpcore/_exceptions.py", line 14, in map_exceptions
    raise to_exc(exc) from exc
httpcore.ConnectError: [SSL: UNEXPECTED_EOF_WHILE_READING] EOF occurred in violation of protocol (_ssl.c:1007)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/controller_center/record/record_controller.py", line 28, in list_spot_record
    spot_order_record_service.save_update_spot_order_record()
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 108, in save_update_spot_order_record
    history_orders = self._get_history_orders()
  File "/Users/rain/PycharmProjects/uchu_trade/backend/service_center/okx_service/okx_spot_order_record_service.py", line 121, in _get_history_orders
    response = self.trade.get_orders_history_archive(
  File "/Users/rain/PycharmProjects/uchu_trade/backend/api_center/okx_api/trade_api.py", line 24, in get_orders_history_archive
    return self.tradeAPI.get_orders_history_archive(instType=instType, **kwargs)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/okx/Trade.py", line 86, in get_orders_history_archive
    return self._request_with_params(GET, ORDERS_HISTORY_ARCHIVE, params)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/okx/okxclient.py", line 55, in _request_with_params
    return self._request(method, request_path, params)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/okx/okxclient.py", line 46, in _request
    response = self.get(request_path, headers=header)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpx/_client.py", line 1054, in get
    return self.request(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpx/_client.py", line 827, in request
    return self.send(request, auth=auth, follow_redirects=follow_redirects)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpx/_client.py", line 914, in send
    response = self._send_handling_auth(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpx/_client.py", line 942, in _send_handling_auth
    response = self._send_handling_redirects(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpx/_client.py", line 979, in _send_handling_redirects
    response = self._send_single_request(request)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpx/_client.py", line 1015, in _send_single_request
    response = transport.handle_request(request)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpx/_transports/default.py", line 232, in handle_request
    with map_httpcore_exceptions():
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/contextlib.py", line 153, in __exit__
    self.gen.throw(typ, value, traceback)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/httpx/_transports/default.py", line 86, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.ConnectError: [SSL: UNEXPECTED_EOF_WHILE_READING] EOF occurred in violation of protocol (_ssl.c:1007)
2025-05-24 14:42:57 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 14:42:57 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 14:42:59 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 14:42:59 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 14:42:59 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 14:42:59 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 14:42:59 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 14:42:59 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 14:42:59 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 14:42:59 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 14:42:59 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 14:42:59 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 14:42:59 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 14:42:59 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 14:43:12 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 14:43:12 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 14:43:36 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 14:43:36 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 14:43:36 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 14:43:36 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 14:43:37 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 14:43:37 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 14:43:54 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 14:43:54 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 14:43:54 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 14:43:54 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 14:43:55 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 14:43:55 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 14:43:55 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 14:43:55 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 14:44:01 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 14:44:01 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 14:44:01 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 14:44:01 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 14:44:02 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 14:44:02 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 14:44:04 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fc499400be0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:44:14 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestResult at 0x7fc4994c26e0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:44:47 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 14:44:47 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 14:44:47 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 14:44:47 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 14:44:48 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 14:44:48 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 14:45:00 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e15cf0a0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:01 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3c88488b0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:09 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 14:45:09 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 14:45:11 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3c8848220> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:12 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e1590340> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:12 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e15cca30> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:12 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3c884a3e0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:12 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3c8848b50> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:12 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3c884ad10> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:12 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3c884b130> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:12 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3c884bf40> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:12 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a54cd0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:12 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3c884b580> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:12 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a566e0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:12 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e1592020> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:12 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a56a40> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:12 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestResult at 0x7fa3e8a56470> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:12 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a54340> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:12 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a57a00> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:12 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e1590460> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:12 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e1590a00> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:12 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a55de0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:12 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a55b40> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:12 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a55c90> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:12 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a57a90> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:12 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3c88483a0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:12 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3c88484f0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:12 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3c88498d0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:12 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a57eb0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:12 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a543a0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:12 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a56590> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:12 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3c88486d0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:12 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3c884aec0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:12 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e1592680> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:12 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a56e30> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:13 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestResult at 0x7fa3e1567fa0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:13 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a555d0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:13 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a57220> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:13 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e1590280> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:13 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a562c0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:13 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a570d0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:13 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestResult at 0x7fa3e15660e0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:13 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e1567f40> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:13 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a56bc0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:13 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3c884a410> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:13 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a54850> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:13 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestResult at 0x7fa3e8a88d00> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:13 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3c88495d0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:13 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e1590bb0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:13 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e15cf0a0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:13 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a56c80> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:13 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e1590640> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:13 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3c884b4f0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:13 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a543a0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:13 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a56e00> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:13 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3c884b6a0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:13 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3c8848220> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:13 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a57b80> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:13 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a54d30> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:13 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a57d30> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:14 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a54340> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:14 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a56650> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:14 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a55360> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:14 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a56e30> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:14 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a55150> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:14 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a563e0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:14 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a543a0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:14 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a54850> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:14 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a57220> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:14 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestResult at 0x7fa3e15cdd80> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:14 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a56020> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:14 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a55c60> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:14 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3c88484f0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:14 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a54d00> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:14 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a57d00> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:14 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a56260> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:14 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a559f0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:14 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a56440> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:14 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a56c20> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:14 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a55f00> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:14 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a55420> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:14 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a56cb0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:14 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a54f70> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:14 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a57b50> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:14 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a55360> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:14 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a55090> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:14 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a579d0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:15 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a55a50> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:15 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a55b70> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:15 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a567d0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:15 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a57b80> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:15 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestResult at 0x7fa3e8a57970> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:15 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a89030> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:15 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a573a0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:15 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a562c0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:15 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a56d40> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:15 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a54eb0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:15 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a54340> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:15 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a56200> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:15 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a54e50> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:15 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a57bb0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:16 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3c884b1f0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:16 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a88fa0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:16 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a89780> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:16 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a54340> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:16 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a885b0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:16 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a88f40> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:16 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a88400> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:16 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a88e80> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:16 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a88fd0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:16 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a88c10> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:16 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a54e50> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:16 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a891b0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:16 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a89b70> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:16 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a56830> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:16 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a56350> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:16 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a88730> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:16 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3c884b910> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:16 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a8a890> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:16 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a888e0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:17 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a550f0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:17 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a8b3d0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:17 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a8ab60> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:17 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a88d00> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:17 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a8a5f0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:17 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a89150> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:17 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a88100> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:17 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a88190> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:17 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a8ab00> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:17 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a89570> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:17 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a55090> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:17 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a88f70> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:17 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a548b0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:17 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a89540> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:17 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a8b760> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:17 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a89870> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:17 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a899c0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:17 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a8ae30> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:18 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a8add0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:18 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a88a30> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:18 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a562f0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:18 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a8a8c0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:18 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a88490> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:18 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a8bb80> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:18 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a8a620> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:18 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a8a560> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:18 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a8ba60> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:18 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a89c00> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:18 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a89510> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:18 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a895d0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:18 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a8b940> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:18 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a89bd0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:18 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a8bee0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:18 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a548b0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:18 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a89990> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:18 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a8b790> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:18 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a89840> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:18 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a8bdf0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:19 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a89030> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:19 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a8b220> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:19 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a574c0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:19 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a88d90> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:19 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a89e10> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:19 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a8b730> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:19 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a89c90> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:19 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a8bf10> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:19 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a8a6e0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:19 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a88520> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:19 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a88100> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:19 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a8b880> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:19 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a89cf0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:19 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a8b520> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:19 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a56830> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:20 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a8b4f0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:20 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a8bc10> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:20 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a883d0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:20 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a89b40> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:20 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a89db0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:20 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a89c60> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:20 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a894b0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:20 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a89fc0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:21 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a6e380> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:21 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a882e0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:21 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a89330> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:21 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a89630> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:21 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a88790> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:21 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a8bcd0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:22 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a8b6a0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:22 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a56f20> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:22 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a8a5c0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:22 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a88a30> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:23 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a88d60> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:23 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a89360> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:23 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a54d30> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:23 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a897b0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:23 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a89360> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:23 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3c881b0a0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:24 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a89960> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:24 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a89cf0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:24 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a8bd00> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:24 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a54ee0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:24 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a57970> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:24 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a57280> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:24 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a576d0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:24 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a54fa0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:24 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a565c0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:24 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a54df0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:24 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a54d60> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:24 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a55de0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:24 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a54430> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:25 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a54970> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:25 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a56ad0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:25 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a56fb0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:25 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a561d0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:25 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a54eb0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:25 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestResult at 0x7fa3e8a56a10> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:25 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a55f30> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:25 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a57b80> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:25 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a54880> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:26 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a8bac0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:26 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a578b0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:26 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a554e0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:26 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a8bf40> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:26 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a543d0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:26 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a56b30> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:26 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a57100> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:26 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a8ba90> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:26 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a54a90> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:26 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a546d0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:27 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a57910> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:27 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a54d00> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:27 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a565c0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:27 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a57ac0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:27 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3c881b790> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:28 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a564a0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:28 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a566e0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:28 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3e8a57820> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:28 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 14:45:28 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 14:45:28 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa3c8849360> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:45:39 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 14:45:39 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 14:45:39 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 14:45:39 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 14:45:39 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 14:45:39 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 14:45:46 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 14:45:46 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 14:45:46 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 14:45:46 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 14:45:46 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 14:45:46 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 14:45:53 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 14:45:53 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 14:45:53 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 14:45:53 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 14:45:53 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 14:45:53 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 14:46:06 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7f87a0ad8940> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:46:27 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/fills-history?instType=SPOT "HTTP/2 401 Unauthorized"
2025-05-24 14:46:27 - backend.controller_center.trade.trade_service - ERROR - Failed to get fills history: 50110, Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 14:46:27 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/fills-history?instType=SPOT "HTTP/2 401 Unauthorized"
2025-05-24 14:46:27 - backend.controller_center.trade.trade_service - ERROR - Failed to get fills history: 50110, Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 14:46:27 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 14:46:27 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 14:48:54 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 14:48:54 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 14:48:54 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-24 14:48:54 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-24 14:48:54 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-24 14:48:54 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-24 14:48:54 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-24 14:48:54 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-24 14:48:55 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 401 Unauthorized"
2025-05-24 14:48:55 - backend.service_center.okx_service.okx_spot_order_record_service - WARNING - 获取历史订单失败或没有数据
2025-05-24 14:48:55 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - No manual live spot orders.
2025-05-24 14:48:55 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-24 14:48:55 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 401 Unauthorized"
2025-05-24 14:48:55 - backend.service_center.okx_service.okx_spot_order_record_service - WARNING - 获取历史订单失败或没有数据
2025-05-24 14:48:55 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - No manual live spot orders.
2025-05-24 14:48:55 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-24 14:48:55 - backend.service_center.okx_service.okx_balance_service - INFO - 初始化OKXBalanceService
2025-05-24 14:48:55 - backend.service_center.okx_service.okx_balance_service - INFO - OKXBalanceService初始化完成
2025-05-24 14:48:55 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 14:48:55 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 14:48:55 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 14:48:55 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 14:48:55 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 14:48:55 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 14:48:55 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 14:48:55 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 14:48:55 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 14:48:56 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 14:48:56 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 14:48:56 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 14:48:56 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 14:48:56 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 14:48:57 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 14:48:57 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 14:49:38 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 14:49:38 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 14:49:38 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 14:49:38 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 14:49:39 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 14:49:39 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 14:49:39 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: This session is provisioning a new connection; concurrent operations are not permitted (Background on this error at: https://sqlalche.me/e/20/isce)
2025-05-24 14:49:43 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 14:49:43 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 14:49:43 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 14:49:43 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 14:49:44 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 14:49:44 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 14:49:44 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: This session is provisioning a new connection; concurrent operations are not permitted (Background on this error at: https://sqlalche.me/e/20/isce)
2025-05-24 14:49:45 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7f77a06c4e20> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:50:08 - backend.service_center.okx_service.okx_balance_service - INFO - 初始化OKXBalanceService
2025-05-24 14:50:08 - backend.service_center.okx_service.okx_balance_service - INFO - OKXBalanceService初始化完成
2025-05-24 14:50:08 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 14:50:08 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 14:50:08 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 14:50:08 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 14:50:08 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 14:50:08 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 14:50:08 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 14:50:08 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 14:50:08 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 14:50:08 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 14:50:08 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 14:50:08 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 14:50:08 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 14:50:08 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 14:50:09 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 14:50:09 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 14:50:12 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7f77c9a3c7f0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:51:06 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 14:51:06 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 14:51:06 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 14:51:06 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 14:51:07 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 14:51:07 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 14:51:16 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 14:51:16 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 14:51:16 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 14:51:16 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 14:51:17 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 14:51:17 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 14:51:20 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:52:32 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb685e8b50> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:52:33 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb686aac80> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:52:34 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb68636350> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:52:35 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fcb685e8d30> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:52:37 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99be1600> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:52:38 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb68637be0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:52:39 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb686aada0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:52:42 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fcb99be31f0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:52:43 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fcb685e85e0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:52:45 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fcb685e8640> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:52:46 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fcb685e86a0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:52:47 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fcb686aa8f0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:52:48 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb686a9f60> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:52:49 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb888c18a0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:52:51 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fcb686aa050> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:52:52 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb686aa9b0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:52:53 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fcb99be0c10> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:52:54 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb686aaf80> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:52:56 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb686aa350> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:52:57 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb685e82b0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:52:58 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fcb99be3c70> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:52:59 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fcb685e8910> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:00 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fcb686aace0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:01 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fcb99be3190> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:02 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99be0f40> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:03 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99be1db0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:04 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99be1b40> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:05 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb686377f0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:36 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/fills-history?instType=SPOT "HTTP/2 401 Unauthorized"
2025-05-24 14:53:36 - backend.controller_center.trade.trade_service - ERROR - Failed to get fills history: 50110, Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 14:53:36 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/fills-history?instType=SPOT "HTTP/2 401 Unauthorized"
2025-05-24 14:53:36 - backend.controller_center.trade.trade_service - ERROR - Failed to get fills history: 50110, Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 14:53:39 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:39 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:39 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:39 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:39 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fcb685e8cd0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:39 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:39 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:39 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:39 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:39 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:39 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb686ab2e0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:39 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c13b50> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:39 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c13940> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:39 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:39 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fcb99c13b80> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:39 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb686aad10> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:39 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb685e96c0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:39 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c91210> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:39 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:39 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:39 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestResult at 0x7fcb99be3be0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:39 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:39 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:40 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:40 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:40 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:40 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c90340> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:40 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestResult at 0x7fcb686aa2f0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:40 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:40 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:40 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fcb99c11000> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:40 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:40 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fcb99c91c30> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:40 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99be2290> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:40 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:40 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c920b0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:40 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c91d20> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:40 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:40 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c911e0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:40 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:40 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:40 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:40 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:40 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c926e0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:40 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestResult at 0x7fcb99c905e0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:40 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c912d0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:40 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:41 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c921a0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:41 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c90070> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:41 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:41 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:41 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestResult at 0x7fcb99c903a0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:41 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:41 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:41 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:41 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:41 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c93490> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:41 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:41 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:41 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:41 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:41 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fcb99c91ba0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:41 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:41 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:41 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:41 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c92620> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:41 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:41 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:42 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:42 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestResult at 0x7fcb99be3e20> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:42 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:42 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fcb99c93100> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:42 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c93130> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:42 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:42 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestResult at 0x7fcb99c93400> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:42 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c932e0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:42 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:42 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:42 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestResult at 0x7fcb99c91990> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:42 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c92e90> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:42 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:42 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:42 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c916f0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:42 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:42 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fcb99c921a0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:42 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c92710> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:42 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:42 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:42 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c937c0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:42 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:42 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c92050> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:42 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:43 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c93790> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:43 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:43 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:43 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c93730> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:43 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c909d0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:43 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:43 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:43 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fcb99c91b10> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:43 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c91600> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:43 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:43 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c93400> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:43 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c92440> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:43 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c93310> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:43 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:43 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:43 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:43 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:43 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:43 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:43 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:43 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:43 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c90250> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:43 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c93940> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:43 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:43 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99ca09a0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:43 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:43 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:44 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:44 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:44 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c92ef0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:44 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:44 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:44 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:44 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestResult at 0x7fcb99c90ee0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:44 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:44 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c93c40> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:44 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c90f10> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:44 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:44 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:44 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:44 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fcb99c907c0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:44 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99ca0370> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:44 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99ca1ba0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:44 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:44 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:44 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:44 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:44 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:44 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:44 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:45 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:45 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99ca2650> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:45 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:45 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:45 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99ca04c0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:45 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99ca1210> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:45 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:45 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:45 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:45 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c91840> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:45 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99ca23e0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:45 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c93dc0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:45 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:45 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c92290> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:45 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99ca0340> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:45 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99ca28c0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:45 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:45 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:45 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:45 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99ca13f0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:45 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99ca17b0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:46 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:46 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99ca0af0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:46 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:46 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99ca0f10> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:46 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:46 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestResult at 0x7fcb99ca1e40> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:46 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:46 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fcb99ca0eb0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:46 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:46 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:46 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:46 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fcb99ca26e0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:46 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99ca0dc0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:46 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:46 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:46 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestResult at 0x7fcb99ca1930> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:46 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestResult at 0x7fcb99ca24a0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:46 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestResult at 0x7fcb99ca1c30> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:46 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99ca07f0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:46 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:46 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:46 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99ca1d20> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:46 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99ca1120> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:46 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c907c0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:46 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:46 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fcb99ca0ee0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:47 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99ca23e0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:47 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:47 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:47 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:47 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:47 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fcb99ca1090> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:47 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99ca2bc0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:47 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:47 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fcb99ca3130> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:47 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:47 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99ca3d00> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:47 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99ca1090> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:47 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99ca0700> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:47 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99ca2320> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:47 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:47 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:47 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:47 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fcb99ca1e40> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:47 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99ca3550> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:47 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:47 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99ca1c60> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:47 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99ca1e40> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:47 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99ca34f0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:48 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestResult at 0x7fcb99ca1f00> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:48 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99ca2350> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:48 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:48 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:48 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:48 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:48 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:48 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:48 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:48 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:48 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:48 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestResult at 0x7fcb99ca1a50> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:48 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:48 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:48 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:48 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fcb99ca1a50> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:48 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:48 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fcb99ca12d0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:48 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestResult at 0x7fcb99ca0fd0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:48 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99ca0fa0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:49 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:49 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99ca2470> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:49 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99ca10f0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:49 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99ca2710> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:49 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:49 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fcb99ca05b0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:49 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:49 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fcb99ca10f0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:49 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:49 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99ca1fc0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:49 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99ca01c0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:49 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:49 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99ca13c0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:49 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:49 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:49 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:49 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c98760> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:49 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99ca1c60> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:49 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:49 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c98a30> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:50 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99ca20b0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:50 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:50 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99ca1000> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:50 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c98e50> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:50 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:50 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c99030> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:50 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:50 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fcb99ca36d0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:50 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:50 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fcb99c995d0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:50 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:50 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:50 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:50 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fcb99ca1d20> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:50 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:50 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:50 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:50 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:50 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:50 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:50 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:51 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:51 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:51 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:51 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99ca1900> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:51 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:51 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:51 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99ca3ac0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:51 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:51 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c98220> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:51 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:51 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:51 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:51 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c991b0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:51 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:52 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c99840> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:52 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99ca05b0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:52 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c993f0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:52 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c9a0b0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:52 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:52 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99ca1210> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:52 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c9a110> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:52 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:52 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c99a50> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:52 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99ca38e0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:52 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:52 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestResult at 0x7fcb99c991e0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:52 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:52 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:52 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:52 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fcb99c98af0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:52 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:52 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestResult at 0x7fcb99c98850> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:52 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:53 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:53 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:53 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c98ca0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:53 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c98e50> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:53 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:53 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fcb99c98340> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:53 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:53 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c99630> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:53 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:53 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fcb99c9ae60> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:53 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c9a4d0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:53 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c989a0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:53 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:53 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fcb99c993f0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:53 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c99270> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:53 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:53 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:53 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c99ea0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:53 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:53 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:53 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fcb99c983d0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:53 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:53 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fcb99c98b50> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:54 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:54 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:54 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:54 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:54 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:54 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:54 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:54 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c98ca0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:54 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:54 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:54 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c9a1a0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:54 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:54 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:54 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestResult at 0x7fcb99c9b1f0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:54 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:55 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c9beb0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:55 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:55 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:55 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fcb99be2ad0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:55 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:55 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c9add0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:55 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c9aa10> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:55 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c9ab00> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:55 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:55 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:55 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:55 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:56 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:56 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fcb99c9b220> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:56 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:56 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestResult at 0x7fcb99c99360> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:56 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:56 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fcb99c98790> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:56 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:56 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fcb99c9b700> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:56 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c9b460> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:56 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:56 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:56 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:56 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:56 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:56 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:56 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:56 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:57 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:57 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:57 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c99300> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:57 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:57 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:57 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99c98dc0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:57 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:57 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:57 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:57 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:57 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:57 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:58 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:58 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:58 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:58 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:58 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:58 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:58 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:58 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:58 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:58 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fcb99ca4820> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:53:58 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:58 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:58 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 14:53:59 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 14:53:59 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:59 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: unsupported operand type(s) for +: 'NoneType' and 'float'
2025-05-24 14:53:59 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fcb99ca7790> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:54:08 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 14:54:08 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 14:54:08 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 14:54:08 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 14:54:08 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 14:54:08 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 14:54:27 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 14:54:27 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 14:54:27 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 14:54:27 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 14:54:28 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 14:54:28 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 14:54:31 - tvDatafeed.main - ERROR - error while signin
2025-05-24 14:54:31 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 14:54:38 - backend.controller_center.backtest.backtest_service - ERROR - 运行回测失败: 'BacktestSystem' object has no attribute 'analyzers'
2025-05-24 14:55:31 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fe5e10db730> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:55:32 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fe5e10dbe80> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:55:33 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fe5b08c9660> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:55:33 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fe5b0897d90> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:55:34 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fe5b08caaa0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:55:35 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fe5e108c3a0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:55:36 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fe5b08c84f0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:55:37 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fe5b08ca170> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:55:38 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fe5b08c90c0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:55:38 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fe5b08cb8e0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:55:39 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestResult at 0x7fe5b08c9150> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:55:40 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fe5e108ccd0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:55:40 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fe5b08cb460> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:55:42 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fe5b08cb9a0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:55:42 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fe5b08c9660> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:55:43 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fe5b08caf80> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:55:45 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fe5e108c250> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:55:45 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fe5e108c820> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:55:47 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fe5b08cb400> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:55:47 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fe5b08cba60> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:55:48 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fe5b08cab90> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:55:49 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestResult at 0x7fe5b08c85b0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:55:49 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fe5b08cbd00> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:55:51 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fe5b08cafb0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:55:51 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fe5b08ca290> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:55:52 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fe5b08ca290> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:55:52 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fe5b08cb0d0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:55:53 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fe5b08c9660> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:55:54 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fe5b08ed9c0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:55:54 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fe5b08cb9d0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:55:55 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fe5b08ede10> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:55:55 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fe5b08cb7f0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:55:56 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fe5b08eda50> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:55:56 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fe5b08ed8a0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:55:57 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fe5b08cb0a0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:55:58 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fe5b08ec940> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:55:59 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fe5b08eead0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:00 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fe5b08eeaa0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:01 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fe5b08ee1d0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:02 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fe5b08ed000> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:02 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fe5b08edff0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:03 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fe5b08ed540> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:04 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fe5b08ec9a0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:04 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fe5b08ee620> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:05 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fe5b08ed840> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:06 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fe5b08ec3a0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:07 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fe5b08ec5e0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:07 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fe5b08eea10> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:08 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fe5b08edc00> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:09 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fe5b08ee3b0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:10 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fe5b08efa00> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:11 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fe5b08caad0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:11 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fe5b08c82b0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:12 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fe5b08ee5f0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:13 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fe5b08ee110> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:14 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fe5b08ef3d0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:14 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fe5b08edbd0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:16 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fe5b08edb10> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:17 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fe5b08efc10> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:17 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fe5b08ee9b0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:18 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fe5b08ee050> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:18 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fe5b08efac0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:19 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fe5b08eeb00> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:20 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fe5b08ec940> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:20 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fe5b08eeb00> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:28 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 14:56:28 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 14:56:28 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 14:56:28 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 14:56:28 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 14:56:28 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 14:56:28 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: This session is provisioning a new connection; concurrent operations are not permitted (Background on this error at: https://sqlalche.me/e/20/isce)
2025-05-24 14:56:28 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: This session is provisioning a new connection; concurrent operations are not permitted (Background on this error at: https://sqlalche.me/e/20/isce)
2025-05-24 14:56:29 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fa76946d0f0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:29 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fa76944f400> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:30 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fa76946d2a0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:31 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa769508820> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:32 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fa76944ebf0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:32 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa76946d3c0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:33 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa769508b50> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:34 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fa76946e890> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:34 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fa76946ce20> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:35 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fa769508820> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:35 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fa7695092d0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:36 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fa7694b6770> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:37 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa76944f700> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:38 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fa76944c1f0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:39 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa76946d360> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:40 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fa7694b4f70> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:41 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fa76946cb20> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:42 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa76950abc0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:42 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fa76946c400> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:43 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fa769508cd0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:43 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fa76946d240> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:44 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fa769508dc0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:47 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 14:56:47 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 14:56:47 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 14:56:47 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 14:56:48 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 14:56:48 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 14:56:49 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7f95c184e320> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:50 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7f95c18c1240> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:51 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7f95c18008b0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:51 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7f95c184d3c0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:52 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7f95c18c16c0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:52 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7f95c184dae0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:53 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7f95c184e290> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:54 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7f95c184d5d0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:54 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7f95c184d9c0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:55 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7f95c18c11e0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:56 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7f95c18009a0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:57 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7f95c1800310> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:58 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7f95c184c7f0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:58 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7f95c18c1cc0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:59 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7f95c184cbb0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:56:59 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7f95c18c3e20> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:00 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7f95c184d390> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:01 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7f95c18c10c0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:01 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7f95c18c2590> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:03 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7f95c184cb50> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:04 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7f95c18c0fd0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:05 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7f95c18c2800> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:05 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7f95c18c0550> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:06 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7f95c18c25c0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:07 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7f95c18c01c0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:07 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7f95c18c3d30> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:08 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestResult at 0x7f95c18c2410> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:12 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 14:57:12 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 14:57:12 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 14:57:12 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 14:57:13 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 14:57:13 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 14:57:13 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: This session is provisioning a new connection; concurrent operations are not permitted (Background on this error at: https://sqlalche.me/e/20/isce)
2025-05-24 14:57:13 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: This session is provisioning a new connection; concurrent operations are not permitted (Background on this error at: https://sqlalche.me/e/20/isce)
2025-05-24 14:57:13 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7f95091ea290> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:14 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7f950919cb50> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:15 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7f950919c910> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:19 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 14:57:19 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 14:57:19 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 14:57:19 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 14:57:19 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 14:57:19 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 14:57:19 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: This session is provisioning a new connection; concurrent operations are not permitted (Background on this error at: https://sqlalche.me/e/20/isce)
2025-05-24 14:57:21 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1f17ac9d0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:21 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1f18620e0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:22 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1f17ad510> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:23 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1f1861090> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:23 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1f1797a90> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:24 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1f18637f0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:24 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1f1861930> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:25 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1f1862c20> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:26 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1f1861510> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:26 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1f17ac220> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:29 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1f1861990> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:30 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1f1861f00> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:30 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1f18614b0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:31 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1f1861ea0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:36 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1f17fceb0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:37 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1f17ac550> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:38 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1f18624a0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:38 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1d05b88b0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:39 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1d05b9300> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:40 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1d05b8340> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:40 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1d05b8d60> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:41 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1d05b8df0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:41 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1f1862e00> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:42 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1d05ba920> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:43 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1d05b9600> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:43 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1f1863130> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:44 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1d05bba60> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:44 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1f1863310> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:45 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1d05b8130> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:46 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1f1863190> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:46 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1f1862530> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:47 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1f1863130> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:48 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1d05b95a0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:48 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1f18625c0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:49 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1d05baaa0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:49 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1d05b9f60> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:50 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1f17ad1e0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:51 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1f1862350> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:51 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1f18625c0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:52 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1f18625c0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:53 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1d05b99c0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:54 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1f1863430> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:55 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1d05b91e0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:55 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1d05bb880> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:56 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1d05b8ca0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:56 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1d05b91e0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:57 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1d05b87c0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:58 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1d05b8a60> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:58 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1d05b8c10> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:57:59 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1d05bb2e0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:00 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1d05b9b40> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:00 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1d05bace0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:01 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1d05b92a0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:02 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1d05b8880> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:02 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1d05b8b50> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:03 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1d05bbee0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:04 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1d05bbd00> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:04 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1d05bbc10> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:05 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1d05b9780> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:06 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1d05b8070> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:06 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1d05b8700> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:07 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1d05ba080> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:07 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1d05b9ae0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:08 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1d05ba980> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:09 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1d05ce7d0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:10 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1d05b8f10> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:11 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1f17ae800> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:11 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1d05cc340> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:12 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1d05bab60> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:12 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1d05ceb90> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:13 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1d05b9090> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:14 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1d05ce380> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:14 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1d05c5b10> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:15 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1d05c6890> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:15 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1d05b8d60> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:16 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1d05c4fa0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:17 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1d05c6200> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:17 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1d05c5a50> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:18 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1d05bb580> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:18 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1d05c53f0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:19 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1d05ba200> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:20 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1d05b8070> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:21 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1d05bbe80> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:22 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1d05c4fa0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:22 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1d05b8c10> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:23 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1d05babc0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:24 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1d05b8610> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:24 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1d05c4ca0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:25 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1d05c4250> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:25 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1d05c7430> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:26 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1d05c4df0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:27 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1d05c6410> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:28 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fd1d05c5720> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:28 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1d05c48e0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:28 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1d05c4fa0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:29 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1d05c78b0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:51 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1d05c4520> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:52 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1f17ffe20> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:52 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fd1d05c5f90> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:58:57 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 14:58:57 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 14:58:57 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 14:58:57 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 14:58:58 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 14:58:58 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 14:59:09 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: This session is provisioning a new connection; concurrent operations are not permitted (Background on this error at: https://sqlalche.me/e/20/isce)
2025-05-24 14:59:09 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7ff5d92b6b00> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 14:59:26 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 14:59:26 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 14:59:26 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 14:59:26 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 14:59:27 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 14:59:27 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 14:59:30 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fa8607a7fd0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:00:56 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 15:00:56 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 15:00:56 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 15:00:56 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 15:00:57 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 15:00:57 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 15:01:10 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 15:01:10 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 15:01:10 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 15:01:10 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 15:01:10 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 15:01:10 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 15:01:12 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: 'BacktestResult' object has no attribute 'initial_value'
2025-05-24 15:01:12 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fea996ee710> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:01:13 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: 'BacktestResult' object has no attribute 'initial_value'
2025-05-24 15:01:13 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fea99671660> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:01:13 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: 'BacktestResult' object has no attribute 'initial_value'
2025-05-24 15:01:13 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fea9962c670> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:01:13 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: 'BacktestResult' object has no attribute 'initial_value'
2025-05-24 15:01:13 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fea68f80ca0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:01:21 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestResult at 0x7fea68f82a70> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:01:21 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录列表失败: Object <BacktestResult at 0x7fea68f83580> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:02:21 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: 'BacktestResult' object has no attribute 'initial_value'
2025-05-24 15:02:21 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录列表失败: Object <BacktestResult at 0x7fea68f81660> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:02:28 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: 'BacktestResult' object has no attribute 'initial_value'
2025-05-24 15:02:29 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: 'BacktestResult' object has no attribute 'initial_value'
2025-05-24 15:02:29 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fea9962c580> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:02:29 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: 'BacktestResult' object has no attribute 'initial_value'
2025-05-24 15:02:29 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fea68f815a0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:02:29 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: 'BacktestResult' object has no attribute 'initial_value'
2025-05-24 15:02:29 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fea68f80400> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:02:52 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fea99671900> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:02:52 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: 'BacktestResult' object has no attribute 'initial_value'
2025-05-24 15:02:52 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: 'BacktestResult' object has no attribute 'initial_value'
2025-05-24 15:02:52 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fea68f837c0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:02:54 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: 'BacktestResult' object has no attribute 'initial_value'
2025-05-24 15:02:54 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fea9962ccd0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:02:54 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: 'BacktestResult' object has no attribute 'initial_value'
2025-05-24 15:02:54 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fea68f833a0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:02:54 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: 'BacktestResult' object has no attribute 'initial_value'
2025-05-24 15:02:59 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: 'BacktestResult' object has no attribute 'initial_value'
2025-05-24 15:02:59 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fea68f80a60> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:02:59 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: 'BacktestResult' object has no attribute 'initial_value'
2025-05-24 15:02:59 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: 'BacktestResult' object has no attribute 'initial_value'
2025-05-24 15:03:38 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 15:03:38 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 15:03:38 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 15:03:38 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 15:03:38 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 15:03:38 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 15:03:47 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 15:03:47 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 15:03:47 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 15:03:47 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 15:03:47 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 15:03:47 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 15:03:48 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: This session is provisioning a new connection; concurrent operations are not permitted (Background on this error at: https://sqlalche.me/e/20/isce)
2025-05-24 15:04:18 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 15:04:18 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 15:04:18 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 15:04:18 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 15:04:18 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 15:04:18 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 15:04:26 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 15:04:26 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 15:04:26 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 15:04:26 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 15:04:27 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 15:04:27 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 15:04:27 - tvDatafeed.main - ERROR - error while signin
2025-05-24 15:04:27 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 15:04:33 - backend.controller_center.backtest.backtest_service - ERROR - 运行回测失败: 'BacktestSystem' object has no attribute 'analyzers'
2025-05-24 15:05:01 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 15:05:01 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 15:05:01 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 15:05:01 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 15:05:02 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 15:05:02 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 15:05:13 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: 'BacktestResult' object has no attribute 'sharpe_ratio'
2025-05-24 15:06:30 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: 'BacktestResult' object has no attribute 'sharpe_ratio'
2025-05-24 15:06:30 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fb4991128f0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:06:30 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fb4784c2ad0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:06:30 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: 'BacktestResult' object has no attribute 'sharpe_ratio'
2025-05-24 15:06:30 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: 'BacktestResult' object has no attribute 'sharpe_ratio'
2025-05-24 15:06:30 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fb478504cd0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:06:54 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 15:06:54 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 15:06:54 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 15:06:54 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 15:06:55 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 15:06:55 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 15:07:01 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 15:07:01 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 15:07:01 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 15:07:01 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 15:07:02 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 15:07:02 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 15:07:07 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: type object 'BacktestRecord' has no attribute 'entry_time'
2025-05-24 15:07:07 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: 'BacktestResult' object has no attribute 'sharpe_ratio'
2025-05-24 15:07:07 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: type object 'BacktestRecord' has no attribute 'entry_time'
2025-05-24 15:07:07 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: 'BacktestResult' object has no attribute 'sharpe_ratio'
2025-05-24 15:07:38 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 15:07:38 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 15:07:38 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 15:07:38 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 15:07:39 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 15:07:39 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 15:07:45 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 15:07:45 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 15:07:45 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 15:07:45 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 15:07:46 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 15:07:46 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 15:07:47 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: 'BacktestResult' object has no attribute 'timeframe'
2025-05-24 15:07:47 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fe388a49240> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:07:49 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: 'BacktestResult' object has no attribute 'timeframe'
2025-05-24 15:07:49 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fe349394df0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:07:49 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: 'BacktestRecord' object has no attribute 'position_size'
2025-05-24 15:07:49 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: 'BacktestResult' object has no attribute 'timeframe'
2025-05-24 15:07:49 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录列表失败: Object <BacktestResult at 0x7fe388a64850> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:08:18 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 15:08:18 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 15:08:18 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 15:08:18 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 15:08:19 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 15:08:19 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 15:08:48 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 15:08:48 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 15:08:48 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 15:08:48 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 15:08:48 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 15:08:48 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 15:08:50 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: This session is provisioning a new connection; concurrent operations are not permitted (Background on this error at: https://sqlalche.me/e/20/isce)
2025-05-24 15:08:50 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: 'BacktestRecord' object has no attribute 'position_size'
2025-05-24 15:08:50 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: 'BacktestRecord' object has no attribute 'position_size'
2025-05-24 15:08:50 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: 'BacktestResult' object has no attribute 'timeframe'
2025-05-24 15:08:50 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: 'BacktestResult' object has no attribute 'timeframe'
2025-05-24 15:08:50 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fb8d109e920> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:09:24 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 15:09:24 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 15:09:24 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 15:09:24 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 15:09:24 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 15:09:24 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 15:09:34 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 15:09:34 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 15:09:34 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 15:09:34 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 15:09:35 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 15:09:35 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 15:09:39 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: 'BacktestRecord' object has no attribute 'commission'
2025-05-24 15:09:39 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: 'BacktestResult' object has no attribute 'notes'
2025-05-24 15:09:39 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: 'BacktestResult' object has no attribute 'notes'
2025-05-24 15:09:39 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7feb00caa440> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:10:35 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 15:10:35 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 15:10:37 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 15:10:37 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-24 15:10:37 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 15:10:37 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-24 15:10:37 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-24 15:10:37 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-24 15:10:37 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-24 15:10:37 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-24 15:10:37 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 401 Unauthorized"
2025-05-24 15:10:37 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 401 Unauthorized"
2025-05-24 15:10:37 - backend.service_center.okx_service.okx_spot_order_record_service - WARNING - 获取历史订单失败或没有数据
2025-05-24 15:10:37 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - No manual live spot orders.
2025-05-24 15:10:37 - backend.service_center.okx_service.okx_spot_order_record_service - WARNING - 获取历史订单失败或没有数据
2025-05-24 15:10:37 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-24 15:10:37 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - No manual live spot orders.
2025-05-24 15:10:37 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-24 15:10:37 - backend.service_center.okx_service.okx_balance_service - INFO - 初始化OKXBalanceService
2025-05-24 15:10:37 - backend.service_center.okx_service.okx_balance_service - INFO - OKXBalanceService初始化完成
2025-05-24 15:10:37 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 15:10:37 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 15:10:38 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 15:10:38 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 15:10:38 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 15:10:38 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 15:10:38 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 15:10:38 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 15:10:38 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 15:10:38 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 15:10:38 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 15:10:38 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 15:10:38 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 15:10:38 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 15:10:39 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 15:10:39 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 15:10:51 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 15:10:51 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 15:10:51 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 15:10:51 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 15:10:51 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 15:10:51 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 15:10:58 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 15:10:58 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 15:10:58 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 15:10:58 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 15:10:58 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 15:10:58 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 15:10:58 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7ff630972bf0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:11:30 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 15:11:30 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 15:11:30 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 15:11:30 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 15:11:30 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 15:11:30 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 15:11:31 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fdc78dd3250> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:11:33 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: invalid literal for int() with base 10: b'w\x00\x00\x00\x00\x00\x00\x00'
2025-05-24 15:11:33 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fdc78cf68c0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:11:33 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fdc78dd3a90> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:11:33 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fdc78dd0ac0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:11:57 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: invalid literal for int() with base 10: b'\xe8\x00\x00\x00\x00\x00\x00\x00'
2025-05-24 15:11:57 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: invalid literal for int() with base 10: b'\xe8\x00\x00\x00\x00\x00\x00\x00'
2025-05-24 15:11:57 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fdc78dd0670> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:12:44 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 15:12:44 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 15:12:44 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 15:12:44 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 15:12:45 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 15:12:45 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 15:12:45 - backend.service_center.okx_service.okx_balance_service - INFO - 初始化OKXBalanceService
2025-05-24 15:12:45 - backend.service_center.okx_service.okx_balance_service - INFO - OKXBalanceService初始化完成
2025-05-24 15:12:45 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 15:12:45 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 15:12:46 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 15:12:46 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 15:12:46 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 15:12:46 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 15:12:46 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 15:12:46 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 15:12:46 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 15:12:46 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 15:12:46 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 15:12:46 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 15:12:46 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 15:12:46 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 15:12:46 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 15:12:46 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-24 15:12:46 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-24 15:12:46 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 15:12:46 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-24 15:12:46 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-24 15:12:46 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-24 15:12:46 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-24 15:12:46 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 401 Unauthorized"
2025-05-24 15:12:46 - backend.service_center.okx_service.okx_spot_order_record_service - WARNING - 获取历史订单失败或没有数据
2025-05-24 15:12:46 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - No manual live spot orders.
2025-05-24 15:12:46 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-24 15:12:46 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 401 Unauthorized"
2025-05-24 15:12:46 - backend.service_center.okx_service.okx_spot_order_record_service - WARNING - 获取历史订单失败或没有数据
2025-05-24 15:12:46 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - No manual live spot orders.
2025-05-24 15:12:46 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-24 15:12:47 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 15:12:47 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 15:12:48 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 15:12:48 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 15:12:48 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 15:12:48 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 15:12:48 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 15:12:48 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 15:12:48 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 15:12:48 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 15:12:48 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 15:12:48 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 15:12:48 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 15:12:48 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 15:12:49 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 15:12:49 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 15:12:51 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 15:12:51 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 15:12:51 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-24 15:12:51 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-24 15:12:51 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-24 15:12:51 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-24 15:12:51 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-24 15:12:51 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-24 15:12:51 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 401 Unauthorized"
2025-05-24 15:12:51 - backend.service_center.okx_service.okx_spot_order_record_service - WARNING - 获取历史订单失败或没有数据
2025-05-24 15:12:51 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - No manual live spot orders.
2025-05-24 15:12:51 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-24 15:12:51 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 401 Unauthorized"
2025-05-24 15:12:51 - backend.service_center.okx_service.okx_spot_order_record_service - WARNING - 获取历史订单失败或没有数据
2025-05-24 15:12:51 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - No manual live spot orders.
2025-05-24 15:12:51 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-24 15:12:57 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 15:12:57 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 15:12:57 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 15:12:57 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 15:12:57 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 15:12:57 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 15:12:57 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 15:12:57 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 15:12:59 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 15:12:59 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: invalid literal for int() with base 10: b't\x00\x00\x00\x00\x00\x00\x00'
2025-05-24 15:12:59 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fb5b06934f0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:12:59 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 15:12:59 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 15:13:42 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 15:13:42 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 15:13:42 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 15:13:42 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 15:13:42 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 15:13:42 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 15:13:43 - backend.service_center.okx_service.okx_balance_service - INFO - 初始化OKXBalanceService
2025-05-24 15:13:43 - backend.service_center.okx_service.okx_balance_service - INFO - OKXBalanceService初始化完成
2025-05-24 15:13:43 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 15:13:43 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 15:13:43 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 15:13:43 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 15:13:43 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 15:13:43 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 15:13:43 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 15:13:43 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 15:13:43 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 15:13:43 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 15:13:43 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 15:13:43 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 15:13:43 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 15:13:43 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 15:13:44 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 15:13:44 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 15:13:50 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 15:13:50 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 15:13:50 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 15:13:50 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 15:13:51 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 15:13:51 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 15:13:51 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 15:13:51 - backend.controller_center.backtest.backtest_service - ERROR - 处理回测结果数据时出错: invalid literal for int() with base 10: b't\x00\x00\x00\x00\x00\x00\x00'
2025-05-24 15:13:51 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7f80a022bee0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:13:51 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 15:13:51 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 15:13:53 - backend.controller_center.backtest.backtest_service - ERROR - 处理回测结果数据时出错: invalid literal for int() with base 10: b't\x00\x00\x00\x00\x00\x00\x00'
2025-05-24 15:13:53 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7f80a01c79a0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:13:53 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 15:13:53 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 15:13:53 - backend.controller_center.backtest.backtest_service - ERROR - 处理回测结果数据时出错: invalid literal for int() with base 10: b't\x00\x00\x00\x00\x00\x00\x00'
2025-05-24 15:13:53 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7f80a01c7970> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:13:53 - backend.controller_center.backtest.backtest_service - ERROR - 处理回测结果数据时出错: invalid literal for int() with base 10: b't\x00\x00\x00\x00\x00\x00\x00'
2025-05-24 15:13:53 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7f80a0186f80> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:13:53 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 15:13:53 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 15:13:53 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 15:14:01 - backend.controller_center.backtest.backtest_service - ERROR - 处理回测结果数据时出错: invalid literal for int() with base 10: b't\x00\x00\x00\x00\x00\x00\x00'
2025-05-24 15:14:01 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: ETH-USDT_ST2_202505241340
2025-05-24 15:14:01 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 15:14:01 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 15:14:01 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: ETH-USDT_ST2_202505241342
2025-05-24 15:14:01 - backend.controller_center.backtest.backtest_service - ERROR - 处理回测结果数据时出错: invalid literal for int() with base 10: b't\x00\x00\x00\x00\x00\x00\x00'
2025-05-24 15:14:01 - backend.controller_center.backtest.backtest_service - ERROR - 处理回测结果数据时出错: invalid literal for int() with base 10: b't\x00\x00\x00\x00\x00\x00\x00'
2025-05-24 15:14:01 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: ETH-USDT_ST2_202505241342
2025-05-24 15:14:01 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 15:14:01 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 15:14:02 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 15:14:36 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 15:14:36 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 15:14:36 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 15:14:36 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 15:14:36 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 15:14:36 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 15:14:49 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 15:14:49 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 15:14:49 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 15:14:49 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 15:14:49 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 15:14:49 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 15:14:49 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:14:49 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:14:49 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7f941214fa90> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:14:49 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7f9412094790> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:14:49 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: BTC-USDT_ST8_202505241438
2025-05-24 15:14:49 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7f941214ed70> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:14:49 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录列表失败: Object <BacktestResult at 0x7f941214e530> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:14:49 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:14:49 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:14:49 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:15:24 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 15:15:24 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 15:15:24 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 15:15:24 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 15:15:25 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 15:15:25 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 15:15:25 - __main__ - INFO - 启动FastAPI服务器 - 主机: 127.0.0.1, 端口: 8000
2025-05-24 15:15:27 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 15:15:27 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 15:15:27 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 15:15:27 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 15:15:28 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 15:15:28 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 15:15:56 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 15:15:56 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 15:15:56 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 15:15:56 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 15:15:56 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 15:15:56 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 15:15:56 - __main__ - INFO - 启动FastAPI服务器 - 主机: 127.0.0.1, 端口: 8000
2025-05-24 15:15:59 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 15:15:59 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 15:15:59 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 15:15:59 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 15:15:59 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 15:15:59 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 15:16:00 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 15:16:00 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 15:16:00 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: ETH-USDT_ST2_202505241342
2025-05-24 15:16:00 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fb158adf1c0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:16:00 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: ETH-USDT_ST2_202505241342
2025-05-24 15:16:00 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fb158a6a350> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:16:00 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 15:16:00 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 15:16:00 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 15:16:01 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: ETH-USDT_ST2_202505241340
2025-05-24 15:16:01 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: ETH-USDT_ST2_202505241340
2025-05-24 15:16:01 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 15:16:01 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 15:16:01 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: ETH-USDT_ST2_202505241342
2025-05-24 15:16:01 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: ETH-USDT_ST2_202505241342
2025-05-24 15:16:01 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: ETH-USDT_ST2_202505241342
2025-05-24 15:16:01 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fb158adea40> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:16:01 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 15:16:01 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 15:16:02 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 15:16:03 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: ETH-USDT_ST2_202505241339
2025-05-24 15:16:03 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fb158adf5b0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:16:03 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 15:16:03 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 15:16:03 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: ETH-USDT_ST2_202505241342
2025-05-24 15:16:03 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fb158a6afb0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:16:03 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: ETH-USDT_ST2_202505241342
2025-05-24 15:16:03 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fb158adf0a0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:16:03 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 15:16:03 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 15:16:03 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 15:16:49 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 15:16:49 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 15:16:49 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 15:16:49 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 15:16:49 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 15:16:49 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 15:16:49 - __main__ - INFO - 启动FastAPI服务器 - 主机: 127.0.0.1, 端口: 8000
2025-05-24 15:16:52 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 15:16:52 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 15:16:52 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 15:16:52 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 15:16:52 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 15:16:52 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 15:17:03 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 15:17:03 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 15:17:03 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 15:17:03 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 15:17:04 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 15:17:04 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 15:17:14 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 15:17:14 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 15:17:14 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 15:17:14 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 15:17:15 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 15:17:15 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 15:17:15 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: This session is provisioning a new connection; concurrent operations are not permitted (Background on this error at: https://sqlalche.me/e/20/isce)
2025-05-24 15:17:15 - backend.controller_center.backtest.backtest_service - ERROR - 关闭数据库会话失败: Method 'close()' can't be called here; method '_connection_for_bind()' is already in progress and this would cause an unexpected state change to <SessionTransactionState.CLOSED: 5> (Background on this error at: https://sqlalche.me/e/20/isce)
2025-05-24 15:17:15 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: ETH-USDT_ST2_202505241340, 记录数: 66
2025-05-24 15:17:15 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 15:17:15 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 15:17:15 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: ETH-USDT_ST2_202505241342, 记录数: 66
2025-05-24 15:17:15 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: ETH-USDT_ST2_202505241342, 结果记录数: 66
2025-05-24 15:17:15 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7fb321144d90> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:17:15 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: ETH-USDT_ST2_202505241342, 结果记录数: 66
2025-05-24 15:17:15 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 15:17:15 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 15:17:15 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 15:17:18 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:17:18 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241438, 记录数: 25
2025-05-24 15:17:18 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录列表失败: Object <BacktestResult at 0x7fb32105cb20> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:17:18 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fb32105f910> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:17:18 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:17:18 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:19:54 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 15:19:54 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 15:19:54 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 15:19:54 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 15:19:55 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 15:19:55 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 15:19:55 - __main__ - INFO - 启动FastAPI服务器 - 主机: 127.0.0.1, 端口: 8000
2025-05-24 15:19:57 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 15:19:57 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 15:19:57 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 15:19:57 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 15:19:58 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 15:19:58 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 15:20:41 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:20:41 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241438, 记录数: 25
2025-05-24 15:20:41 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fec505fedd0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:20:41 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:20:41 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:23:29 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 15:23:29 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 15:23:29 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 15:23:29 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 15:23:29 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 15:23:29 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 15:23:29 - __main__ - INFO - 启动FastAPI服务器 - 主机: 127.0.0.1, 端口: 8000
2025-05-24 15:23:32 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 15:23:32 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 15:23:32 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 15:23:32 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 15:23:33 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 15:23:33 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 15:23:35 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:23:35 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241438, 记录数: 25
2025-05-24 15:23:35 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fb19a49efe0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:23:35 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:23:35 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:23:36 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: BTC-USDT_ST8_202505241435, 结果记录数: 25
2025-05-24 15:23:36 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241435, 记录数: 25
2025-05-24 15:23:36 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:23:36 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:23:36 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241438, 记录数: 25
2025-05-24 15:23:36 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: BTC-USDT_ST8_202505241438, 结果记录数: 25
2025-05-24 15:23:36 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241438, 记录数: 25
2025-05-24 15:23:36 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fb1a0661e40> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:23:36 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:23:36 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:23:36 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:24:20 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 15:24:20 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 15:24:20 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 15:24:20 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 15:24:20 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 15:24:20 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 15:24:24 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: This session is provisioning a new connection; concurrent operations are not permitted (Background on this error at: https://sqlalche.me/e/20/isce)
2025-05-24 15:24:24 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241241, 记录数: 180
2025-05-24 15:24:24 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:24:24 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:24:24 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241438, 记录数: 25
2025-05-24 15:24:24 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: BTC-USDT_ST8_202505241438, 结果记录数: 25
2025-05-24 15:24:24 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241438, 记录数: 25
2025-05-24 15:24:24 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fb0497ad570> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:24:24 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:24:24 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:24:24 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:24:52 - tvDatafeed.main - ERROR - error while signin
2025-05-24 15:24:52 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 15:24:56 - backend.controller_center.backtest.backtest_service - ERROR - 运行回测失败: 'BacktestSystem' object has no attribute 'data'
2025-05-24 15:25:04 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 15:25:04 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 15:25:04 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 15:25:04 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 15:25:04 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 15:25:04 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 15:25:20 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 15:25:20 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: invalid literal for int() with base 10: b't\x00\x00\x00\x00\x00\x00\x00'
2025-05-24 15:25:20 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7f9d889f5570> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:25:20 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 15:25:20 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 15:26:04 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 15:26:04 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 15:26:04 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 15:26:04 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 15:26:05 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 15:26:05 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 15:26:12 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:26:12 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241438, 记录数: 25
2025-05-24 15:26:12 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录列表失败: Object <BacktestResult at 0x7fefd03b76a0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:26:12 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fefd033d6f0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:26:12 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:26:12 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:27:05 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 15:27:05 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 15:27:05 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 15:27:05 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 15:27:06 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 15:27:06 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 15:27:13 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: This session is provisioning a new connection; concurrent operations are not permitted (Background on this error at: https://sqlalche.me/e/20/isce)
2025-05-24 15:27:13 - backend.controller_center.backtest.backtest_service - ERROR - 关闭数据库会话失败: Method 'close()' can't be called here; method '_connection_for_bind()' is already in progress and this would cause an unexpected state change to <SessionTransactionState.CLOSED: 5> (Background on this error at: https://sqlalche.me/e/20/isce)
2025-05-24 15:27:13 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241241, 记录数: 180
2025-05-24 15:27:13 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:27:13 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:27:13 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241438, 记录数: 25
2025-05-24 15:27:13 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: BTC-USDT_ST8_202505241438, 结果记录数: 25
2025-05-24 15:27:13 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: BTC-USDT_ST8_202505241438, 结果记录数: 25
2025-05-24 15:27:13 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7f925965a7a0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:27:13 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:27:13 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:30:13 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 15:30:13 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 15:30:15 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:30:15 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241438, 记录数: 25
2025-05-24 15:30:15 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7f925967f4c0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:30:15 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:30:15 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:32:00 - backend.service_center.okx_service.okx_balance_service - INFO - 初始化OKXBalanceService
2025-05-24 15:32:00 - backend.service_center.okx_service.okx_balance_service - INFO - OKXBalanceService初始化完成
2025-05-24 15:32:00 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 15:32:00 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 15:32:00 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 15:32:00 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 15:32:00 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 15:32:00 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 15:32:00 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 15:32:00 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 15:32:00 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 15:32:00 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 15:32:00 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 15:32:00 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 15:32:00 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 15:32:00 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 15:32:02 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 15:32:02 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 15:32:03 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 15:32:03 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-24 15:32:03 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 15:32:03 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-24 15:32:03 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-24 15:32:03 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-24 15:32:03 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-24 15:32:03 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-24 15:32:03 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 401 Unauthorized"
2025-05-24 15:32:03 - backend.service_center.okx_service.okx_spot_order_record_service - WARNING - 获取历史订单失败或没有数据
2025-05-24 15:32:03 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - No manual live spot orders.
2025-05-24 15:32:03 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-24 15:32:03 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 401 Unauthorized"
2025-05-24 15:32:03 - backend.service_center.okx_service.okx_spot_order_record_service - WARNING - 获取历史订单失败或没有数据
2025-05-24 15:32:03 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - No manual live spot orders.
2025-05-24 15:32:03 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-24 15:32:48 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 15:32:48 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 15:32:48 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 15:32:48 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 15:32:49 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 15:32:49 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 15:33:08 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 15:33:08 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: ETH-USDT_ST2_202505241342, record_count=66
2025-05-24 15:33:08 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fded9193190> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:33:08 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 15:33:08 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 15:35:30 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 15:35:30 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 15:35:30 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 15:35:30 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 15:35:30 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 15:35:30 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 15:36:02 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:36:02 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241438, record_count=25
2025-05-24 15:36:02 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:36:02 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fdf217c16f0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:36:02 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: BTC-USDT_ST8_202505241438, record_count=25
2025-05-24 15:36:02 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241438, record_count=25
2025-05-24 15:36:02 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:36:02 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:36:02 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:36:03 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: BTC-USDT_ST8_202505241232, record_count=90
2025-05-24 15:36:03 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241232, record_count=90
2025-05-24 15:36:03 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:36:03 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:36:04 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241438, record_count=25
2025-05-24 15:36:04 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: BTC-USDT_ST8_202505241438, record_count=25
2025-05-24 15:36:04 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241438, record_count=25
2025-05-24 15:36:04 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: BTC-USDT_ST8_202505241438, record_count=25
2025-05-24 15:36:04 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:36:04 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:36:04 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:39:15 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 15:39:15 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: ETH-USDT_ST2_202505241342, record_count=66
2025-05-24 15:39:15 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: ETH-USDT_ST2_202505241342, record_count=66
2025-05-24 15:39:15 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 15:39:15 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 15:41:24 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:41:25 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241438, record_count=25
2025-05-24 15:41:25 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: BTC-USDT_ST8_202505241438, record_count=25
2025-05-24 15:41:25 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:41:25 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:41:37 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241435, record_count=25
2025-05-24 15:41:37 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: BTC-USDT_ST8_202505241435, record_count=25
2025-05-24 15:41:37 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:41:37 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:41:37 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241438, record_count=25
2025-05-24 15:41:37 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: BTC-USDT_ST8_202505241438, record_count=25
2025-05-24 15:41:37 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: BTC-USDT_ST8_202505241438, record_count=25
2025-05-24 15:41:37 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241438, record_count=25
2025-05-24 15:41:37 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:41:37 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:41:37 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:43:37 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录列表失败: Object <BacktestResult at 0x7fdf21898dc0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 15:43:37 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:43:37 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241438, record_count=25
2025-05-24 15:43:37 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:43:37 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: BTC-USDT_ST8_202505241438, record_count=25
2025-05-24 15:43:37 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241438, record_count=25
2025-05-24 15:43:37 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: BTC-USDT_ST8_202505241438, record_count=25
2025-05-24 15:43:37 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:43:37 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:43:37 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 15:44:09 - tvDatafeed.main - ERROR - error while signin
2025-05-24 15:44:09 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 15:44:14 - backend.controller_center.backtest.backtest_service - ERROR - 运行回测失败: 'BacktestSystem' object has no attribute 'data'
2025-05-24 15:58:42 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 15:58:42 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 15:58:42 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 15:58:42 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 15:58:42 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 15:58:42 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 15:58:55 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 15:58:55 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 15:58:55 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 15:58:55 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 15:58:55 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 15:58:55 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 16:00:12 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 16:00:12 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241559, record_count=88
2025-05-24 16:00:12 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: BTC-USDT_ST8_202505241559, record_count=88
2025-05-24 16:00:12 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 16:00:12 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 16:01:54 - tvDatafeed.main - ERROR - error while signin
2025-05-24 16:01:54 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 16:01:59 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241601, record_count=88
2025-05-24 16:01:59 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: BTC-USDT_ST8_202505241601, record_count=88
2025-05-24 16:02:05 - tvDatafeed.main - ERROR - error while signin
2025-05-24 16:02:05 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 16:02:09 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241602, record_count=88
2025-05-24 16:02:09 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: BTC-USDT_ST8_202505241602, record_count=88
2025-05-24 16:03:50 - tvDatafeed.main - ERROR - error while signin
2025-05-24 16:03:50 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 16:03:54 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241603, record_count=176
2025-05-24 16:03:54 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: BTC-USDT_ST8_202505241603, record_count=176
2025-05-24 16:04:19 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 16:04:19 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 16:04:19 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 16:04:19 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 16:04:20 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 16:04:20 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 16:04:40 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 16:04:40 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 16:04:40 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 16:04:40 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 16:04:41 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 16:04:41 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 16:04:41 - __main__ - INFO - 启动FastAPI服务器 - 主机: 127.0.0.1, 端口: 8000
2025-05-24 16:04:43 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 16:04:43 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 16:04:43 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 16:04:43 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 16:04:44 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 16:04:44 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 16:05:03 - tvDatafeed.main - ERROR - error while signin
2025-05-24 16:05:03 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 16:05:08 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241605, record_count=88
2025-05-24 16:05:08 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: BTC-USDT_ST8_202505241605, record_count=88
2025-05-24 16:05:40 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 16:05:40 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 16:05:40 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 16:05:40 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 16:05:41 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 16:05:41 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 16:05:42 - tvDatafeed.main - ERROR - error while signin
2025-05-24 16:05:42 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 16:05:46 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241605, record_count=176
2025-05-24 16:05:46 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: BTC-USDT_ST8_202505241605, record_count=176
2025-05-24 16:05:53 - tvDatafeed.main - ERROR - error while signin
2025-05-24 16:05:53 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 16:05:57 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241605, record_count=264
2025-05-24 16:05:57 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: BTC-USDT_ST8_202505241605, record_count=264
2025-05-24 16:06:49 - tvDatafeed.main - ERROR - error while signin
2025-05-24 16:06:49 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 16:06:54 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241606, record_count=176
2025-05-24 16:06:54 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: BTC-USDT_ST8_202505241606, record_count=176
2025-05-24 16:07:03 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 16:07:03 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: ETH-USDT_ST2_202505241342, record_count=66
2025-05-24 16:07:03 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: ETH-USDT_ST2_202505241342, record_count=66
2025-05-24 16:07:03 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 16:07:03 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 16:07:05 - tvDatafeed.main - ERROR - error while signin
2025-05-24 16:07:05 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 16:07:09 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: ETH-USDT_ST2_202505241607, record_count=65
2025-05-24 16:07:09 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: ETH-USDT_ST2_202505241607, record_count=65
2025-05-24 16:07:54 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 16:07:54 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 16:07:54 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 16:07:54 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 16:07:55 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 16:07:55 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 16:08:06 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 16:08:06 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 16:08:06 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 16:08:06 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 16:08:07 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 16:08:07 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 16:08:14 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 16:08:14 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 16:08:14 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 16:08:14 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 16:08:15 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 16:08:15 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 16:09:02 - tvDatafeed.main - ERROR - error while signin
2025-05-24 16:09:02 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 16:09:07 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241609, record_count=88
2025-05-24 16:09:07 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: BTC-USDT_ST8_202505241609, record_count=88
2025-05-24 16:09:14 - tvDatafeed.main - ERROR - error while signin
2025-05-24 16:09:14 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 16:09:19 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241609, record_count=176
2025-05-24 16:09:19 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: BTC-USDT_ST8_202505241609, record_count=176
2025-05-24 16:09:25 - tvDatafeed.main - ERROR - error while signin
2025-05-24 16:09:25 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 16:09:29 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241609, record_count=264
2025-05-24 16:09:29 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: BTC-USDT_ST8_202505241609, record_count=264
2025-05-24 16:09:52 - tvDatafeed.main - ERROR - error while signin
2025-05-24 16:09:52 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 16:09:56 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: ETH-USDT_ST2_202505241609, record_count=65
2025-05-24 16:09:56 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: ETH-USDT_ST2_202505241609, record_count=65
2025-05-24 16:15:14 - tvDatafeed.main - ERROR - error while signin
2025-05-24 16:15:14 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 16:15:19 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241615, record_count=88
2025-05-24 16:15:19 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: BTC-USDT_ST8_202505241615, record_count=88
2025-05-24 16:15:30 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 16:15:30 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: BTC-USDT_ST8_202505241615, record_count=88
2025-05-24 16:15:31 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241615, record_count=88
2025-05-24 16:15:31 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 16:15:31 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 16:15:33 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 11
2025-05-24 16:15:33 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 11
2025-05-24 16:15:33 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: SOL-USDT_ST11_202505241411, record_count=113
2025-05-24 16:15:33 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: SOL-USDT_ST11_202505241411, record_count=113
2025-05-24 16:15:33 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: SOL-USDT_ST11_202505241411, record_count=113
2025-05-24 16:15:33 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: SOL-USDT_ST11_202505241411, record_count=113
2025-05-24 16:15:33 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 11
2025-05-24 16:15:33 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 11
2025-05-24 16:15:33 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 11
2025-05-24 16:15:42 - tvDatafeed.main - ERROR - error while signin
2025-05-24 16:15:42 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 16:15:47 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241615, record_count=176
2025-05-24 16:15:47 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: BTC-USDT_ST8_202505241615, record_count=176
2025-05-24 16:16:50 - tvDatafeed.main - ERROR - error while signin
2025-05-24 16:16:50 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 16:16:54 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241616, record_count=88
2025-05-24 16:16:54 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: BTC-USDT_ST8_202505241616, record_count=88
2025-05-24 16:17:19 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 11
2025-05-24 16:17:19 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 11
2025-05-24 16:17:19 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 11
2025-05-24 16:17:19 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: SOL-USDT_ST11_202505241411, record_count=113
2025-05-24 16:17:19 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: SOL-USDT_ST11_202505241411, record_count=113
2025-05-24 16:17:19 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: SOL-USDT_ST11_202505241411, record_count=113
2025-05-24 16:17:19 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: SOL-USDT_ST11_202505241411, record_count=113
2025-05-24 16:17:19 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 11
2025-05-24 16:17:19 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 11
2025-05-24 16:17:19 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 11
2025-05-24 16:17:27 - tvDatafeed.main - ERROR - error while signin
2025-05-24 16:17:27 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 16:17:32 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241617, record_count=88
2025-05-24 16:17:32 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: BTC-USDT_ST8_202505241617, record_count=88
2025-05-24 16:17:59 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 16:17:59 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 16:17:59 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: ETH-USDT_ST2_202505241609, record_count=65
2025-05-24 16:17:59 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: ETH-USDT_ST2_202505241609, record_count=65
2025-05-24 16:17:59 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: ETH-USDT_ST2_202505241609, record_count=65
2025-05-24 16:17:59 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: ETH-USDT_ST2_202505241609, record_count=65
2025-05-24 16:17:59 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 16:17:59 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 16:17:59 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 16:18:01 - tvDatafeed.main - ERROR - error while signin
2025-05-24 16:18:01 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 16:18:06 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: ETH-USDT_ST2_202505241618, record_count=65
2025-05-24 16:18:06 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: ETH-USDT_ST2_202505241618, record_count=65
2025-05-24 16:18:06 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 16:18:34 - backend.service_center.okx_service.okx_balance_service - INFO - 初始化OKXBalanceService
2025-05-24 16:18:34 - backend.service_center.okx_service.okx_balance_service - INFO - OKXBalanceService初始化完成
2025-05-24 16:18:34 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 16:18:34 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 16:18:34 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 16:18:34 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 16:18:34 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 16:18:34 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 16:18:34 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 16:18:34 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 16:18:34 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 16:18:34 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 16:18:34 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 16:18:34 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 16:18:34 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 16:18:34 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 16:18:35 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 16:18:35 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 16:18:36 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 16:18:36 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 16:18:36 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 16:18:36 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 16:18:36 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 16:18:36 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 16:18:36 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 16:18:36 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 16:18:36 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 16:18:36 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 16:18:36 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 16:18:36 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 16:18:36 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 16:18:36 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 16:18:37 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 16:18:37 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-24 16:18:37 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 16:18:37 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-24 16:18:37 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-24 16:18:37 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-24 16:18:37 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-24 16:18:37 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-24 16:18:38 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 401 Unauthorized"
2025-05-24 16:18:38 - backend.service_center.okx_service.okx_spot_order_record_service - WARNING - 获取历史订单失败或没有数据
2025-05-24 16:18:38 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - No manual live spot orders.
2025-05-24 16:18:38 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-24 16:18:38 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 401 Unauthorized"
2025-05-24 16:18:38 - backend.service_center.okx_service.okx_spot_order_record_service - WARNING - 获取历史订单失败或没有数据
2025-05-24 16:18:38 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - No manual live spot orders.
2025-05-24 16:18:38 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-24 16:20:05 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 16:20:05 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-24 16:20:05 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-24 16:20:05 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-24 16:20:06 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 401 Unauthorized"
2025-05-24 16:20:06 - backend.service_center.okx_service.okx_spot_order_record_service - WARNING - 获取历史订单失败或没有数据
2025-05-24 16:20:06 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - No manual live spot orders.
2025-05-24 16:20:06 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-24 16:21:07 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 16:21:07 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 16:21:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-24 16:21:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-24 16:21:07 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-24 16:21:07 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-24 16:21:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-24 16:21:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-24 16:21:07 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 401 Unauthorized"
2025-05-24 16:21:07 - backend.service_center.okx_service.okx_spot_order_record_service - WARNING - 获取历史订单失败或没有数据
2025-05-24 16:21:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - No manual live spot orders.
2025-05-24 16:21:07 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-24 16:21:07 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 401 Unauthorized"
2025-05-24 16:21:07 - backend.service_center.okx_service.okx_spot_order_record_service - WARNING - 获取历史订单失败或没有数据
2025-05-24 16:21:07 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - No manual live spot orders.
2025-05-24 16:21:07 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-24 16:21:30 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 16:21:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-24 16:21:30 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-24 16:21:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-24 16:21:30 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 401 Unauthorized"
2025-05-24 16:21:30 - backend.service_center.okx_service.okx_spot_order_record_service - WARNING - 获取历史订单失败或没有数据
2025-05-24 16:21:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - No manual live spot orders.
2025-05-24 16:21:30 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-24 16:21:31 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 16:21:31 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-24 16:21:31 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-24 16:21:31 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-24 16:21:31 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 401 Unauthorized"
2025-05-24 16:21:31 - backend.service_center.okx_service.okx_spot_order_record_service - WARNING - 获取历史订单失败或没有数据
2025-05-24 16:21:31 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - No manual live spot orders.
2025-05-24 16:21:31 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-24 16:21:38 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 16:21:38 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 16:21:38 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 16:21:38 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 16:21:39 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 16:21:39 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 16:21:39 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time='', force_update: False
2025-05-24 16:21:39 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-24 16:21:39 - backend.controller_center.record.record_controller - INFO - 开始更新现货订单记录
2025-05-24 16:21:39 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-24 16:21:39 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 401 Unauthorized"
2025-05-24 16:21:39 - backend.service_center.okx_service.okx_spot_order_record_service - WARNING - 获取历史订单失败或没有数据
2025-05-24 16:21:39 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - No manual live spot orders.
2025-05-24 16:21:39 - backend.controller_center.record.record_controller - INFO - 现货订单记录更新完成
2025-05-24 16:21:45 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time='', force_update: False
2025-05-24 16:21:45 - backend.controller_center.record.record_controller - INFO - 跳过数据更新，距离上次更新仅过去 6.8 秒
2025-05-24 16:21:46 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time='', force_update: False
2025-05-24 16:21:46 - backend.controller_center.record.record_controller - INFO - 跳过数据更新，距离上次更新仅过去 7.4 秒
2025-05-24 16:21:47 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time='', force_update: False
2025-05-24 16:21:47 - backend.controller_center.record.record_controller - INFO - 跳过数据更新，距离上次更新仅过去 8.4 秒
2025-05-24 16:21:48 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time='', force_update: False
2025-05-24 16:21:48 - backend.controller_center.record.record_controller - INFO - 跳过数据更新，距离上次更新仅过去 9.0 秒
2025-05-24 16:21:48 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time='', force_update: False
2025-05-24 16:21:48 - backend.controller_center.record.record_controller - INFO - 跳过数据更新，距离上次更新仅过去 9.6 秒
2025-05-24 16:21:50 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time='', force_update: False
2025-05-24 16:21:50 - backend.controller_center.record.record_controller - INFO - 跳过数据更新，距离上次更新仅过去 11.0 秒
2025-05-24 16:21:56 - backend.controller_center.record.record_controller - INFO - Received fast trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 16:21:56 - backend.controller_center.record.record_controller - INFO - Received fast trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 16:22:09 - backend.controller_center.record.record_controller - INFO - Received fast trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 16:22:09 - backend.controller_center.record.record_controller - INFO - Received fast trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 16:22:09 - backend.controller_center.record.record_controller - INFO - Received fast trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 16:22:15 - backend.controller_center.record.record_controller - INFO - Received fast trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 16:22:16 - backend.controller_center.record.record_controller - INFO - 手动刷新现货订单记录
2025-05-24 16:22:16 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-24 16:22:16 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-24 16:22:16 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 401 Unauthorized"
2025-05-24 16:22:16 - backend.service_center.okx_service.okx_spot_order_record_service - WARNING - 获取历史订单失败或没有数据
2025-05-24 16:22:16 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - No manual live spot orders.
2025-05-24 16:22:16 - backend.controller_center.record.record_controller - INFO - 手动刷新完成
2025-05-24 16:22:16 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time='', force_update: False
2025-05-24 16:22:16 - backend.controller_center.record.record_controller - INFO - 跳过数据更新，距离上次更新仅过去 0.0 秒
2025-05-24 16:22:19 - backend.controller_center.record.record_controller - INFO - Received fast trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 16:22:20 - backend.controller_center.record.record_controller - INFO - Received fast trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 16:22:21 - backend.controller_center.record.record_controller - INFO - Received fast trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 16:22:22 - backend.controller_center.record.record_controller - INFO - 手动刷新现货订单记录
2025-05-24 16:22:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-24 16:22:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-24 16:22:22 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 401 Unauthorized"
2025-05-24 16:22:22 - backend.service_center.okx_service.okx_spot_order_record_service - WARNING - 获取历史订单失败或没有数据
2025-05-24 16:22:22 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - No manual live spot orders.
2025-05-24 16:22:22 - backend.controller_center.record.record_controller - INFO - 手动刷新完成
2025-05-24 16:22:22 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time='', force_update: False
2025-05-24 16:22:22 - backend.controller_center.record.record_controller - INFO - 跳过数据更新，距离上次更新仅过去 0.0 秒
2025-05-24 16:22:25 - backend.controller_center.record.record_controller - INFO - Received fast trade request: pageSize=5 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 16:22:28 - backend.controller_center.record.record_controller - INFO - Received fast trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 16:22:28 - backend.controller_center.record.record_controller - INFO - Received fast trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 16:22:30 - backend.controller_center.record.record_controller - INFO - 手动刷新现货订单记录
2025-05-24 16:22:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-24 16:22:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-24 16:22:30 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 401 Unauthorized"
2025-05-24 16:22:30 - backend.service_center.okx_service.okx_spot_order_record_service - WARNING - 获取历史订单失败或没有数据
2025-05-24 16:22:30 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - No manual live spot orders.
2025-05-24 16:22:30 - backend.controller_center.record.record_controller - INFO - 手动刷新完成
2025-05-24 16:22:30 - backend.controller_center.record.record_controller - INFO - Received trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time='', force_update: False
2025-05-24 16:22:30 - backend.controller_center.record.record_controller - INFO - 跳过数据更新，距离上次更新仅过去 0.0 秒
2025-05-24 16:22:34 - backend.controller_center.record.record_controller - INFO - Received fast trade request: pageSize=10 pageNum=1 ccy='e' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 16:22:36 - backend.controller_center.record.record_controller - INFO - Received fast trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 16:22:39 - backend.controller_center.record.record_controller - INFO - Received fast trade request: pageSize=5 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 16:22:47 - backend.controller_center.record.record_controller - INFO - 手动刷新现货订单记录
2025-05-24 16:22:47 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 初始化SpotOrderRecordService
2025-05-24 16:22:47 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - 开始获取历史订单
2025-05-24 16:22:47 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/orders-history-archive?instType=SPOT&ordType=limit,market "HTTP/2 401 Unauthorized"
2025-05-24 16:22:47 - backend.service_center.okx_service.okx_spot_order_record_service - WARNING - 获取历史订单失败或没有数据
2025-05-24 16:22:47 - backend.service_center.okx_service.okx_spot_order_record_service - INFO - No manual live spot orders.
2025-05-24 16:22:47 - backend.controller_center.record.record_controller - INFO - 手动刷新完成
2025-05-24 16:23:28 - backend.service_center.okx_service.okx_balance_service - INFO - 初始化OKXBalanceService
2025-05-24 16:23:28 - backend.service_center.okx_service.okx_balance_service - INFO - OKXBalanceService初始化完成
2025-05-24 16:23:28 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 16:23:28 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 16:23:28 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 16:23:28 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 16:23:28 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 16:23:28 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 16:23:28 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 16:23:28 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 16:23:28 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 16:23:29 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 16:23:29 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 16:23:29 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 16:23:29 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 16:23:29 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 16:23:29 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 16:23:29 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 16:23:32 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 16:23:32 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: BTC-USDT_ST8_202505241617, record_count=88
2025-05-24 16:23:32 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241617, record_count=88
2025-05-24 16:23:32 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 16:23:32 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 16:23:43 - tvDatafeed.main - ERROR - error while signin
2025-05-24 16:23:43 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 16:23:47 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241623, record_count=88
2025-05-24 16:23:47 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: BTC-USDT_ST8_202505241623, record_count=88
2025-05-24 16:23:47 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 16:23:55 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 11
2025-05-24 16:23:55 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 11
2025-05-24 16:23:55 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7f7ec1972ad0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 16:23:55 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: SOL-USDT_ST11_202505241411, record_count=113
2025-05-24 16:23:55 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: SOL-USDT_ST11_202505241411, record_count=113
2025-05-24 16:23:55 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: SOL-USDT_ST11_202505241411, record_count=113
2025-05-24 16:23:55 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 11
2025-05-24 16:23:55 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 11
2025-05-24 16:23:55 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 11
2025-05-24 16:23:56 - tvDatafeed.main - ERROR - error while signin
2025-05-24 16:23:56 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 16:24:00 - backend.controller_center.backtest.backtest_service - ERROR - 运行回测失败: cannot convert float NaN to integer
2025-05-24 16:24:00 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 11
2025-05-24 16:24:00 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: SOL-USDT_ST11_202505241411, record_count=113
2025-05-24 16:24:00 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: SOL-USDT_ST11_202505241411, record_count=113
2025-05-24 16:24:00 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 11
2025-05-24 16:24:00 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 11
2025-05-24 16:25:13 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 16:25:13 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 16:25:13 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 16:25:13 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 16:25:14 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 16:25:14 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 16:25:14 - __main__ - INFO - 启动FastAPI服务器 - 主机: 127.0.0.1, 端口: 8000
2025-05-24 16:25:17 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 16:25:17 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 16:25:17 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 16:25:17 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 16:25:17 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 16:25:17 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 16:25:18 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 16:25:18 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241623, record_count=88
2025-05-24 16:25:18 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 16:25:18 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7fb0da00e170> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 16:25:18 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: BTC-USDT_ST8_202505241623, record_count=88
2025-05-24 16:25:18 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241623, record_count=88
2025-05-24 16:25:18 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 16:25:18 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 16:25:18 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 16:25:21 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 16:25:21 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 16:25:21 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: ETH-USDT_ST2_202505241618, record_count=65
2025-05-24 16:25:21 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: ETH-USDT_ST2_202505241618, record_count=65
2025-05-24 16:25:21 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: ETH-USDT_ST2_202505241618, record_count=65
2025-05-24 16:25:21 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: ETH-USDT_ST2_202505241618, record_count=65
2025-05-24 16:25:21 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 16:25:21 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 16:25:21 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 16:25:23 - tvDatafeed.main - ERROR - error while signin
2025-05-24 16:25:23 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 16:25:26 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: ETH-USDT_ST2_202505241625, record_count=65
2025-05-24 16:25:26 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: ETH-USDT_ST2_202505241625, record_count=65
2025-05-24 16:25:26 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 2
2025-05-24 16:25:32 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 11
2025-05-24 16:25:32 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 11
2025-05-24 16:25:32 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: SOL-USDT_ST11_202505241411, record_count=113
2025-05-24 16:25:32 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: SOL-USDT_ST11_202505241411, record_count=113
2025-05-24 16:25:32 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: SOL-USDT_ST11_202505241411, record_count=113
2025-05-24 16:25:32 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: SOL-USDT_ST11_202505241411, record_count=113
2025-05-24 16:25:32 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 11
2025-05-24 16:25:32 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 11
2025-05-24 16:25:32 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 11
2025-05-24 16:25:33 - tvDatafeed.main - ERROR - error while signin
2025-05-24 16:25:33 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 16:25:37 - backend.controller_center.backtest.backtest_service - ERROR - 运行回测失败: cannot convert float NaN to integer
2025-05-24 16:25:37 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 11
2025-05-24 16:25:37 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: SOL-USDT_ST11_202505241411, record_count=113
2025-05-24 16:25:37 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: SOL-USDT_ST11_202505241411, record_count=113
2025-05-24 16:25:37 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 11
2025-05-24 16:25:37 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 11
2025-05-24 16:25:58 - tvDatafeed.main - ERROR - error while signin
2025-05-24 16:25:58 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 16:26:02 - backend.controller_center.backtest.backtest_service - ERROR - 运行回测失败: cannot convert float NaN to integer
2025-05-24 16:26:02 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 11
2025-05-24 16:26:02 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: SOL-USDT_ST11_202505241411, record_count=113
2025-05-24 16:26:02 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: SOL-USDT_ST11_202505241411, record_count=113
2025-05-24 16:26:02 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 11
2025-05-24 16:26:02 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 11
2025-05-24 16:26:57 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 16:26:57 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 13:49:00'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 16:27:50 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 16:27:50 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 16:27:50 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 16:27:50 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 16:27:51 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 16:27:51 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 16:28:06 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 16:28:06 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 16:28:06 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 16:28:06 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 16:28:07 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 16:28:07 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 16:28:44 - tvDatafeed.main - ERROR - error while signin
2025-05-24 16:28:44 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 16:28:48 - backend.controller_center.backtest.backtest_service - ERROR - 运行回测失败: cannot convert float NaN to integer
2025-05-24 16:28:56 - tvDatafeed.main - ERROR - error while signin
2025-05-24 16:28:56 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 16:29:00 - backend.controller_center.backtest.backtest_service - ERROR - 运行回测失败: cannot convert float NaN to integer
2025-05-24 16:30:02 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 16:30:02 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 16:30:02 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 16:30:02 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 16:30:03 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 16:30:03 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 16:30:13 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 16:30:13 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 16:30:13 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 16:30:13 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 16:30:13 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 16:30:13 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 16:30:32 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 16:30:32 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 16:30:32 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 16:30:32 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 16:30:32 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 16:30:32 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 16:31:49 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 16:31:49 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 16:31:49 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 16:31:49 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 16:31:50 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 16:31:50 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 16:32:10 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 16:32:10 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 16:32:10 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 16:32:10 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 16:32:11 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 16:32:11 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 16:33:02 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 16:33:02 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 16:33:02 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 16:33:02 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 16:33:03 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 16:33:03 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 16:33:29 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 11
2025-05-24 16:33:29 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: SOL-USDT_ST11_202505241411, record_count=113
2025-05-24 16:33:29 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: SOL-USDT_ST11_202505241411, record_count=113
2025-05-24 16:33:29 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 11
2025-05-24 16:33:29 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 11
2025-05-24 16:33:31 - tvDatafeed.main - ERROR - error while signin
2025-05-24 16:33:31 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 16:33:38 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: SOL-USDT_ST11_202505241633, record_count=20
2025-05-24 16:33:38 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: SOL-USDT_ST11_202505241633, record_count=20
2025-05-24 16:33:39 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 11
2025-05-24 16:33:39 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: SOL-USDT_ST11_202505241633, record_count=20
2025-05-24 16:33:39 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: SOL-USDT_ST11_202505241633, record_count=20
2025-05-24 16:33:39 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 11
2025-05-24 16:33:39 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 11
2025-05-24 16:33:41 - tvDatafeed.main - ERROR - error while signin
2025-05-24 16:33:41 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 16:33:46 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: SOL-USDT_ST11_202505241633, record_count=40
2025-05-24 16:33:46 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: SOL-USDT_ST11_202505241633, record_count=40
2025-05-24 16:33:46 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 11
2025-05-24 16:34:10 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 16:34:10 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 16:34:10 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测记录失败: Object <BacktestRecord at 0x7f9b98a33f10> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 16:34:10 - backend.controller_center.backtest.backtest_service - ERROR - 获取回测详情失败: Object <BacktestRecord at 0x7f9b98a328c0> cannot be converted to 'persistent' state, as this identity map is no longer valid.  Has the owning Session been closed? (Background on this error at: https://sqlalche.me/e/20/lkrp)
2025-05-24 16:34:10 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241623, record_count=88
2025-05-24 16:34:10 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 16:34:10 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: BTC-USDT_ST8_202505241623, record_count=88
2025-05-24 16:34:10 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 16:34:10 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 16:34:12 - tvDatafeed.main - ERROR - error while signin
2025-05-24 16:34:12 - tvDatafeed.main - WARNING - you are using nologin method, data you access may be limited
2025-05-24 16:34:16 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241634, record_count=88
2025-05-24 16:34:16 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: BTC-USDT_ST8_202505241634, record_count=88
2025-05-24 16:34:16 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 16:46:12 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 16:46:12 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 16:46:12 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 16:46:12 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 16:46:12 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 16:46:12 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 16:46:25 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 16:46:25 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 16:46:25 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 16:46:25 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 16:46:25 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 16:46:25 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 17:49:31 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 17:49:31 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 17:49:31 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 17:49:31 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 17:49:32 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 17:49:32 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 18:47:54 - backend.service_center.okx_service.okx_balance_service - INFO - 初始化OKXBalanceService
2025-05-24 18:47:54 - backend.service_center.okx_service.okx_balance_service - INFO - OKXBalanceService初始化完成
2025-05-24 18:47:54 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 18:47:54 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 18:47:55 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 18:47:55 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 18:47:55 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 18:47:55 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 18:47:55 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 18:47:55 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 18:47:55 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 18:47:55 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 18:47:55 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 18:47:55 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 18:47:55 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 18:47:55 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 18:47:56 - backend.controller_center.record.record_controller - INFO - Received fast trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 18:47:56 - backend.controller_center.record.record_controller - INFO - Received fast trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 18:47:56 - backend.controller_center.record.record_controller - ERROR - Error processing fast request: This session is provisioning a new connection; concurrent operations are not permitted (Background on this error at: https://sqlalche.me/e/20/isce)
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/controller_center/record/record_controller.py", line 75, in list_spot_record_fast
    page_result = RecordService.list_config_execute_records(request)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/controller_center/record/record_service.py", line 11, in list_config_execute_records
    return SpotAlgoOrderRecord.list_spot_algo_order_record_by_conditions(config_execute_history_request)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 397, in list_spot_algo_order_record_by_conditions
    total = session.query(cls).filter(*filters).count()
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3147, in count
    self._legacy_from_self(col).enable_eagerloads(False).scalar()
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 2836, in scalar
    ret = self.one()
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 2809, in one
    return self._iter().one()  # type: ignore
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 2858, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2241, in _execute_internal
    conn = self._connection_for_bind(bind)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2110, in _connection_for_bind
    return trans._connection_for_bind(engine, execution_options)
  File "<string>", line 2, in _connection_for_bind
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/state_changes.py", line 103, in _go
    self._raise_for_prerequisite_state(fn.__name__, current_state)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 990, in _raise_for_prerequisite_state
    raise sa_exc.InvalidRequestError(
sqlalchemy.exc.InvalidRequestError: This session is provisioning a new connection; concurrent operations are not permitted (Background on this error at: https://sqlalche.me/e/20/isce)
2025-05-24 18:47:58 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 18:47:58 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 18:47:58 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 18:47:58 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 18:47:58 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 18:47:58 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 18:47:58 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 18:47:58 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 18:47:58 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 18:47:58 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 18:47:58 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 18:47:58 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 18:47:58 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 18:47:58 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 18:57:17 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 18:57:17 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 18:57:17 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 18:57:17 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 18:57:18 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 18:57:18 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 18:58:22 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 18:58:22 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 18:58:22 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 18:58:22 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 18:58:22 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 18:58:22 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 18:59:48 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 18:59:48 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 18:59:48 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 18:59:48 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 18:59:49 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 18:59:49 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 19:01:06 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 19:01:06 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 19:01:06 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 19:01:06 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 19:01:07 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 19:01:07 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 19:02:07 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 19:02:07 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 19:02:07 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 19:02:07 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 19:02:07 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 19:02:07 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 19:02:51 - backend.controller_center.record.record_controller - INFO - Received fast trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 19:02:51 - backend.controller_center.record.record_controller - INFO - Received fast trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 19:02:51 - backend.controller_center.record.record_controller - ERROR - Error processing fast request: This session is provisioning a new connection; concurrent operations are not permitted (Background on this error at: https://sqlalche.me/e/20/isce)
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/controller_center/record/record_controller.py", line 75, in list_spot_record_fast
    page_result = RecordService.list_config_execute_records(request)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/controller_center/record/record_service.py", line 11, in list_config_execute_records
    return SpotAlgoOrderRecord.list_spot_algo_order_record_by_conditions(config_execute_history_request)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 397, in list_spot_algo_order_record_by_conditions
    total = session.query(cls).filter(*filters).count()
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3147, in count
    self._legacy_from_self(col).enable_eagerloads(False).scalar()
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 2836, in scalar
    ret = self.one()
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 2809, in one
    return self._iter().one()  # type: ignore
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 2858, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2241, in _execute_internal
    conn = self._connection_for_bind(bind)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2110, in _connection_for_bind
    return trans._connection_for_bind(engine, execution_options)
  File "<string>", line 2, in _connection_for_bind
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/state_changes.py", line 103, in _go
    self._raise_for_prerequisite_state(fn.__name__, current_state)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 990, in _raise_for_prerequisite_state
    raise sa_exc.InvalidRequestError(
sqlalchemy.exc.InvalidRequestError: This session is provisioning a new connection; concurrent operations are not permitted (Background on this error at: https://sqlalche.me/e/20/isce)
2025-05-24 19:02:54 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 19:02:54 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: BTC-USDT_ST8_202505241634, record_count=88
2025-05-24 19:02:54 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241634, record_count=88
2025-05-24 19:02:54 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 19:02:54 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-24 19:30:48 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 19:30:48 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 19:30:48 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 19:30:48 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 19:30:49 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 19:30:49 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 19:58:35 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 19:58:35 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 19:58:35 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 19:58:35 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 19:58:36 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 19:58:36 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 20:27:49 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 20:27:49 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 20:27:49 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 20:27:49 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 20:27:49 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 20:27:49 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 20:27:55 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 20:27:55 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 20:27:55 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 20:27:55 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 20:27:56 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 20:27:56 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 20:28:03 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 20:28:03 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 20:28:03 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 20:28:03 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 20:28:04 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 20:28:04 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 20:28:30 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 20:28:30 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 20:28:30 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 20:28:30 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 20:28:30 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 20:28:30 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 20:28:54 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 20:28:54 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 20:28:54 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 20:28:54 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 20:28:55 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 20:28:55 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 20:35:52 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 20:35:52 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 20:35:52 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 20:35:52 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 20:35:53 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 20:35:53 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 20:35:53 - backend.controller_center.backtest.backtest_service - ERROR - 获取策略列表失败: This Session's transaction has been rolled back due to a previous exception during flush. To begin a new transaction with this Session, first issue Session.rollback(). Original exception was: (sqlite3.OperationalError) no such table: system_prompt
[SQL: INSERT INTO system_prompt (name, content, created_at, updated_at) VALUES (?, ?, ?, ?)]
[parameters: ('基础交易Prompt', '你是专业交易策略分析师...', '2025-05-24 12:35:53.222208', '2025-05-24 12:35:53.222214')]
(Background on this error at: https://sqlalche.me/e/20/e3q8) (Background on this error at: https://sqlalche.me/e/20/7s2a)
2025-05-24 20:35:53 - backend.controller_center.backtest.backtest_service - ERROR - 获取策略列表失败: This Session's transaction has been rolled back due to a previous exception during flush. To begin a new transaction with this Session, first issue Session.rollback(). Original exception was: (sqlite3.OperationalError) no such table: system_prompt
[SQL: INSERT INTO system_prompt (name, content, created_at, updated_at) VALUES (?, ?, ?, ?)]
[parameters: ('基础交易Prompt', '你是专业交易策略分析师...', '2025-05-24 12:35:53.222208', '2025-05-24 12:35:53.222214')]
(Background on this error at: https://sqlalche.me/e/20/e3q8) (Background on this error at: https://sqlalche.me/e/20/7s2a)
2025-05-24 20:36:00 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 20:36:00 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 20:36:00 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 20:36:00 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 20:36:00 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 20:36:00 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 20:43:41 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 20:43:41 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 20:43:41 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 20:43:41 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 20:43:41 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 20:43:41 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 20:44:22 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 20:44:22 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 20:44:22 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 20:44:22 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 20:44:22 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 20:44:22 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 20:44:23 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 20:44:23 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 20:44:23 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 20:44:23 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 20:44:24 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 20:44:24 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 20:44:24 - __main__ - INFO - 启动FastAPI服务器 - 主机: 127.0.0.1, 端口: 8000
2025-05-24 20:44:56 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/fills-history?instType=SPOT "HTTP/2 401 Unauthorized"
2025-05-24 20:44:56 - backend.controller_center.trade.trade_service - ERROR - Failed to get fills history: 50110, Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 20:44:56 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/trade/fills-history?instType=SPOT "HTTP/2 401 Unauthorized"
2025-05-24 20:44:56 - backend.controller_center.trade.trade_service - ERROR - Failed to get fills history: 50110, Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 20:48:29 - backend.service_center.okx_service.okx_balance_service - INFO - 初始化OKXBalanceService
2025-05-24 20:48:29 - backend.service_center.okx_service.okx_balance_service - INFO - OKXBalanceService初始化完成
2025-05-24 20:48:29 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 20:48:29 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 20:48:29 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 20:48:29 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 20:48:29 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 20:48:29 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 20:48:29 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 20:48:29 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 20:48:29 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 20:48:29 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 20:48:29 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 20:48:29 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 20:48:29 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 20:48:29 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 20:48:32 - backend.controller_center.record.record_controller - INFO - Received fast trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 20:48:32 - backend.controller_center.record.record_controller - INFO - Received fast trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 20:48:33 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 20:48:33 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 20:48:33 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 20:48:33 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 20:48:33 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 20:48:33 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 20:48:33 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 20:48:33 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 20:48:33 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 20:48:33 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 20:48:33 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 20:48:33 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 20:48:33 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 20:48:33 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 20:48:34 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 97, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 16:28:38'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 20:48:34 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 97, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 16:28:38'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 20:48:36 - backend.controller_center.record.record_controller - INFO - Received fast trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 20:48:36 - backend.controller_center.record.record_controller - INFO - Received fast trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 20:49:39 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 20:49:39 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 20:49:39 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 20:49:39 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 20:49:40 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 20:49:40 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 20:50:00 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 20:50:00 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 20:50:00 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 20:50:00 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 20:50:00 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 20:50:00 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 20:50:28 - backend.controller_center.record.record_controller - INFO - Received fast trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 20:50:28 - backend.controller_center.record.record_controller - INFO - Received fast trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 20:50:28 - backend.controller_center.record.record_controller - ERROR - Error processing fast request: This session is provisioning a new connection; concurrent operations are not permitted (Background on this error at: https://sqlalche.me/e/20/isce)
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/controller_center/record/record_controller.py", line 75, in list_spot_record_fast
    page_result = RecordService.list_config_execute_records(request)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/controller_center/record/record_service.py", line 11, in list_config_execute_records
    return SpotAlgoOrderRecord.list_spot_algo_order_record_by_conditions(config_execute_history_request)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 397, in list_spot_algo_order_record_by_conditions
    total = session.query(cls).filter(*filters).count()
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3147, in count
    self._legacy_from_self(col).enable_eagerloads(False).scalar()
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 2836, in scalar
    ret = self.one()
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 2809, in one
    return self._iter().one()  # type: ignore
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 2858, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2241, in _execute_internal
    conn = self._connection_for_bind(bind)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2110, in _connection_for_bind
    return trans._connection_for_bind(engine, execution_options)
  File "<string>", line 2, in _connection_for_bind
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/state_changes.py", line 103, in _go
    self._raise_for_prerequisite_state(fn.__name__, current_state)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 990, in _raise_for_prerequisite_state
    raise sa_exc.InvalidRequestError(
sqlalchemy.exc.InvalidRequestError: This session is provisioning a new connection; concurrent operations are not permitted (Background on this error at: https://sqlalche.me/e/20/isce)
2025-05-24 20:50:29 - backend.service_center.okx_service.okx_balance_service - INFO - 初始化OKXBalanceService
2025-05-24 20:50:29 - backend.service_center.okx_service.okx_balance_service - INFO - OKXBalanceService初始化完成
2025-05-24 20:50:29 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 20:50:29 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 20:50:29 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 20:50:29 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 20:50:29 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 20:50:29 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 20:50:29 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 20:50:29 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 20:50:29 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 20:50:29 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 20:50:29 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 20:50:29 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 20:50:29 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 20:50:29 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 20:50:33 - backend.controller_center.record.record_controller - INFO - Received fast trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 20:50:33 - backend.controller_center.record.record_controller - INFO - Received fast trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 20:50:34 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 20:50:34 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 20:50:35 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 20:50:35 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 20:50:35 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 20:50:35 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 20:50:35 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 20:50:35 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-24 20:50:35 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-24 20:50:35 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-24 20:50:35 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 20:50:35 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 20:50:35 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-24 20:50:35 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-24 20:50:36 - backend.controller_center.record.record_controller - INFO - Received fast trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 20:50:36 - backend.controller_center.record.record_controller - INFO - Received fast trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 20:50:38 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 97, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 16:28:38'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 20:50:38 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 97, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 16:28:38'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-24 20:50:50 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 20:50:50 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 20:50:50 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 20:50:50 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 20:50:50 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 20:50:50 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 20:51:15 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 20:51:15 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 20:51:15 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 20:51:15 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 20:51:16 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 20:51:16 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 20:52:05 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 20:52:05 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 20:52:05 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:52:05 - sqlalchemy.engine.Engine - INFO - PRAGMA temp.table_info("upload_file")
2025-05-24 20:52:05 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:52:05 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 20:52:05 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:52:05 - sqlalchemy.engine.Engine - INFO - PRAGMA temp.table_info("strategy_job")
2025-05-24 20:52:05 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:52:05 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 20:52:05 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:52:05 - sqlalchemy.engine.Engine - INFO - PRAGMA temp.table_info("system_prompt")
2025-05-24 20:52:05 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:52:05 - sqlalchemy.engine.Engine - INFO - 
CREATE TABLE upload_file (
	id INTEGER NOT NULL, 
	filename VARCHAR(255) NOT NULL, 
	stored_path VARCHAR(255) NOT NULL, 
	file_type VARCHAR(12) NOT NULL, 
	size INTEGER NOT NULL, 
	status VARCHAR(20), 
	created_at DATETIME, 
	PRIMARY KEY (id)
)


2025-05-24 20:52:05 - sqlalchemy.engine.Engine - INFO - [no key 0.00008s] ()
2025-05-24 20:52:05 - sqlalchemy.engine.Engine - INFO - 
CREATE TABLE strategy_job (
	id VARCHAR(12) NOT NULL, 
	file_id INTEGER NOT NULL, 
	prompt_id INTEGER NOT NULL, 
	progress INTEGER, 
	status VARCHAR(20), 
	output_py VARCHAR(255), 
	message VARCHAR(255), 
	created_at DATETIME, 
	finished_at DATETIME, 
	PRIMARY KEY (id)
)


2025-05-24 20:52:05 - sqlalchemy.engine.Engine - INFO - [no key 0.00016s] ()
2025-05-24 20:52:05 - sqlalchemy.engine.Engine - INFO - 
CREATE TABLE system_prompt (
	id INTEGER NOT NULL, 
	name VARCHAR(80) NOT NULL, 
	content TEXT NOT NULL, 
	created_at DATETIME, 
	updated_at DATETIME, 
	PRIMARY KEY (id)
)


2025-05-24 20:52:05 - sqlalchemy.engine.Engine - INFO - [no key 0.00014s] ()
2025-05-24 20:52:05 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 20:52:05 - __mp_main__ - INFO - 数据库表初始化完成
2025-05-24 20:52:05 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 20:52:05 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 20:52:05 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 20:52:05 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 20:52:05 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 20:52:05 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 20:52:05 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 20:52:05 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 20:52:05 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:52:05 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 20:52:05 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:52:05 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 20:52:05 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:52:05 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 20:52:05 - main_controller - INFO - 数据库表初始化完成
2025-05-24 20:52:44 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 20:52:44 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 20:52:44 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:52:44 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 20:52:44 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:52:44 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 20:52:44 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:52:44 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 20:52:44 - __mp_main__ - INFO - 数据库表初始化完成
2025-05-24 20:52:44 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 20:52:44 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 20:52:44 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 20:52:44 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 20:52:44 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 20:52:44 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 20:52:44 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 20:52:44 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 20:52:44 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:52:44 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 20:52:44 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:52:44 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 20:52:44 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:52:44 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 20:52:44 - main_controller - INFO - 数据库表初始化完成
2025-05-24 20:52:51 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 20:52:51 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 20:52:51 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:52:51 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 20:52:51 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:52:51 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 20:52:51 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:52:51 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 20:52:51 - __mp_main__ - INFO - 数据库表初始化完成
2025-05-24 20:52:51 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 20:52:51 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 20:52:51 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 20:52:51 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 20:52:52 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 20:52:52 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 20:52:52 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 20:52:52 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 20:52:52 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:52:52 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 20:52:52 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:52:52 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 20:52:52 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:52:52 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 20:52:52 - main_controller - INFO - 数据库表初始化完成
2025-05-24 20:53:26 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 20:53:26 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 20:53:26 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:53:26 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 20:53:26 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:53:26 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 20:53:26 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:53:26 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 20:53:26 - __main__ - INFO - 数据库表初始化完成
2025-05-24 20:53:26 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 20:53:26 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 20:53:26 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 20:53:26 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 20:53:26 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 20:53:26 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 20:53:26 - __main__ - INFO - 启动FastAPI服务器 - 主机: 127.0.0.1, 端口: 8000
2025-05-24 20:53:29 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 20:53:29 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 20:53:29 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:53:29 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 20:53:29 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:53:29 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 20:53:29 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:53:29 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 20:53:29 - __mp_main__ - INFO - 数据库表初始化完成
2025-05-24 20:53:29 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 20:53:29 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 20:53:29 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 20:53:29 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 20:53:30 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 20:53:30 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 20:53:30 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 20:53:30 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 20:53:30 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:53:30 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 20:53:30 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:53:30 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 20:53:30 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:53:30 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 20:53:30 - main_controller - INFO - 数据库表初始化完成
2025-05-24 20:54:19 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 20:54:19 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 20:54:19 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:54:19 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 20:54:19 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:54:19 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 20:54:19 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:54:19 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 20:54:19 - __mp_main__ - INFO - 数据库表初始化完成
2025-05-24 20:54:19 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 20:54:19 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 20:54:19 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 20:54:19 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 20:54:19 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 20:54:19 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 20:54:19 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 20:54:19 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 20:54:19 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:54:19 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 20:54:19 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:54:19 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 20:54:19 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:54:19 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 20:54:19 - main_controller - INFO - 数据库表初始化完成
2025-05-24 20:54:27 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 20:54:27 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 20:54:27 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:54:27 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-05-24 20:54:50 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 20:54:50 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 20:54:50 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:54:50 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-05-24 20:54:50 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 20:54:50 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 20:54:50 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:54:50 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-05-24 20:54:50 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 20:54:50 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 20:54:50 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:54:50 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-05-24 20:55:17 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 20:55:17 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 20:55:17 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:55:17 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 20:55:17 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:55:17 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 20:55:17 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:55:17 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 20:55:17 - __mp_main__ - INFO - 数据库表初始化完成
2025-05-24 20:55:17 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 20:55:17 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 20:55:17 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 20:55:17 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 20:55:20 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 20:55:20 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 20:55:20 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:55:20 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 20:55:20 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:55:20 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 20:55:20 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:55:20 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 20:55:20 - __mp_main__ - INFO - 数据库表初始化完成
2025-05-24 20:55:20 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 20:55:20 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 20:55:20 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 20:55:20 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 20:55:21 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 20:55:21 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 20:55:21 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 20:55:21 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 20:55:21 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:55:21 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 20:55:21 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:55:21 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 20:55:21 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:55:21 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 20:55:21 - main_controller - INFO - 数据库表初始化完成
2025-05-24 20:55:29 - __mp_main__ - INFO - 开始创建数据库表...
2025-05-24 20:55:29 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 20:55:29 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 20:55:29 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:55:29 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 20:55:29 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:55:29 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 20:55:29 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:55:29 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 20:55:29 - __mp_main__ - INFO - 数据库表创建完成
2025-05-24 20:55:29 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 20:55:29 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 20:55:29 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 20:55:29 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 20:55:30 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 20:55:30 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 20:55:30 - main_controller - INFO - 开始创建数据库表...
2025-05-24 20:55:30 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 20:55:30 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 20:55:30 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:55:30 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 20:55:30 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:55:30 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 20:55:30 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:55:30 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 20:55:30 - main_controller - INFO - 数据库表创建完成
2025-05-24 20:55:37 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 20:55:37 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 20:55:37 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:55:37 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-05-24 20:55:37 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 20:55:37 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 20:55:37 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:55:37 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-05-24 20:55:54 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 20:55:54 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 20:55:54 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:55:54 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-05-24 20:55:54 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 20:55:54 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 20:55:54 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:55:54 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-05-24 20:55:54 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 20:55:54 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 20:55:54 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:55:54 - sqlalchemy.engine.Engine - INFO - ROLLBACK
2025-05-24 20:57:23 - __mp_main__ - INFO - 开始创建数据库表...
2025-05-24 20:57:23 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 20:57:23 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 20:57:23 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:57:23 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 20:57:23 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:57:23 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 20:57:23 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:57:23 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 20:57:23 - __mp_main__ - INFO - 数据库表创建完成
2025-05-24 20:57:23 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 20:57:23 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 20:57:23 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 20:57:23 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 20:57:23 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 20:57:23 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 20:57:23 - main_controller - INFO - 开始创建数据库表...
2025-05-24 20:57:23 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 20:57:23 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 20:57:23 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:57:23 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 20:57:23 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:57:23 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 20:57:23 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:57:23 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 20:57:23 - main_controller - INFO - 数据库表创建完成
2025-05-24 20:57:30 - __mp_main__ - INFO - 开始创建数据库表...
2025-05-24 20:57:30 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 20:57:30 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 20:57:30 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:57:30 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 20:57:30 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:57:30 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 20:57:30 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:57:30 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 20:57:30 - __mp_main__ - INFO - 数据库表创建完成
2025-05-24 20:57:30 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 20:57:30 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 20:57:30 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 20:57:30 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 20:57:30 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 20:57:30 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 20:57:30 - main_controller - INFO - 开始创建数据库表...
2025-05-24 20:57:30 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 20:57:30 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 20:57:30 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:57:30 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 20:57:30 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:57:30 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 20:57:30 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:57:30 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 20:57:30 - main_controller - INFO - 数据库表创建完成
2025-05-24 20:57:50 - backend.controller_center.record.record_controller - INFO - Received fast trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 20:57:50 - backend.controller_center.record.record_controller - INFO - Received fast trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 20:57:50 - backend.controller_center.record.record_controller - ERROR - Error processing fast request: This session is provisioning a new connection; concurrent operations are not permitted (Background on this error at: https://sqlalche.me/e/20/isce)
Traceback (most recent call last):
  File "/Users/rain/PycharmProjects/uchu_trade/backend/controller_center/record/record_controller.py", line 75, in list_spot_record_fast
    page_result = RecordService.list_config_execute_records(request)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/controller_center/record/record_service.py", line 11, in list_config_execute_records
    return SpotAlgoOrderRecord.list_spot_algo_order_record_by_conditions(config_execute_history_request)
  File "/Users/rain/PycharmProjects/uchu_trade/backend/data_object_center/spot_algo_order_record.py", line 397, in list_spot_algo_order_record_by_conditions
    total = session.query(cls).filter(*filters).count()
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 3147, in count
    self._legacy_from_self(col).enable_eagerloads(False).scalar()
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 2836, in scalar
    ret = self.one()
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 2809, in one
    return self._iter().one()  # type: ignore
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/query.py", line 2858, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2365, in execute
    return self._execute_internal(
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2241, in _execute_internal
    conn = self._connection_for_bind(bind)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 2110, in _connection_for_bind
    return trans._connection_for_bind(engine, execution_options)
  File "<string>", line 2, in _connection_for_bind
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/state_changes.py", line 103, in _go
    self._raise_for_prerequisite_state(fn.__name__, current_state)
  File "/Users/rain/anaconda3/envs/okx-trading/lib/python3.10/site-packages/sqlalchemy/orm/session.py", line 990, in _raise_for_prerequisite_state
    raise sa_exc.InvalidRequestError(
sqlalchemy.exc.InvalidRequestError: This session is provisioning a new connection; concurrent operations are not permitted (Background on this error at: https://sqlalche.me/e/20/isce)
2025-05-24 20:57:54 - backend.controller_center.agent.agent_controller - INFO - 创建 system_prompt 表
2025-05-24 20:57:54 - backend.controller_center.agent.agent_controller - INFO - 表 system_prompt 创建成功
2025-05-24 20:58:56 - __mp_main__ - INFO - 开始创建数据库表...
2025-05-24 20:58:56 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 20:58:56 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 20:58:56 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:58:56 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 20:58:56 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:58:56 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 20:58:56 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:58:56 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 20:58:56 - __mp_main__ - INFO - 数据库表创建完成
2025-05-24 20:58:56 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 20:58:56 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 20:58:56 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 20:58:56 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 20:58:57 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 20:58:57 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 20:58:57 - main_controller - INFO - 开始创建数据库表...
2025-05-24 20:58:57 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 20:58:57 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 20:58:57 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:58:57 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 20:58:57 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:58:57 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 20:58:57 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:58:57 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 20:58:57 - main_controller - INFO - 数据库表创建完成
2025-05-24 20:59:03 - __mp_main__ - INFO - 开始创建数据库表...
2025-05-24 20:59:03 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 20:59:03 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 20:59:03 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:59:03 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 20:59:03 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:59:03 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 20:59:03 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:59:03 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 20:59:03 - __mp_main__ - INFO - 数据库表创建完成
2025-05-24 20:59:03 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 20:59:03 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 20:59:03 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 20:59:03 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 20:59:04 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 20:59:04 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 20:59:04 - main_controller - INFO - 开始创建数据库表...
2025-05-24 20:59:04 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 20:59:04 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 20:59:04 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:59:04 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 20:59:04 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:59:04 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 20:59:04 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:59:04 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 20:59:04 - main_controller - INFO - 数据库表创建完成
2025-05-24 20:59:18 - __mp_main__ - INFO - 开始创建数据库表...
2025-05-24 20:59:18 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 20:59:18 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 20:59:18 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:59:18 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 20:59:18 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:59:18 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 20:59:18 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:59:18 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 20:59:18 - __mp_main__ - INFO - 数据库表创建完成
2025-05-24 20:59:18 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 20:59:18 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 20:59:18 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 20:59:18 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 20:59:19 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 20:59:19 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 20:59:19 - main_controller - INFO - 开始创建数据库表...
2025-05-24 20:59:19 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 20:59:19 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 20:59:19 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:59:19 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 20:59:19 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:59:19 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 20:59:19 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:59:19 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 20:59:19 - main_controller - INFO - 数据库表创建完成
2025-05-24 20:59:32 - __mp_main__ - INFO - 开始创建数据库表...
2025-05-24 20:59:32 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 20:59:32 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 20:59:32 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:59:32 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 20:59:32 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:59:32 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 20:59:32 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:59:32 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 20:59:32 - __mp_main__ - INFO - 数据库表创建完成
2025-05-24 20:59:32 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 20:59:32 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 20:59:32 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 20:59:32 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 20:59:33 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 20:59:33 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 20:59:33 - main_controller - INFO - 开始创建数据库表...
2025-05-24 20:59:33 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 20:59:33 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 20:59:33 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:59:33 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 20:59:33 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:59:33 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 20:59:33 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:59:33 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 20:59:33 - main_controller - INFO - 数据库表创建完成
2025-05-24 20:59:53 - __mp_main__ - INFO - 开始创建数据库表...
2025-05-24 20:59:53 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 20:59:53 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 20:59:53 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:59:53 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 20:59:53 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:59:53 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 20:59:53 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:59:53 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 20:59:53 - __mp_main__ - INFO - 数据库表创建完成
2025-05-24 20:59:53 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 20:59:53 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 20:59:53 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 20:59:53 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 20:59:54 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 20:59:54 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 20:59:54 - main_controller - INFO - 开始创建数据库表...
2025-05-24 20:59:54 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 20:59:54 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 20:59:54 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:59:54 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 20:59:54 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:59:54 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 20:59:54 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 20:59:54 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 20:59:54 - main_controller - INFO - 数据库表创建完成
2025-05-24 21:07:07 - __mp_main__ - INFO - 开始创建数据库表...
2025-05-24 21:07:07 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 21:07:07 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 21:07:07 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:07:07 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 21:07:07 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:07:07 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 21:07:07 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:07:07 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 21:07:07 - __mp_main__ - INFO - 数据库表创建完成
2025-05-24 21:07:07 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 21:07:07 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 21:07:07 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 21:07:07 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 21:07:08 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 21:07:08 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 21:07:08 - main_controller - INFO - 开始创建数据库表...
2025-05-24 21:07:08 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 21:07:08 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 21:07:08 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:07:08 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 21:07:08 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:07:08 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 21:07:08 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:07:08 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 21:07:08 - main_controller - INFO - 数据库表创建完成
2025-05-24 21:07:24 - backend.controller_center.agent.agent_controller - INFO - 创建 upload_file 表
2025-05-24 21:07:24 - backend.controller_center.agent.agent_controller - INFO - 表 upload_file 创建成功
2025-05-24 21:09:41 - __mp_main__ - INFO - 开始创建数据库表...
2025-05-24 21:09:41 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 21:09:41 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 21:09:41 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:09:41 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 21:09:41 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:09:41 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 21:09:41 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:09:41 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 21:09:41 - __mp_main__ - INFO - 数据库表创建完成
2025-05-24 21:09:41 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 21:09:41 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 21:09:41 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 21:09:41 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 21:09:42 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 21:09:42 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 21:09:42 - main_controller - INFO - 开始创建数据库表...
2025-05-24 21:09:42 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 21:09:42 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 21:09:42 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:09:42 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 21:09:42 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:09:42 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 21:09:42 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:09:42 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 21:09:42 - main_controller - INFO - 数据库表创建完成
2025-05-24 21:11:05 - __mp_main__ - INFO - 开始创建数据库表...
2025-05-24 21:11:05 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 21:11:05 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 21:11:05 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:11:05 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 21:11:05 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:11:05 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 21:11:05 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:11:05 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 21:11:05 - __mp_main__ - INFO - 数据库表创建完成
2025-05-24 21:11:05 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 21:11:05 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 21:11:05 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 21:11:05 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 21:11:06 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 21:11:06 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 21:11:06 - main_controller - INFO - 开始创建数据库表...
2025-05-24 21:11:06 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 21:11:06 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 21:11:06 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:11:06 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 21:11:06 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:11:06 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 21:11:06 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:11:06 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 21:11:06 - main_controller - INFO - 数据库表创建完成
2025-05-24 21:13:50 - __mp_main__ - INFO - 开始创建数据库表...
2025-05-24 21:13:50 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 21:13:50 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 21:13:50 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:13:50 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 21:13:50 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:13:50 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 21:13:50 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:13:50 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 21:13:50 - __mp_main__ - INFO - 数据库表创建完成
2025-05-24 21:13:50 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 21:13:50 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 21:13:50 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 21:13:50 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 21:13:50 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 21:13:50 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 21:13:51 - main_controller - INFO - 开始创建数据库表...
2025-05-24 21:13:51 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 21:13:51 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 21:13:51 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:13:51 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 21:13:51 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:13:51 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 21:13:51 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:13:51 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 21:13:51 - main_controller - INFO - 数据库表创建完成
2025-05-24 21:14:44 - __mp_main__ - INFO - 开始创建数据库表...
2025-05-24 21:14:44 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 21:14:44 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 21:14:44 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:14:44 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 21:14:44 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:14:44 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 21:14:44 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:14:44 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 21:14:44 - __mp_main__ - INFO - 数据库表创建完成
2025-05-24 21:14:44 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 21:14:44 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 21:14:44 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 21:14:44 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 21:14:45 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 21:14:45 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 21:14:45 - main_controller - INFO - 开始创建数据库表...
2025-05-24 21:14:45 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 21:14:45 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 21:14:45 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:14:45 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 21:14:45 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:14:45 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 21:14:45 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:14:45 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 21:14:45 - main_controller - INFO - 数据库表创建完成
2025-05-24 21:14:52 - __mp_main__ - INFO - 开始创建数据库表...
2025-05-24 21:14:52 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 21:14:52 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 21:14:52 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:14:52 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 21:14:52 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:14:52 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 21:14:52 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:14:52 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 21:14:52 - __mp_main__ - INFO - 数据库表创建完成
2025-05-24 21:14:52 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 21:14:52 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 21:14:52 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 21:14:52 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 21:14:53 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 21:14:53 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 21:14:53 - main_controller - INFO - 开始创建数据库表...
2025-05-24 21:14:53 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 21:14:53 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 21:14:53 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:14:53 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 21:14:53 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:14:53 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 21:14:53 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:14:53 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 21:14:53 - main_controller - INFO - 数据库表创建完成
2025-05-24 21:18:43 - backend.controller_center.record.record_controller - INFO - Received fast trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 21:18:43 - backend.controller_center.record.record_controller - INFO - Received fast trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 21:22:42 - backend.controller_center.record.record_controller - INFO - Received fast trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 21:22:42 - backend.controller_center.record.record_controller - INFO - Received fast trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 21:29:46 - backend.controller_center.record.record_controller - INFO - Received fast trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 21:29:46 - backend.controller_center.record.record_controller - INFO - Received fast trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-24 21:42:08 - __mp_main__ - INFO - 开始创建数据库表...
2025-05-24 21:42:08 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 21:42:08 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 21:42:08 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:42:08 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 21:42:08 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:42:08 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 21:42:08 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:42:08 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 21:42:08 - __mp_main__ - INFO - 数据库表创建完成
2025-05-24 21:42:08 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 21:42:08 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 21:42:08 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 21:42:08 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 21:42:08 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 21:42:08 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 21:42:08 - main_controller - INFO - 开始创建数据库表...
2025-05-24 21:42:08 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 21:42:08 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 21:42:08 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:42:08 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 21:42:08 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:42:08 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 21:42:08 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:42:08 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 21:42:08 - main_controller - INFO - 数据库表创建完成
2025-05-24 21:44:57 - __mp_main__ - INFO - 开始创建数据库表...
2025-05-24 21:44:57 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 21:44:57 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 21:44:57 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:44:57 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 21:44:57 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:44:57 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 21:44:57 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:44:57 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 21:44:57 - __mp_main__ - INFO - 数据库表创建完成
2025-05-24 21:44:57 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 21:44:57 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 21:44:57 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 21:44:57 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 21:44:57 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 21:44:57 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 21:44:57 - main_controller - INFO - 开始创建数据库表...
2025-05-24 21:44:57 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 21:44:57 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 21:44:57 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:44:57 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 21:44:57 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:44:57 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 21:44:57 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:44:57 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 21:44:57 - main_controller - INFO - 数据库表创建完成
2025-05-24 21:46:52 - __mp_main__ - INFO - 开始创建数据库表...
2025-05-24 21:46:52 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 21:46:52 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 21:46:52 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:46:52 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 21:46:52 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:46:52 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 21:46:52 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:46:52 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 21:46:52 - __mp_main__ - INFO - 数据库表创建完成
2025-05-24 21:46:52 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 21:46:52 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 21:46:52 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 21:46:52 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 21:46:53 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 21:46:53 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 21:46:53 - main_controller - INFO - 开始创建数据库表...
2025-05-24 21:46:53 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 21:46:53 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 21:46:53 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:46:53 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 21:46:53 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:46:53 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 21:46:53 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:46:53 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 21:46:53 - main_controller - INFO - 数据库表创建完成
2025-05-24 21:47:06 - __mp_main__ - INFO - 开始创建数据库表...
2025-05-24 21:47:06 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 21:47:06 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 21:47:06 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:47:06 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 21:47:06 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:47:06 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 21:47:06 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:47:06 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 21:47:06 - __mp_main__ - INFO - 数据库表创建完成
2025-05-24 21:47:06 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 21:47:06 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 21:47:06 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 21:47:06 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 21:47:07 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 21:47:07 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 21:47:07 - main_controller - INFO - 开始创建数据库表...
2025-05-24 21:47:07 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 21:47:07 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 21:47:07 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:47:07 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 21:47:07 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:47:07 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 21:47:07 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:47:07 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 21:47:07 - main_controller - INFO - 数据库表创建完成
2025-05-24 21:58:16 - __mp_main__ - INFO - 开始创建数据库表...
2025-05-24 21:58:16 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 21:58:16 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 21:58:16 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:58:16 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 21:58:16 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:58:16 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 21:58:16 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:58:16 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 21:58:16 - __mp_main__ - INFO - 数据库表创建完成
2025-05-24 21:58:16 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 21:58:16 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 21:58:16 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 21:58:16 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 21:58:17 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 21:58:17 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 21:58:17 - main_controller - INFO - 开始创建数据库表...
2025-05-24 21:58:17 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 21:58:17 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 21:58:17 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:58:17 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 21:58:17 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:58:17 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 21:58:17 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:58:17 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 21:58:17 - main_controller - INFO - 数据库表创建完成
2025-05-24 21:58:30 - __mp_main__ - INFO - 开始创建数据库表...
2025-05-24 21:58:30 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 21:58:30 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 21:58:30 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:58:30 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 21:58:30 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:58:30 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 21:58:30 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:58:30 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 21:58:30 - __mp_main__ - INFO - 数据库表创建完成
2025-05-24 21:58:30 - api_center.okx_api.okx_main - INFO - 初始化OKXAPIWrapper - 环境: market
2025-05-24 21:58:30 - api_center.okx_api.okx_main - INFO - 配置加载完成
2025-05-24 21:58:30 - api_center.okx_api.okx_main - INFO - API配置 - 环境: market, 模拟交易: 0
2025-05-24 21:58:30 - backend.api_center.okx_api.account_api - INFO - 初始化AccountAPIWrapper - flag: 0
2025-05-24 21:58:31 - api_center.okx_api.okx_main - INFO - 所有API组件初始化完成
2025-05-24 21:58:31 - api_center.okx_api.okx_main - INFO - market OKX API 初始化完成
2025-05-24 21:58:31 - main_controller - INFO - 开始创建数据库表...
2025-05-24 21:58:31 - sqlalchemy.engine.Engine - INFO - BEGIN (implicit)
2025-05-24 21:58:31 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("upload_file")
2025-05-24 21:58:31 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:58:31 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("strategy_job")
2025-05-24 21:58:31 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:58:31 - sqlalchemy.engine.Engine - INFO - PRAGMA main.table_info("system_prompt")
2025-05-24 21:58:31 - sqlalchemy.engine.Engine - INFO - [raw sql] ()
2025-05-24 21:58:31 - sqlalchemy.engine.Engine - INFO - COMMIT
2025-05-24 21:58:31 - main_controller - INFO - 数据库表创建完成
2025-05-24 21:58:53 - backend.controller_center.agent.agent_controller - INFO - 创建 strategy_job 表
2025-05-24 21:58:53 - backend.controller_center.agent.agent_controller - INFO - 表 strategy_job 创建成功
2025-05-24 21:58:53 - backend.strategy_center.strategy_materials.tools.pdf_processor - INFO - 开始处理PDF: 股票魔法师2 电子书.pdf
2025-05-24 21:58:59 - backend.strategy_center.strategy_materials.tools.pdf_processor - INFO - 使用PyPDF2成功提取: 股票魔法师2 电子书.pdf
2025-05-24 21:58:59 - backend.strategy_center.strategy_materials.tools.pdf_processor - INFO - 成功处理PDF: 股票魔法师2 电子书.pdf, 文本长度: 137582
2025-05-24 21:58:59 - backend.strategy_center.strategy_materials.tools.ai_rule_enhancer - INFO - 开始AI分析: 股票魔法师2 电子书.txt
2025-05-24 21:58:59 - backend.strategy_center.strategy_materials.tools.ai_rule_enhancer - INFO - 正在分析文本块 1/7
2025-05-24 21:58:59 - backend.strategy_center.strategy_materials.tools.ai_rule_enhancer - INFO - 正在分析文本块 2/7
2025-05-24 21:58:59 - backend.strategy_center.strategy_materials.tools.ai_rule_enhancer - INFO - 正在分析文本块 3/7
2025-05-24 21:58:59 - backend.strategy_center.strategy_materials.tools.ai_rule_enhancer - INFO - 正在分析文本块 4/7
2025-05-24 21:58:59 - backend.strategy_center.strategy_materials.tools.ai_rule_enhancer - INFO - 正在分析文本块 5/7
2025-05-24 21:58:59 - backend.strategy_center.strategy_materials.tools.ai_rule_enhancer - INFO - 正在分析文本块 6/7
2025-05-24 21:58:59 - backend.strategy_center.strategy_materials.tools.ai_rule_enhancer - INFO - 正在分析文本块 7/7
2025-05-24 21:58:59 - backend.strategy_center.strategy_materials.tools.ai_rule_enhancer - INFO - AI分析完成: 股票魔法师2 电子书.txt
2025-05-24 21:58:59 - backend.strategy_center.strategy_materials.tools.strategy_generator - INFO - 开始生成策略: strategy_股票魔法师2 电子书
2025-05-24 21:58:59 - backend.strategy_center.strategy_materials.tools.strategy_generator - INFO - 策略生成完成: strategy_股票魔法师2 电子书
2025-05-24 21:58:59 - backend.strategy_center.strategy_materials.tools.strategy_generator - INFO - 策略生成完成: 1/1 成功
2025-05-25 03:26:35 - backend.controller_center.record.record_controller - INFO - Received fast trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-25 03:26:35 - backend.controller_center.record.record_controller - INFO - Received fast trade request: pageSize=10 pageNum=1 ccy='' type='' side='' status='' exec_source='' begin_time='' end_time=''
2025-05-25 03:26:36 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 97, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 16:28:38'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-25 03:26:36 - backend.controller_center.strategy.strategy_controller - INFO - 策略列表: {'success': True, 'data': {'items': [{'id': 11, 'name': 'SOL双布林带', 'trade_pair': 'SOL-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 97, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-23'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2025-05-24 13:49:00', 'gmt_modified': '2025-05-24 16:28:38'}, {'id': 8, 'name': 'BTC双布林带策略', 'trade_pair': 'BTC-USDT', 'time_frame': '4H', 'side': 'long', 'entry_per_trans': 1000, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_diff_increasing_filter_strategy,sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2', 'time': '12-23'}, 'stop_loss_config': {'trailing_stop': '12'}, 'switch': 1, 'gmt_create': '2024-11-12 22:18:05', 'gmt_modified': '2025-01-04 21:11:27'}, {'id': 2, 'name': 'ETH双布林带策略', 'trade_pair': 'ETH-USDT', 'time_frame': '4h', 'side': 'long', 'entry_per_trans': 0, 'loss_per_trans': 200, 'entry_st_code': 'dbb_entry_long_strategy', 'exit_st_code': 'dbb_exit_long_strategy', 'filter_st_code': 'sma_perfect_order_filter_strategy', 'schedule_config': {'date': '1,2,3,4,5,6,7', 'time': '0-24'}, 'stop_loss_config': {}, 'switch': 1, 'gmt_create': '2024-03-03 14:36:06', 'gmt_modified': '2025-05-24 13:35:42'}], 'total_count': 3, 'page_size': 10, 'page_num': 1}}
2025-05-25 03:26:37 - backend.service_center.okx_service.okx_balance_service - INFO - 初始化OKXBalanceService
2025-05-25 03:26:37 - backend.service_center.okx_service.okx_balance_service - INFO - OKXBalanceService初始化完成
2025-05-25 03:26:37 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-25 03:26:37 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-25 03:26:37 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-25 03:26:37 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-25 03:26:37 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-25 03:26:37 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-25 03:26:37 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-25 03:26:37 - backend.service_center.okx_service.okx_balance_service - INFO - 开始获取账户余额列表
2025-05-25 03:26:37 - backend.api_center.okx_api.account_api - INFO - 开始获取账户余额
2025-05-25 03:26:37 - httpx - INFO - HTTP Request: GET https://www.okx.com/api/v5/account/balance "HTTP/2 401 Unauthorized"
2025-05-25 03:26:37 - backend.api_center.okx_api.account_api - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-25 03:26:37 - backend.api_center.okx_api.account_api - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-25 03:26:37 - backend.service_center.okx_service.okx_balance_service - INFO - 获取账户余额响应: {'msg': "Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.", 'code': '50110'}
2025-05-25 03:26:37 - backend.service_center.okx_service.okx_balance_service - ERROR - 获取账户余额失败 - 错误码: 50110, 错误信息: Your IP 112.120.48.156 is not included in your API key's 7c6dda50-2591-4b3a-a3bd-94d2e6101926 IP whitelist.
2025-05-25 03:26:40 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-25 03:26:40 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: BTC-USDT_ST8_202505241634, record_count=88
2025-05-25 03:26:40 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测详情: BTC-USDT_ST8_202505241634, record_count=88
2025-05-25 03:26:40 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
2025-05-25 03:26:40 - backend.controller_center.backtest.backtest_service - INFO - 成功获取回测记录列表: 8
